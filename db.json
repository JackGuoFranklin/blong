{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/image/imagegithub1.jpg","path":"image/imagegithub1.jpg","modified":1,"renderable":0},{"_id":"source/image/imagegithub3.jpg","path":"image/imagegithub3.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"source/image/imagegithub2.gif","path":"image/imagegithub2.gif","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1466422815000},{"_id":"source/.DS_Store","hash":"ac168a1e77f88f295330055c7bc197691175281f","modified":1467297199000},{"_id":"themes/next/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1466474465000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1466422815000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1466422815000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1466422815000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1466422815000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1466422815000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1466422815000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1466422815000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1466422815000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1466422815000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1466422815000},{"_id":"themes/next/_config.yml","hash":"1ad7f5dd708787d8b57c5c44b664ca3933e9b8c5","modified":1466652118000},{"_id":"source/_posts/HexoNext配置主题.md","hash":"57d6156a61792ca0dc2db777a24a3076973e8155","modified":1466471464000},{"_id":"source/_posts/Hexo初步教程.md","hash":"928919e3c74a4c3686bbbfe72742ac2b0afe187c","modified":1466471464000},{"_id":"source/_posts/Hexo更换主题Next.md","hash":"f4da66982801f8235ade8a836d651aba8b863b1d","modified":1466471464000},{"_id":"source/_posts/Swift代理.md","hash":"5e42ce741068955d05a84fc6d77169dbbeefe0de","modified":1467261755000},{"_id":"source/_posts/Hexo评论与站点统计系统.md","hash":"186dc54801b0bd5bad4f7192a6ce2ae659d6f421","modified":1466471464000},{"_id":"source/_posts/UIView的常用属性和常用方法.md","hash":"7cc9618ca7ce78c11adc6b4ac961b45eb20263b5","modified":1466867894000},{"_id":"source/_posts/UISreen类的屏幕大小.md","hash":"779c91916aac36dcc4afa4d842ae02ad09ac214f","modified":1466867624000},{"_id":"source/categories/index.md","hash":"44196c02ee06481d97932490221517b36e73f04f","modified":1466471464000},{"_id":"source/_posts/.DS_Store","hash":"5dc3474db7ece9674299fb5dd1837abcbcb71c06","modified":1467268300000},{"_id":"source/_posts/github插件.md","hash":"3d9f4700b530f8ae29755bb546ec5523fdb5ffca","modified":1467297753000},{"_id":"source/_posts/Swift_ios_开发之UINavigationController的常用属性.md","hash":"cced189179c32c0d1b34df568d92025188fe1e9f","modified":1467261993000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1466471464000},{"_id":"source/_posts/ios核心动画之CAShapeLayer.md","hash":"7aae441764e345711da25b780d6978af8bcf365d","modified":1466698514000},{"_id":"source/_posts/mac server.md","hash":"a5cecee9d34dcbfbddbe67c1a2fa6557d8fb6818","modified":1466698404000},{"_id":"source/_posts/iosQR二维码.md","hash":"94bf236cca3bb8315a64ca588ffa4b6020df91a0","modified":1467128812000},{"_id":"source/_posts/ios使用AVFoundation实现条形码扫描.md","hash":"9c8a3877f95a9b209a615a0c271b1047476aa527","modified":1467261925000},{"_id":"source/_posts/swift-SnapKit自动布局使用1.md","hash":"37153f8a2750a84811df9c2100d8c5558280a872","modified":1466820746000},{"_id":"source/_posts/swift-SnapKit自动布局使用2.md","hash":"779038f6096d886776d7775de461dc797deec58c","modified":1466821237000},{"_id":"source/_posts/androidstudio启动慢.md","hash":"30b509b22f090904908cbc693b2eaa0e662447b0","modified":1466672094000},{"_id":"source/_posts/按钮（UIButton）的用法.md","hash":"313511f27e098d5df57ef6304dc63ef81216846a","modified":1466902204000},{"_id":"source/_posts/第三方库.md","hash":"27568e3101e77a0e53de88b609417bf6270c0490","modified":1466698541000},{"_id":"source/_posts/创建Git仓库osChina.md","hash":"45951e337ec4a3a0eeadf6fbf0aab6f5fb6a4d17","modified":1467268490000},{"_id":"source/_posts/使用CIFilter生成二维码.md","hash":"2a981a1bb34a840f24e0ccd05fcbd5d5cc42c21c","modified":1467128821000},{"_id":"source/_posts/swift-SnapKit自动布局使用3.md","hash":"bf2a514abe32aadc0daf7c9be2f962aa428581e2","modified":1466821997000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1466422815000},{"_id":"source/tags/index.md","hash":"4dea21ea9dadc09bfdca7e44a2541e857a0ff6dc","modified":1466471464000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1466422815000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1466422815000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1466422815000},{"_id":"themes/next/layout/post.swig","hash":"9fd52b04c2b59c7c9c7be6b73968eb4000d1dc77","modified":1466465103000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1466422815000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1466422815000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1466422815000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1466422815000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1466422815000},{"_id":"themes/next/layout/index.swig","hash":"20f36ea1efe51220583e35d32fc79c06fbcb9ee8","modified":1466465172000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1466422815000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1466422815000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1466422815000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1466422815000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1466422815000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1466422815000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1466422815000},{"_id":"source/image/imagegithub1.jpg","hash":"e73a6dc2e85315a809efb109d3ab9912fdc9ed0f","modified":1467296812000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1466422815000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1466422815000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1466422815000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1466422815000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466422815000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1466422815000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1466422815000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1466422815000},{"_id":"source/image/imagegithub3.jpg","hash":"21dbb45cb9d134ac997bc3f093148e6db07f2704","modified":1467296864000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1466422815000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1466422815000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1466422815000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1466422815000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1466422815000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1466422815000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1466422815000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1466422815000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1466422815000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1466422815000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1466422815000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1466422815000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1466422815000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1466422815000},{"_id":"themes/next/layout/_macro/post.swig","hash":"843b31735f210081c9263bebdaf8ea3d0f68857e","modified":1466466485000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1466422815000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1466422815000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1466422815000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1466422815000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1466422815000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1466422815000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d73b323537a8583437b77209e7d556ca46c55161","modified":1466466484000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1466422815000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1466422815000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1466422815000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1466422815000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1466422815000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1466422815000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1466422815000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466422815000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466422815000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466422815000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466422815000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466422815000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466422815000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466422815000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1466422815000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1466422815000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1466422815000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1466422815000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1466422815000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1466422815000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1466422815000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1466422815000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1466422815000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1466422815000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1466422815000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1466422815000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1466422815000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1466422815000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1466422815000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1466422815000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1466422815000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1466422815000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1466422815000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1466422815000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1466422815000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1466422815000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1466422815000},{"_id":"source/image/imagegithub2.gif","hash":"5cc5abf3964fb0170af3fb7c0b9ea08f79256129","modified":1467296849000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1466422815000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1466422815000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1466422815000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1466422815000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1466422815000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1466422815000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1466422815000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1466422815000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1466422815000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1466422815000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1466422815000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1466422815000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1466422815000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1466422815000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1466422815000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1466422815000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1466422815000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1466422815000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1466422815000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1466422815000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1466422815000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1466422815000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1466422815000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1466422815000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1466422815000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1466422815000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1466422815000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1466422815000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1466422815000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1466422815000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1466422815000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1466422815000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1466422815000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1466422815000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1466422815000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1466422815000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1466422815000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1466422815000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1466422815000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1466422815000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1466422815000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1466422815000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1466422815000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1466422815000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1466422815000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1466422815000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1466422815000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1466422815000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1466422815000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1466422815000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1466422815000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1466422815000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1466422815000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1466422815000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1466422815000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1466422815000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1466422815000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1466422815000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1466422815000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1466422815000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1466422815000},{"_id":"public/baidusitemap.xml","hash":"f2a2563f59bd3f2ee4dc58b16562be5c0333cfc0","modified":1467297779734},{"_id":"public/atom.xml","hash":"70760e1ec31404402ff42ac4ab054081f4fa35d5","modified":1467297779734},{"_id":"public/sitemap.xml","hash":"52b1ef276e3f84acc55764519a6a767d0f669ddc","modified":1467297779735},{"_id":"public/categories/index.html","hash":"023568199c7dab48f8f2a49e4ec50eb20bec2599","modified":1467297779749},{"_id":"public/tags/index.html","hash":"bdd414019d3304829252c7d0a74d56fcc7b27c74","modified":1467297779749},{"_id":"public/2016/06/25/UISreen类的屏幕大小/index.html","hash":"d8eadf64d2c3665ada7cd08eeea6f38443e73fb8","modified":1467297779749},{"_id":"public/archives/page/3/index.html","hash":"a9eaaff03a05d03bbe7ad409e61744537c50f4ea","modified":1467297779749},{"_id":"public/archives/2016/page/3/index.html","hash":"7beb7e63eb6299c77979b170d202cbc49db22f2b","modified":1467297779749},{"_id":"public/archives/2016/06/page/3/index.html","hash":"fa450a173837547c9ad6edec7a3875d058926b87","modified":1467297779749},{"_id":"public/categories/hexo/index.html","hash":"3011a0a745ad215f54c5e1f0743ac4c4f775303a","modified":1467297779749},{"_id":"public/categories/swift/page/2/index.html","hash":"4af8746face09f0a0cc502f69b5b3539b6a92db7","modified":1467297779749},{"_id":"public/categories/github/index.html","hash":"bae4a54192da451bb38f1d8072e03cadb4e07e53","modified":1467297779749},{"_id":"public/categories/ios/index.html","hash":"ac89d2a0f5bb03eff214ae87972609b39826ee5c","modified":1467297779749},{"_id":"public/categories/mac/index.html","hash":"afd3592c26e6ed78d4f45500b47a138edbcd07bf","modified":1467297779749},{"_id":"public/categories/android/index.html","hash":"583f7b9cff7800e7bfaaf1e7a9474f9d3f410e60","modified":1467297779750},{"_id":"public/categories/git/index.html","hash":"0e3471e933751d89dbccb718935241692f513294","modified":1467297779750},{"_id":"public/tags/hexo/index.html","hash":"3d0289268dada1fdbd741e27282aa4f72ba5e7a6","modified":1467297779750},{"_id":"public/tags/next/index.html","hash":"6bea13ef6a7da38f7175de4dd24328df414c21ba","modified":1467297779750},{"_id":"public/tags/swift/page/2/index.html","hash":"3e5c51cf21051f3165f31e0b963039d806f89ef1","modified":1467297779750},{"_id":"public/tags/delegate/index.html","hash":"c498e064fb05063f7302bff6291ed612421f4b3e","modified":1467297779750},{"_id":"public/tags/github/index.html","hash":"13d73a2f285516f5a8f3cec7fc5d84fd025bbff8","modified":1467297779750},{"_id":"public/tags/ios/index.html","hash":"06ff922fe64f70d781502451d3ab061f5452db21","modified":1467297779750},{"_id":"public/tags/UINavigationController/index.html","hash":"aff4aa4ee26a050ab1808989dc2a5e4bfe4fb653","modified":1467297779750},{"_id":"public/tags/animation/index.html","hash":"099ada2db50c25dff818f39817e09c3f6dbbf927","modified":1467297779750},{"_id":"public/tags/mac/index.html","hash":"8cba536369e70a9adef0217063edcbf2b59f5d83","modified":1467297779750},{"_id":"public/tags/QRCode/index.html","hash":"6377036c774c25a18c0b09bcaaf019b84e2e060c","modified":1467297779750},{"_id":"public/tags/AVFoundation/index.html","hash":"ac5de7d1baeb5ce77e7ab4d36e7f59b6015af833","modified":1467297779750},{"_id":"public/tags/SnapKit/index.html","hash":"320f4b8a87da526ddca36acb6cd23752a29dc042","modified":1467297779750},{"_id":"public/tags/android/index.html","hash":"bd727c7df4a0a846644754b92231a1250fc78940","modified":1467297779750},{"_id":"public/tags/android-studio/index.html","hash":"835fed800372a006b38aa21aa2d7eb3b343e6f58","modified":1467297779750},{"_id":"public/tags/git/index.html","hash":"a521cfccb69d3dee5e7d64322e5b56e1a88894a8","modified":1467297779750},{"_id":"public/tags/git-osChina/index.html","hash":"899aac84c4b9bf194b1b417c9ef5be506ae692a5","modified":1467297779750},{"_id":"public/tags/sourceTree/index.html","hash":"9617a0a86c80667a5f5f25be891f2f76fbe1baac","modified":1467297779751},{"_id":"public/2016/06/30/github插件/index.html","hash":"3cb9d16168a65c3f0a200e53d7d13c73a59b8ece","modified":1467297779751},{"_id":"public/2016/06/30/创建Git仓库osChina/index.html","hash":"c0862cd3f1826754187efe76fe143125577a3e4e","modified":1467297779751},{"_id":"public/2016/06/30/ios使用AVFoundation实现条形码扫描/index.html","hash":"a44a316162d01d12182a1110f42b45eb4d044090","modified":1467297779751},{"_id":"public/2016/06/30/Swift_ios_开发之UINavigationController的常用属性/index.html","hash":"250d12fb5f5aa3ecac2fa6fbd90f4b1a382ea8d8","modified":1467297779751},{"_id":"public/2016/06/30/Swift代理/index.html","hash":"b2ce0cbacbff53608c16ca8c0c25cdf3199269cd","modified":1467297779751},{"_id":"public/2016/06/28/使用CIFilter生成二维码/index.html","hash":"843e2772e9f786b3b4dc8b26c1805adec773c050","modified":1467297779751},{"_id":"public/2016/06/28/iosQR二维码/index.html","hash":"2673f97ffe954bbe3bb57c83f3fbc37450349b14","modified":1467297779751},{"_id":"public/2016/06/26/按钮（UIButton）的用法/index.html","hash":"5d9e148bd6829b8e7b39f7f1063d5482b83ef078","modified":1467297779751},{"_id":"public/2016/06/25/UIView的常用属性和常用方法/index.html","hash":"47bd17f52b2415f0727bf3b63a9eff69eef2c5d8","modified":1467297779751},{"_id":"public/2016/06/25/swift-SnapKit自动布局使用2/index.html","hash":"a774f87a752fedf51d5fb4a44d1b65bba04adc23","modified":1467297779751},{"_id":"public/2016/06/25/swift-SnapKit自动布局使用3/index.html","hash":"1f91b36469374a7f200bec9852c1dce0e4ed1540","modified":1467297779751},{"_id":"public/2016/06/24/swift-SnapKit自动布局使用1/index.html","hash":"901e73b4382d9a89cda956ac412a67c99eeb8c92","modified":1467297779751},{"_id":"public/2016/06/23/androidstudio启动慢/index.html","hash":"b96c2aebbfa1bf0e359eae3416ccacf296504be8","modified":1467297779751},{"_id":"public/2016/06/21/Hexo更换主题Next/index.html","hash":"01e354401aaf017c69dd8bd998de968509b6f334","modified":1467297779752},{"_id":"public/2016/06/21/hello-world/index.html","hash":"62d441ecd2e9789bb07c07ff33fb69f6f651c78d","modified":1467297779752},{"_id":"public/2016/06/21/第三方库/index.html","hash":"0918d7e524e709dd8c09a84f8bfb3aab636e91b0","modified":1467297779752},{"_id":"public/2016/06/21/ios核心动画之CAShapeLayer/index.html","hash":"3bf7e9510d86a365fe0105139de4ad7a7c0c9595","modified":1467297779752},{"_id":"public/2016/06/21/Hexo初步教程/index.html","hash":"b75de31d7849e90faac0d652795a57c3f18c0d3b","modified":1467297779752},{"_id":"public/2016/06/21/HexoNext配置主题/index.html","hash":"6399eec0af5f2b1e9fe7fd585ac78d295665d3ce","modified":1467297779752},{"_id":"public/2016/06/21/Hexo评论与站点统计系统/index.html","hash":"0e89e4231b4c2a9b67821030b1e5872bab0992dc","modified":1467297779752},{"_id":"public/2016/06/21/mac server/index.html","hash":"68a99ce8cefe5cf31b5f1d915c5042c66fd1b581","modified":1467297779752},{"_id":"public/archives/index.html","hash":"37a1462e82a19b6cabcfd4183a4e80d3645bdb43","modified":1467297779752},{"_id":"public/archives/page/2/index.html","hash":"f96eabb9bad46bbdcef168ac86d95aec4a4732e5","modified":1467297779752},{"_id":"public/archives/2016/index.html","hash":"894a1e7dc7f8d8604bb6d9f44b2709f4832eb2a3","modified":1467297779752},{"_id":"public/archives/2016/page/2/index.html","hash":"07cd71ec35c0a447d5ca561cb3aba5afa2a1a056","modified":1467297779752},{"_id":"public/archives/2016/06/index.html","hash":"83c3cc8045c3300c63b78bac2de3732a8443c596","modified":1467297779752},{"_id":"public/archives/2016/06/page/2/index.html","hash":"2c969ba6efad7931ea4d6ab5c4282f9597c9658e","modified":1467297779752},{"_id":"public/categories/swift/index.html","hash":"4b6c736f3e100be16d137ff24c70034d60a6e8bb","modified":1467297779752},{"_id":"public/index.html","hash":"eae3e52d23389a6599efde722c5d17a454784ed3","modified":1467297779753},{"_id":"public/page/2/index.html","hash":"a972a7e028dc55de03c6feac50801d4a6c2b88a9","modified":1467297779753},{"_id":"public/page/3/index.html","hash":"02f03a2c830bd07d8127143231f249948e482599","modified":1467297779753},{"_id":"public/tags/swift/index.html","hash":"5b7a92a733dbb947f072b87d0439dbb40c7f81e5","modified":1467297779753},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1467297779791},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1467297779792},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1467297779792},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1467297779792},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1467297779792},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1467297779792},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1467297779792},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1467297779792},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1467297779792},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1467297779792},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1467297779792},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1467297779809},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1467297779823},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1467297779832},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1467297779832},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1467297779833},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1467297779833},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1467297779833},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1467297779833},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1467297779833},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1467297779837},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1467297779837},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1467297779838},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1467297779866},{"_id":"public/image/imagegithub1.jpg","hash":"e73a6dc2e85315a809efb109d3ab9912fdc9ed0f","modified":1467297781653},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1467297781710},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1467297781710},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1467297781712},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1467297781712},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1467297781713},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1467297781713},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1467297781713},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1467297781713},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1467297781713},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1467297781713},{"_id":"public/css/main.css","hash":"035e40a76d6b1d68adc65749e658100c77273438","modified":1467297781713},{"_id":"public/image/imagegithub3.jpg","hash":"21dbb45cb9d134ac997bc3f093148e6db07f2704","modified":1467297781713},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1467297781713},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1467297781713},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1467297781713},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1467297781726},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1467297781726},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1467297781727},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1467297781727},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1467297781727},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1467297781727},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1467297781727},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1467297781727},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1467297781728},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1467297781728},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1467297781728},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1467297781728},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1467297781728},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1467297781728},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1467297781728},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1467297781728},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1467297781728},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1467297781728},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1467297781728},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1467297781728},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1467297781728},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1467297781729},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1467297781729},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1467297781729},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1467297781729},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1467297781732},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1467297781732},{"_id":"public/image/imagegithub2.gif","hash":"5cc5abf3964fb0170af3fb7c0b9ea08f79256129","modified":1467297781807},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1467297781820}],"Category":[{"name":"hexo","_id":"ciq2f7kh700048u4itedrgxcr"},{"name":"swift","_id":"ciq2f7ki7000l8u4i3t2l2b7e"},{"name":"github","_id":"ciq2f7kiy00128u4ituwvbz6k"},{"name":"ios","_id":"ciq2f7kjc001i8u4irkzslp87"},{"name":"mac","_id":"ciq2f7kjf001p8u4ij6vd9sb5"},{"name":"android","_id":"ciq2f7kjn001z8u4is3a41s04"},{"name":"git","_id":"ciq2f7kpq00328u4i9d7tc93a"}],"Data":[],"Page":[{"title":"categories","date":"2016-06-20T14:20:34.000Z","type":"categories","comments":1,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-06-20 22:20:34\ntype: \"categories\"\ncomments: true   #多说评论框\n---\n","updated":"2016-06-21T01:11:04.000Z","path":"categories/index.html","layout":"page","_id":"ciq2f7kgy00018u4iy3m2l0w7","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-06-20T14:17:17.000Z","type":"tags","comments":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-06-20 22:17:17\ntype: \"tags\"\ncomments: true   #多说评论框\n---\n","updated":"2016-06-21T01:11:04.000Z","path":"tags/index.html","layout":"page","_id":"ciq2f7kpi002z8u4ietgdfytv","content":"","excerpt":"","more":""}],"Post":[{"title":"Hexo Next 配置主观","_content":"\n### 语言设置\n\n在主目录下_config.yml 中配置\n\n```\nlanguage: zh-Hans\n```\n\n语言 | 代码 | 设定值\n---- | --- | ----\nEnglish | en   | language: en\n简体中文 |  zh-Hans   | language: zh-Hans\n\n### 菜单设置\n\n菜单配置在 主题配置文件的 menu\n\n菜单示例配置：\n\n```\nmenu:\n  home: /\n  archives: /archives\n  #about: /about\n  #categories: /categories\n  tags: /tags\n  #commonweal: /404.html\n```\n\n### 侧栏设置\n\n配置选项\n\n* post - 默认行为，在文章页面（拥有目录列表）时显示\n* always - 在所有页面中都显示\n* hide - 在所有页面中都隐藏（可以手动展开）\n\n侧栏示例配置：\n\n```\nsidebar: post\n```\n### 头像设置\n\n新增字段 avatar\n\n1 完整的互联网 URL\thttps://avatars1.githubusercontent.com/u/32269?v=3&s=460\n\n2 站点内的地址\t/uploads/avatar.jpg - 需要将你的头像图片放置在 站点的 source/uploads/ （可能需要新建uploads目录）\n\n3 /images/avatar.jpg - 需要将你的头像图片放置在 主题的 source/images/ 目录下\n\n### 作者名称\n\n设置 author 为你的昵称\n\n### 站点描述设置\n\n设置 description 字段为你的站点描述。\n\n### 添加「标签」页面\n1 定位到 Hexo 站点目录下\n\n```\nhexo new page tags\n```\n\n2编辑刚新建的页面，将页面的类型设置为 tags \n\n```\ntitle: 标签\ntype: \"tags\"\n```\n3  添加 tags 到 menu 中\n\n```\nmenu:\n  home: /\n  archives: /archives\n  tags: /tags\n```\n\n### 添加「分类」页面\n\n1 定位到 Hexo 站点目录下\n\n```\nhexo new page categories\n```\n\n2编辑刚新建的页面，将页面的类型设置为 categories \n\n```\ntitle: 标签\ntype: \"categories\"\n```\n3  添加 categories 到 menu 中\n\n```\nmenu:\n  home: /\n  archives: /archives\n  categories: /categories\n```\n\n\n### 设置代码高亮主题\n\nNexT 默认使用的是 白色的 normal 主题,可选的值有 normal，night， night blue， night bright， night eighties.\n \n更改 highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如：\n\n```\n# Code Highlight theme\n# Available value: normal | night | night eighties | night blue | night bright\n# https://github.com/chriskempson/tomorrow-theme\nhighlight_theme: normal\n```\n\n### 侧边栏社交链接\n1\n接放置在 social 字段下，一行一个链接。其键值格式是 显示文本: 链接地址。\n\n```\n# Social links\nsocial:\n  GitHub: https://github.com/your-user-name\n  Twitter: https://twitter.com/your-user-name\n  微博: http://weibo.com/your-user-name\n  豆瓣: http://douban.com/people/your-user-name\n  知乎: http://www.zhihu.com/people/your-user-name\n  # 等等\n```\n2 设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键: Font Awesome 图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。\n\n```\n# Social Icons\nsocial_icons:\n  enable: true\n  # Icon Mappings\n  GitHub: github\n  Twitter: twitter\n  微博: weibo\n```\n\n### 设置 RSS\n\nNexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 主题配置文件，设定 rss 字段的值：\n\n* false：禁用 RSS，不在页面上显示 RSS 连接。\n* 留空：使用 Hexo 生成的 Feed 链接。 你可以需要先安装 hexo-generator-feed 插件。\n* 具体的链接地址：适用于已经烧制过 Feed 的情形。\n\n","source":"_posts/HexoNext配置主题.md","raw":"---\ntitle: Hexo Next 配置主观\ntags: \n- hexo\n- next\ncategories: hexo\n---\n\n### 语言设置\n\n在主目录下_config.yml 中配置\n\n```\nlanguage: zh-Hans\n```\n\n语言 | 代码 | 设定值\n---- | --- | ----\nEnglish | en   | language: en\n简体中文 |  zh-Hans   | language: zh-Hans\n\n### 菜单设置\n\n菜单配置在 主题配置文件的 menu\n\n菜单示例配置：\n\n```\nmenu:\n  home: /\n  archives: /archives\n  #about: /about\n  #categories: /categories\n  tags: /tags\n  #commonweal: /404.html\n```\n\n### 侧栏设置\n\n配置选项\n\n* post - 默认行为，在文章页面（拥有目录列表）时显示\n* always - 在所有页面中都显示\n* hide - 在所有页面中都隐藏（可以手动展开）\n\n侧栏示例配置：\n\n```\nsidebar: post\n```\n### 头像设置\n\n新增字段 avatar\n\n1 完整的互联网 URL\thttps://avatars1.githubusercontent.com/u/32269?v=3&s=460\n\n2 站点内的地址\t/uploads/avatar.jpg - 需要将你的头像图片放置在 站点的 source/uploads/ （可能需要新建uploads目录）\n\n3 /images/avatar.jpg - 需要将你的头像图片放置在 主题的 source/images/ 目录下\n\n### 作者名称\n\n设置 author 为你的昵称\n\n### 站点描述设置\n\n设置 description 字段为你的站点描述。\n\n### 添加「标签」页面\n1 定位到 Hexo 站点目录下\n\n```\nhexo new page tags\n```\n\n2编辑刚新建的页面，将页面的类型设置为 tags \n\n```\ntitle: 标签\ntype: \"tags\"\n```\n3  添加 tags 到 menu 中\n\n```\nmenu:\n  home: /\n  archives: /archives\n  tags: /tags\n```\n\n### 添加「分类」页面\n\n1 定位到 Hexo 站点目录下\n\n```\nhexo new page categories\n```\n\n2编辑刚新建的页面，将页面的类型设置为 categories \n\n```\ntitle: 标签\ntype: \"categories\"\n```\n3  添加 categories 到 menu 中\n\n```\nmenu:\n  home: /\n  archives: /archives\n  categories: /categories\n```\n\n\n### 设置代码高亮主题\n\nNexT 默认使用的是 白色的 normal 主题,可选的值有 normal，night， night blue， night bright， night eighties.\n \n更改 highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如：\n\n```\n# Code Highlight theme\n# Available value: normal | night | night eighties | night blue | night bright\n# https://github.com/chriskempson/tomorrow-theme\nhighlight_theme: normal\n```\n\n### 侧边栏社交链接\n1\n接放置在 social 字段下，一行一个链接。其键值格式是 显示文本: 链接地址。\n\n```\n# Social links\nsocial:\n  GitHub: https://github.com/your-user-name\n  Twitter: https://twitter.com/your-user-name\n  微博: http://weibo.com/your-user-name\n  豆瓣: http://douban.com/people/your-user-name\n  知乎: http://www.zhihu.com/people/your-user-name\n  # 等等\n```\n2 设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键: Font Awesome 图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。\n\n```\n# Social Icons\nsocial_icons:\n  enable: true\n  # Icon Mappings\n  GitHub: github\n  Twitter: twitter\n  微博: weibo\n```\n\n### 设置 RSS\n\nNexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 主题配置文件，设定 rss 字段的值：\n\n* false：禁用 RSS，不在页面上显示 RSS 连接。\n* 留空：使用 Hexo 生成的 Feed 链接。 你可以需要先安装 hexo-generator-feed 插件。\n* 具体的链接地址：适用于已经烧制过 Feed 的情形。\n\n","slug":"HexoNext配置主题","published":1,"date":"2016-06-21T01:11:04.000Z","updated":"2016-06-21T01:11:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kgq00008u4ibzziri05","content":"<h3 id=\"语言设置\"><a href=\"#语言设置\" class=\"headerlink\" title=\"语言设置\"></a>语言设置</h3><p>在主目录下_config.yml 中配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: zh-Hans</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>语言</th>\n<th>代码</th>\n<th>设定值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>English</td>\n<td>en</td>\n<td>language: en</td>\n</tr>\n<tr>\n<td>简体中文</td>\n<td>zh-Hans</td>\n<td>language: zh-Hans</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"菜单设置\"><a href=\"#菜单设置\" class=\"headerlink\" title=\"菜单设置\"></a>菜单设置</h3><p>菜单配置在 主题配置文件的 menu</p>\n<p>菜单示例配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /</span><br><span class=\"line\">  archives: /archives</span><br><span class=\"line\">  #about: /about</span><br><span class=\"line\">  #categories: /categories</span><br><span class=\"line\">  tags: /tags</span><br><span class=\"line\">  #commonweal: /404.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"侧栏设置\"><a href=\"#侧栏设置\" class=\"headerlink\" title=\"侧栏设置\"></a>侧栏设置</h3><p>配置选项</p>\n<ul>\n<li>post - 默认行为，在文章页面（拥有目录列表）时显示</li>\n<li>always - 在所有页面中都显示</li>\n<li>hide - 在所有页面中都隐藏（可以手动展开）</li>\n</ul>\n<p>侧栏示例配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sidebar: post</span><br></pre></td></tr></table></figure>\n<h3 id=\"头像设置\"><a href=\"#头像设置\" class=\"headerlink\" title=\"头像设置\"></a>头像设置</h3><p>新增字段 avatar</p>\n<p>1 完整的互联网 URL    <a href=\"https://avatars1.githubusercontent.com/u/32269?v=3&amp;s=460\" target=\"_blank\" rel=\"external\">https://avatars1.githubusercontent.com/u/32269?v=3&amp;s=460</a></p>\n<p>2 站点内的地址    /uploads/avatar.jpg - 需要将你的头像图片放置在 站点的 source/uploads/ （可能需要新建uploads目录）</p>\n<p>3 /images/avatar.jpg - 需要将你的头像图片放置在 主题的 source/images/ 目录下</p>\n<h3 id=\"作者名称\"><a href=\"#作者名称\" class=\"headerlink\" title=\"作者名称\"></a>作者名称</h3><p>设置 author 为你的昵称</p>\n<h3 id=\"站点描述设置\"><a href=\"#站点描述设置\" class=\"headerlink\" title=\"站点描述设置\"></a>站点描述设置</h3><p>设置 description 字段为你的站点描述。</p>\n<h3 id=\"添加「标签」页面\"><a href=\"#添加「标签」页面\" class=\"headerlink\" title=\"添加「标签」页面\"></a>添加「标签」页面</h3><p>1 定位到 Hexo 站点目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n<p>2编辑刚新建的页面，将页面的类型设置为 tags </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 标签</span><br><span class=\"line\">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure>\n<p>3  添加 tags 到 menu 中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /</span><br><span class=\"line\">  archives: /archives</span><br><span class=\"line\">  tags: /tags</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加「分类」页面\"><a href=\"#添加「分类」页面\" class=\"headerlink\" title=\"添加「分类」页面\"></a>添加「分类」页面</h3><p>1 定位到 Hexo 站点目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n<p>2编辑刚新建的页面，将页面的类型设置为 categories </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 标签</span><br><span class=\"line\">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure>\n<p>3  添加 categories 到 menu 中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /</span><br><span class=\"line\">  archives: /archives</span><br><span class=\"line\">  categories: /categories</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置代码高亮主题\"><a href=\"#设置代码高亮主题\" class=\"headerlink\" title=\"设置代码高亮主题\"></a>设置代码高亮主题</h3><p>NexT 默认使用的是 白色的 normal 主题,可选的值有 normal，night， night blue， night bright， night eighties.</p>\n<p>更改 highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Code Highlight theme</span><br><span class=\"line\"># Available value: normal | night | night eighties | night blue | night bright</span><br><span class=\"line\"># https://github.com/chriskempson/tomorrow-theme</span><br><span class=\"line\">highlight_theme: normal</span><br></pre></td></tr></table></figure>\n<h3 id=\"侧边栏社交链接\"><a href=\"#侧边栏社交链接\" class=\"headerlink\" title=\"侧边栏社交链接\"></a>侧边栏社交链接</h3><p>1<br>接放置在 social 字段下，一行一个链接。其键值格式是 显示文本: 链接地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Social links</span><br><span class=\"line\">social:</span><br><span class=\"line\">  GitHub: https://github.com/your-user-name</span><br><span class=\"line\">  Twitter: https://twitter.com/your-user-name</span><br><span class=\"line\">  微博: http://weibo.com/your-user-name</span><br><span class=\"line\">  豆瓣: http://douban.com/people/your-user-name</span><br><span class=\"line\">  知乎: http://www.zhihu.com/people/your-user-name</span><br><span class=\"line\">  # 等等</span><br></pre></td></tr></table></figure>\n<p>2 设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键: Font Awesome 图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Social Icons</span><br><span class=\"line\">social_icons:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Icon Mappings</span><br><span class=\"line\">  GitHub: github</span><br><span class=\"line\">  Twitter: twitter</span><br><span class=\"line\">  微博: weibo</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置-RSS\"><a href=\"#设置-RSS\" class=\"headerlink\" title=\"设置 RSS\"></a>设置 RSS</h3><p>NexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 主题配置文件，设定 rss 字段的值：</p>\n<ul>\n<li>false：禁用 RSS，不在页面上显示 RSS 连接。</li>\n<li>留空：使用 Hexo 生成的 Feed 链接。 你可以需要先安装 hexo-generator-feed 插件。</li>\n<li>具体的链接地址：适用于已经烧制过 Feed 的情形。</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"语言设置\"><a href=\"#语言设置\" class=\"headerlink\" title=\"语言设置\"></a>语言设置</h3><p>在主目录下_config.yml 中配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: zh-Hans</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>语言</th>\n<th>代码</th>\n<th>设定值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>English</td>\n<td>en</td>\n<td>language: en</td>\n</tr>\n<tr>\n<td>简体中文</td>\n<td>zh-Hans</td>\n<td>language: zh-Hans</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"菜单设置\"><a href=\"#菜单设置\" class=\"headerlink\" title=\"菜单设置\"></a>菜单设置</h3><p>菜单配置在 主题配置文件的 menu</p>\n<p>菜单示例配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /</span><br><span class=\"line\">  archives: /archives</span><br><span class=\"line\">  #about: /about</span><br><span class=\"line\">  #categories: /categories</span><br><span class=\"line\">  tags: /tags</span><br><span class=\"line\">  #commonweal: /404.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"侧栏设置\"><a href=\"#侧栏设置\" class=\"headerlink\" title=\"侧栏设置\"></a>侧栏设置</h3><p>配置选项</p>\n<ul>\n<li>post - 默认行为，在文章页面（拥有目录列表）时显示</li>\n<li>always - 在所有页面中都显示</li>\n<li>hide - 在所有页面中都隐藏（可以手动展开）</li>\n</ul>\n<p>侧栏示例配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sidebar: post</span><br></pre></td></tr></table></figure>\n<h3 id=\"头像设置\"><a href=\"#头像设置\" class=\"headerlink\" title=\"头像设置\"></a>头像设置</h3><p>新增字段 avatar</p>\n<p>1 完整的互联网 URL    <a href=\"https://avatars1.githubusercontent.com/u/32269?v=3&amp;s=460\">https://avatars1.githubusercontent.com/u/32269?v=3&amp;s=460</a></p>\n<p>2 站点内的地址    /uploads/avatar.jpg - 需要将你的头像图片放置在 站点的 source/uploads/ （可能需要新建uploads目录）</p>\n<p>3 /images/avatar.jpg - 需要将你的头像图片放置在 主题的 source/images/ 目录下</p>\n<h3 id=\"作者名称\"><a href=\"#作者名称\" class=\"headerlink\" title=\"作者名称\"></a>作者名称</h3><p>设置 author 为你的昵称</p>\n<h3 id=\"站点描述设置\"><a href=\"#站点描述设置\" class=\"headerlink\" title=\"站点描述设置\"></a>站点描述设置</h3><p>设置 description 字段为你的站点描述。</p>\n<h3 id=\"添加「标签」页面\"><a href=\"#添加「标签」页面\" class=\"headerlink\" title=\"添加「标签」页面\"></a>添加「标签」页面</h3><p>1 定位到 Hexo 站点目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n<p>2编辑刚新建的页面，将页面的类型设置为 tags </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 标签</span><br><span class=\"line\">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure>\n<p>3  添加 tags 到 menu 中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /</span><br><span class=\"line\">  archives: /archives</span><br><span class=\"line\">  tags: /tags</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加「分类」页面\"><a href=\"#添加「分类」页面\" class=\"headerlink\" title=\"添加「分类」页面\"></a>添加「分类」页面</h3><p>1 定位到 Hexo 站点目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n<p>2编辑刚新建的页面，将页面的类型设置为 categories </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 标签</span><br><span class=\"line\">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure>\n<p>3  添加 categories 到 menu 中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /</span><br><span class=\"line\">  archives: /archives</span><br><span class=\"line\">  categories: /categories</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置代码高亮主题\"><a href=\"#设置代码高亮主题\" class=\"headerlink\" title=\"设置代码高亮主题\"></a>设置代码高亮主题</h3><p>NexT 默认使用的是 白色的 normal 主题,可选的值有 normal，night， night blue， night bright， night eighties.</p>\n<p>更改 highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Code Highlight theme</span><br><span class=\"line\"># Available value: normal | night | night eighties | night blue | night bright</span><br><span class=\"line\"># https://github.com/chriskempson/tomorrow-theme</span><br><span class=\"line\">highlight_theme: normal</span><br></pre></td></tr></table></figure>\n<h3 id=\"侧边栏社交链接\"><a href=\"#侧边栏社交链接\" class=\"headerlink\" title=\"侧边栏社交链接\"></a>侧边栏社交链接</h3><p>1<br>接放置在 social 字段下，一行一个链接。其键值格式是 显示文本: 链接地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Social links</span><br><span class=\"line\">social:</span><br><span class=\"line\">  GitHub: https://github.com/your-user-name</span><br><span class=\"line\">  Twitter: https://twitter.com/your-user-name</span><br><span class=\"line\">  微博: http://weibo.com/your-user-name</span><br><span class=\"line\">  豆瓣: http://douban.com/people/your-user-name</span><br><span class=\"line\">  知乎: http://www.zhihu.com/people/your-user-name</span><br><span class=\"line\">  # 等等</span><br></pre></td></tr></table></figure>\n<p>2 设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键: Font Awesome 图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Social Icons</span><br><span class=\"line\">social_icons:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Icon Mappings</span><br><span class=\"line\">  GitHub: github</span><br><span class=\"line\">  Twitter: twitter</span><br><span class=\"line\">  微博: weibo</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置-RSS\"><a href=\"#设置-RSS\" class=\"headerlink\" title=\"设置 RSS\"></a>设置 RSS</h3><p>NexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 主题配置文件，设定 rss 字段的值：</p>\n<ul>\n<li>false：禁用 RSS，不在页面上显示 RSS 连接。</li>\n<li>留空：使用 Hexo 生成的 Feed 链接。 你可以需要先安装 hexo-generator-feed 插件。</li>\n<li>具体的链接地址：适用于已经烧制过 Feed 的情形。</li>\n</ul>\n"},{"title":"hexo 初步教程","_content":"### 安装git\n我选用了Homebrew来安装mac下的软件，你可以先安装\nHomebrew\n### 安装Homebrew\n\n```\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### 成功之后安装git\n\n```\nbrew install git\n```\n\n### 安装node.js\n\n去[nodes.js](https://nodejs.org/en/) 官网下载，安装即可。\n\n### 配置SSH keys\n打开GitHub，进入设置界面，点击左边的SSH keys，添加一个SSH keys。\n\n1.输入以下代码生成新的key文件\n\n```\nssh-keygen -t rsa -C \"邮件地址@youremail.com\"\n```\n\n这里的邮件地址填自己注册时的邮件地址，注意大小写，双引号不能省略，终端会返回代码让你确定文件名，回车就好。\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/DoubleD/.ssh/id\\_rsa): //回车就行\n```\n接着会让你输入加密串，可以空着：\n\n```\nEnter passphrase (empty for no passphrase):\\<输入加密串\\>\nEnter same passphrase again:\\<再次输入加密串\\>\n```\n\n成功的创建了一个SSH key。\n\n找到本机上的id_rsa.pub文件,打开它（建议使用Sublime Text）复制里面的代码.添加到SSH key 中\n\n然后点击Add key就配置好了SSH key\n\n测试是否配置成功\n\n```\nssh -T git@github.com\n```\n看到\n\n```\n You've successfully authenticated, but GitHub does not provide shell access.\n```\n表示配置成功了。\n\n完成之后，我们设置好个人信息，用于提交代码说明是谁提交的，怎么联系。可以用以下指令完成：\n\n```\ngit config --global user.name \"你的名字\"\ngit config --global user.email  \"你的邮箱\"\n```\n\n### 安装Hexo\n\n打开终端，输入以下指令：\n\n```\nnpm install -g hexo\n\n```\n\n注意如果不能安装可能被墙了，换源在终端输入\n\n```\nnpm config set registry=\"http://registry.cnpmjs.org\"\n```\n\n如果还出问题  在前面加入sudo 在管理员权限下上面的命令\n\n```\nsudo npm config set registry=\"http://registry.cnpmjs.org\"\n```\n\n提示输入密码，输入管理员密码就可了。\n\n然后在终端输入\n\n```\nnpm install -g hexo\n\n```\n重新安装一下。\n\n安装后，进入你要存博客的目录，在该目录下执行如下命令\n\n```\nhexo init\nnpm install\n```\nHexo就会在该文件夹建立博客所需要的所有文件。本地的Hexo博客已经初步搭建起来，输入以下指令：\n\n```\nhexo generate//可以简写为 hexo g\nhexo server//可以简写为 hexo s\n```\n\n就可以在浏览器中输入localhost:4000查看本地博客了。如果不能查看请输入\n127.0.0.1:4000查看。在不行了。就是没有成功从hexo init重新来一次就可以了。要注意的是，所有的hexo指令都必须在你所建立的目录下执行。\n\n### 部署Hexo到GitHub上\n\n安装一个插件\n\n```\nnpm install hexo-deployer-git --save\n\n```\n\n然后打开博客目录的_config.yml文件\n\n```\ndeploy:\n  type: git\n  repository: https://github.com/joway/hexo-blog.git\n  branch: master\n```\n注意\":\"号后面有空格。必须空一格。\n然后输入\n\n```\nhexo g\nhexo deploy//可简写为 hexo d\n\n```\n\n在浏览器中输入\n\n```\nhttp://你的id.github.io/\n```\n就可以访问自己的博客了。","source":"_posts/Hexo初步教程.md","raw":"---\ntitle: hexo 初步教程\ntags: \n- hexo\ncategories: hexo\n---\n### 安装git\n我选用了Homebrew来安装mac下的软件，你可以先安装\nHomebrew\n### 安装Homebrew\n\n```\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### 成功之后安装git\n\n```\nbrew install git\n```\n\n### 安装node.js\n\n去[nodes.js](https://nodejs.org/en/) 官网下载，安装即可。\n\n### 配置SSH keys\n打开GitHub，进入设置界面，点击左边的SSH keys，添加一个SSH keys。\n\n1.输入以下代码生成新的key文件\n\n```\nssh-keygen -t rsa -C \"邮件地址@youremail.com\"\n```\n\n这里的邮件地址填自己注册时的邮件地址，注意大小写，双引号不能省略，终端会返回代码让你确定文件名，回车就好。\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/DoubleD/.ssh/id\\_rsa): //回车就行\n```\n接着会让你输入加密串，可以空着：\n\n```\nEnter passphrase (empty for no passphrase):\\<输入加密串\\>\nEnter same passphrase again:\\<再次输入加密串\\>\n```\n\n成功的创建了一个SSH key。\n\n找到本机上的id_rsa.pub文件,打开它（建议使用Sublime Text）复制里面的代码.添加到SSH key 中\n\n然后点击Add key就配置好了SSH key\n\n测试是否配置成功\n\n```\nssh -T git@github.com\n```\n看到\n\n```\n You've successfully authenticated, but GitHub does not provide shell access.\n```\n表示配置成功了。\n\n完成之后，我们设置好个人信息，用于提交代码说明是谁提交的，怎么联系。可以用以下指令完成：\n\n```\ngit config --global user.name \"你的名字\"\ngit config --global user.email  \"你的邮箱\"\n```\n\n### 安装Hexo\n\n打开终端，输入以下指令：\n\n```\nnpm install -g hexo\n\n```\n\n注意如果不能安装可能被墙了，换源在终端输入\n\n```\nnpm config set registry=\"http://registry.cnpmjs.org\"\n```\n\n如果还出问题  在前面加入sudo 在管理员权限下上面的命令\n\n```\nsudo npm config set registry=\"http://registry.cnpmjs.org\"\n```\n\n提示输入密码，输入管理员密码就可了。\n\n然后在终端输入\n\n```\nnpm install -g hexo\n\n```\n重新安装一下。\n\n安装后，进入你要存博客的目录，在该目录下执行如下命令\n\n```\nhexo init\nnpm install\n```\nHexo就会在该文件夹建立博客所需要的所有文件。本地的Hexo博客已经初步搭建起来，输入以下指令：\n\n```\nhexo generate//可以简写为 hexo g\nhexo server//可以简写为 hexo s\n```\n\n就可以在浏览器中输入localhost:4000查看本地博客了。如果不能查看请输入\n127.0.0.1:4000查看。在不行了。就是没有成功从hexo init重新来一次就可以了。要注意的是，所有的hexo指令都必须在你所建立的目录下执行。\n\n### 部署Hexo到GitHub上\n\n安装一个插件\n\n```\nnpm install hexo-deployer-git --save\n\n```\n\n然后打开博客目录的_config.yml文件\n\n```\ndeploy:\n  type: git\n  repository: https://github.com/joway/hexo-blog.git\n  branch: master\n```\n注意\":\"号后面有空格。必须空一格。\n然后输入\n\n```\nhexo g\nhexo deploy//可简写为 hexo d\n\n```\n\n在浏览器中输入\n\n```\nhttp://你的id.github.io/\n```\n就可以访问自己的博客了。","slug":"Hexo初步教程","published":1,"date":"2016-06-21T01:11:04.000Z","updated":"2016-06-21T01:11:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kh000028u4i1rn9hf2x","content":"<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>我选用了Homebrew来安装mac下的软件，你可以先安装<br>Homebrew</p>\n<h3 id=\"安装Homebrew\"><a href=\"#安装Homebrew\" class=\"headerlink\" title=\"安装Homebrew\"></a>安装Homebrew</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"成功之后安装git\"><a href=\"#成功之后安装git\" class=\"headerlink\" title=\"成功之后安装git\"></a>成功之后安装git</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>去<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">nodes.js</a> 官网下载，安装即可。</p>\n<h3 id=\"配置SSH-keys\"><a href=\"#配置SSH-keys\" class=\"headerlink\" title=\"配置SSH keys\"></a>配置SSH keys</h3><p>打开GitHub，进入设置界面，点击左边的SSH keys，添加一个SSH keys。</p>\n<p>1.输入以下代码生成新的key文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</span><br></pre></td></tr></table></figure>\n<p>这里的邮件地址填自己注册时的邮件地址，注意大小写，双引号不能省略，终端会返回代码让你确定文件名，回车就好。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/Users/DoubleD/.ssh/id\\_rsa): //回车就行</span><br></pre></td></tr></table></figure>\n<p>接着会让你输入加密串，可以空着：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter passphrase (empty for no passphrase):\\&lt;输入加密串\\&gt;</span><br><span class=\"line\">Enter same passphrase again:\\&lt;再次输入加密串\\&gt;</span><br></pre></td></tr></table></figure>\n<p>成功的创建了一个SSH key。</p>\n<p>找到本机上的id_rsa.pub文件,打开它（建议使用Sublime Text）复制里面的代码.添加到SSH key 中</p>\n<p>然后点击Add key就配置好了SSH key</p>\n<p>测试是否配置成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>看到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n<p>表示配置成功了。</p>\n<p>完成之后，我们设置好个人信息，用于提交代码说明是谁提交的，怎么联系。可以用以下指令完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;你的名字&quot;</span><br><span class=\"line\">git config --global user.email  &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>打开终端，输入以下指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n<p>注意如果不能安装可能被墙了，换源在终端输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry=&quot;http://registry.cnpmjs.org&quot;</span><br></pre></td></tr></table></figure>\n<p>如果还出问题  在前面加入sudo 在管理员权限下上面的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm config set registry=&quot;http://registry.cnpmjs.org&quot;</span><br></pre></td></tr></table></figure>\n<p>提示输入密码，输入管理员密码就可了。</p>\n<p>然后在终端输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n<p>重新安装一下。</p>\n<p>安装后，进入你要存博客的目录，在该目录下执行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>Hexo就会在该文件夹建立博客所需要的所有文件。本地的Hexo博客已经初步搭建起来，输入以下指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate//可以简写为 hexo g</span><br><span class=\"line\">hexo server//可以简写为 hexo s</span><br></pre></td></tr></table></figure>\n<p>就可以在浏览器中输入localhost:4000查看本地博客了。如果不能查看请输入<br>127.0.0.1:4000查看。在不行了。就是没有成功从hexo init重新来一次就可以了。要注意的是，所有的hexo指令都必须在你所建立的目录下执行。</p>\n<h3 id=\"部署Hexo到GitHub上\"><a href=\"#部署Hexo到GitHub上\" class=\"headerlink\" title=\"部署Hexo到GitHub上\"></a>部署Hexo到GitHub上</h3><p>安装一个插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>然后打开博客目录的_config.yml文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/joway/hexo-blog.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>注意”:”号后面有空格。必须空一格。<br>然后输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo deploy//可简写为 hexo d</span><br></pre></td></tr></table></figure>\n<p>在浏览器中输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://你的id.github.io/</span><br></pre></td></tr></table></figure>\n<p>就可以访问自己的博客了。</p>\n","excerpt":"","more":"<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>我选用了Homebrew来安装mac下的软件，你可以先安装<br>Homebrew</p>\n<h3 id=\"安装Homebrew\"><a href=\"#安装Homebrew\" class=\"headerlink\" title=\"安装Homebrew\"></a>安装Homebrew</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"成功之后安装git\"><a href=\"#成功之后安装git\" class=\"headerlink\" title=\"成功之后安装git\"></a>成功之后安装git</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>去<a href=\"https://nodejs.org/en/\">nodes.js</a> 官网下载，安装即可。</p>\n<h3 id=\"配置SSH-keys\"><a href=\"#配置SSH-keys\" class=\"headerlink\" title=\"配置SSH keys\"></a>配置SSH keys</h3><p>打开GitHub，进入设置界面，点击左边的SSH keys，添加一个SSH keys。</p>\n<p>1.输入以下代码生成新的key文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</span><br></pre></td></tr></table></figure>\n<p>这里的邮件地址填自己注册时的邮件地址，注意大小写，双引号不能省略，终端会返回代码让你确定文件名，回车就好。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/Users/DoubleD/.ssh/id\\_rsa): //回车就行</span><br></pre></td></tr></table></figure>\n<p>接着会让你输入加密串，可以空着：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter passphrase (empty for no passphrase):\\&lt;输入加密串\\&gt;</span><br><span class=\"line\">Enter same passphrase again:\\&lt;再次输入加密串\\&gt;</span><br></pre></td></tr></table></figure>\n<p>成功的创建了一个SSH key。</p>\n<p>找到本机上的id_rsa.pub文件,打开它（建议使用Sublime Text）复制里面的代码.添加到SSH key 中</p>\n<p>然后点击Add key就配置好了SSH key</p>\n<p>测试是否配置成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>看到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n<p>表示配置成功了。</p>\n<p>完成之后，我们设置好个人信息，用于提交代码说明是谁提交的，怎么联系。可以用以下指令完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;你的名字&quot;</span><br><span class=\"line\">git config --global user.email  &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>打开终端，输入以下指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n<p>注意如果不能安装可能被墙了，换源在终端输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry=&quot;http://registry.cnpmjs.org&quot;</span><br></pre></td></tr></table></figure>\n<p>如果还出问题  在前面加入sudo 在管理员权限下上面的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm config set registry=&quot;http://registry.cnpmjs.org&quot;</span><br></pre></td></tr></table></figure>\n<p>提示输入密码，输入管理员密码就可了。</p>\n<p>然后在终端输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n<p>重新安装一下。</p>\n<p>安装后，进入你要存博客的目录，在该目录下执行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>Hexo就会在该文件夹建立博客所需要的所有文件。本地的Hexo博客已经初步搭建起来，输入以下指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate//可以简写为 hexo g</span><br><span class=\"line\">hexo server//可以简写为 hexo s</span><br></pre></td></tr></table></figure>\n<p>就可以在浏览器中输入localhost:4000查看本地博客了。如果不能查看请输入<br>127.0.0.1:4000查看。在不行了。就是没有成功从hexo init重新来一次就可以了。要注意的是，所有的hexo指令都必须在你所建立的目录下执行。</p>\n<h3 id=\"部署Hexo到GitHub上\"><a href=\"#部署Hexo到GitHub上\" class=\"headerlink\" title=\"部署Hexo到GitHub上\"></a>部署Hexo到GitHub上</h3><p>安装一个插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>然后打开博客目录的_config.yml文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/joway/hexo-blog.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>注意”:”号后面有空格。必须空一格。<br>然后输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo deploy//可简写为 hexo d</span><br></pre></td></tr></table></figure>\n<p>在浏览器中输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://你的id.github.io/</span><br></pre></td></tr></table></figure>\n<p>就可以访问自己的博客了。</p>\n"},{"title":"hexo更换主题Next","_content":"\n 1 下载主题\n \n  从终端进入你的hexo目录然后在终端输入如下命令下载主题\n \n ```\n git clone https://github.com/iissnan/hexo-theme-next themes/next\n ```\n 2 启用主题\n \n 修改当hexo目录下的_config.yml 的theme 选项\n \n ```\n # Extensions\n ## Plugins: https://hexo.io/plugins/\n ## Themes: https://hexo.io/themes/\n theme: next\n ```\n \n 3 验证是否启用\n \n ```\n hexo s --debug\n ```\n \n访问\n\n```\nhttp://localhost:4000\n```\n确保站点正确运行。\n\n4 其他配置。\n\n   主题设定\n   [next|主题设定](http://theme-next.iissnan.com/theme-settings.html)\n   \n   第三方服务\n   [next|第三方服务](http://theme-next.iissnan.com/third-party-services.html)\n","source":"_posts/Hexo更换主题Next.md","raw":"---\ntitle: hexo更换主题Next\ntags: \n- hexo\ncategories: hexo\n---\n\n 1 下载主题\n \n  从终端进入你的hexo目录然后在终端输入如下命令下载主题\n \n ```\n git clone https://github.com/iissnan/hexo-theme-next themes/next\n ```\n 2 启用主题\n \n 修改当hexo目录下的_config.yml 的theme 选项\n \n ```\n # Extensions\n ## Plugins: https://hexo.io/plugins/\n ## Themes: https://hexo.io/themes/\n theme: next\n ```\n \n 3 验证是否启用\n \n ```\n hexo s --debug\n ```\n \n访问\n\n```\nhttp://localhost:4000\n```\n确保站点正确运行。\n\n4 其他配置。\n\n   主题设定\n   [next|主题设定](http://theme-next.iissnan.com/theme-settings.html)\n   \n   第三方服务\n   [next|第三方服务](http://theme-next.iissnan.com/third-party-services.html)\n","slug":"Hexo更换主题Next","published":1,"date":"2016-06-21T01:11:04.000Z","updated":"2016-06-21T01:11:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kh800058u4idfctihwj","content":"<p> 1 下载主题</p>\n<p>  从终端进入你的hexo目录然后在终端输入如下命令下载主题</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p> 2 启用主题</p>\n<p> 修改当hexo目录下的_config.yml 的theme 选项</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n<p> 3 验证是否启用</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s --debug</span><br></pre></td></tr></table></figure>\n<p>访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:4000</span><br></pre></td></tr></table></figure>\n<p>确保站点正确运行。</p>\n<p>4 其他配置。</p>\n<p>   主题设定<br>   <a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"external\">next|主题设定</a></p>\n<p>   第三方服务<br>   <a href=\"http://theme-next.iissnan.com/third-party-services.html\" target=\"_blank\" rel=\"external\">next|第三方服务</a></p>\n","excerpt":"","more":"<p> 1 下载主题</p>\n<p>  从终端进入你的hexo目录然后在终端输入如下命令下载主题</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p> 2 启用主题</p>\n<p> 修改当hexo目录下的_config.yml 的theme 选项</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n<p> 3 验证是否启用</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s --debug</span><br></pre></td></tr></table></figure>\n<p>访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:4000</span><br></pre></td></tr></table></figure>\n<p>确保站点正确运行。</p>\n<p>4 其他配置。</p>\n<p>   主题设定<br>   <a href=\"http://theme-next.iissnan.com/theme-settings.html\">next|主题设定</a></p>\n<p>   第三方服务<br>   <a href=\"http://theme-next.iissnan.com/third-party-services.html\">next|第三方服务</a></p>\n"},{"title":"Swift代理delegate","_content":"\n实现代理传值\n```\nimport UIKit\n\nclass ViewController: UIViewController,ChangeValueDelegate{\n    \n    var btn = UIButton()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        self.view.backgroundColor = UIColor.whiteColor()\n        \n        btn.setTitle(\"Change\", forState:.Normal)\n        btn.backgroundColor = UIColor.blueColor()\n        btn.frame = CGRect(x: 100, y: 100, width: 100, height: 50)\n        btn.addTarget(self, action: #selector(change), forControlEvents: .TouchUpInside)\n        self.view.addSubview(btn)\n        \n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n    \n    //    delegate 代理方法\n    func changeValue(value: String) {\n        \n        btn.setTitle(value, forState: .Normal)\n        print(\"value:\\(value)\")\n        \n    }\n    //  传值\n    func change(){\n        \n        let vc = ChangeValueViewController()\n        vc.delegate = self\n        self.navigationController?.pushViewController(vc, animated: true)\n        \n    }\n    \n}\n```\n\n协议\n\n```\nprotocol ChangeValueDelegate {\n    \n    func changeValue(value:String)\n    \n}\n```\n\n使用代理传值\n\n```\nclass ChangeValueViewController: UIViewController {\n    \n    var delegate:ChangeValueDelegate?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // Do any additional setup after loading the view.\n        self.view.backgroundColor = UIColor.whiteColor()\n        \n        self.delegate?.changeValue(\"ok\")\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n}\n```","source":"_posts/Swift代理.md","raw":"---\ntitle: Swift代理delegate\ntags: \n- swift\n- delegate\ncategories: swift\n---\n\n实现代理传值\n```\nimport UIKit\n\nclass ViewController: UIViewController,ChangeValueDelegate{\n    \n    var btn = UIButton()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        self.view.backgroundColor = UIColor.whiteColor()\n        \n        btn.setTitle(\"Change\", forState:.Normal)\n        btn.backgroundColor = UIColor.blueColor()\n        btn.frame = CGRect(x: 100, y: 100, width: 100, height: 50)\n        btn.addTarget(self, action: #selector(change), forControlEvents: .TouchUpInside)\n        self.view.addSubview(btn)\n        \n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n    \n    //    delegate 代理方法\n    func changeValue(value: String) {\n        \n        btn.setTitle(value, forState: .Normal)\n        print(\"value:\\(value)\")\n        \n    }\n    //  传值\n    func change(){\n        \n        let vc = ChangeValueViewController()\n        vc.delegate = self\n        self.navigationController?.pushViewController(vc, animated: true)\n        \n    }\n    \n}\n```\n\n协议\n\n```\nprotocol ChangeValueDelegate {\n    \n    func changeValue(value:String)\n    \n}\n```\n\n使用代理传值\n\n```\nclass ChangeValueViewController: UIViewController {\n    \n    var delegate:ChangeValueDelegate?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // Do any additional setup after loading the view.\n        self.view.backgroundColor = UIColor.whiteColor()\n        \n        self.delegate?.changeValue(\"ok\")\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n}\n```","slug":"Swift代理","published":1,"date":"2016-06-30T04:42:35.000Z","updated":"2016-06-30T04:42:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kha00068u4i2yzxioar","content":"<p>实现代理传值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import UIKit</span><br><span class=\"line\"></span><br><span class=\"line\">class ViewController: UIViewController,ChangeValueDelegate&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var btn = UIButton()</span><br><span class=\"line\"></span><br><span class=\"line\">    override func viewDidLoad() &#123;</span><br><span class=\"line\">        super.viewDidLoad()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.view.backgroundColor = UIColor.whiteColor()</span><br><span class=\"line\">        </span><br><span class=\"line\">        btn.setTitle(&quot;Change&quot;, forState:.Normal)</span><br><span class=\"line\">        btn.backgroundColor = UIColor.blueColor()</span><br><span class=\"line\">        btn.frame = CGRect(x: 100, y: 100, width: 100, height: 50)</span><br><span class=\"line\">        btn.addTarget(self, action: #selector(change), forControlEvents: .TouchUpInside)</span><br><span class=\"line\">        self.view.addSubview(btn)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override func didReceiveMemoryWarning() &#123;</span><br><span class=\"line\">        super.didReceiveMemoryWarning()</span><br><span class=\"line\">        // Dispose of any resources that can be recreated.</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //    delegate 代理方法</span><br><span class=\"line\">    func changeValue(value: String) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        btn.setTitle(value, forState: .Normal)</span><br><span class=\"line\">        print(&quot;value:\\(value)&quot;)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //  传值</span><br><span class=\"line\">    func change()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let vc = ChangeValueViewController()</span><br><span class=\"line\">        vc.delegate = self</span><br><span class=\"line\">        self.navigationController?.pushViewController(vc, animated: true)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>协议</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protocol ChangeValueDelegate &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func changeValue(value:String)</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用代理传值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ChangeValueViewController: UIViewController &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var delegate:ChangeValueDelegate?</span><br><span class=\"line\">    </span><br><span class=\"line\">    override func viewDidLoad() &#123;</span><br><span class=\"line\">        super.viewDidLoad()</span><br><span class=\"line\"></span><br><span class=\"line\">        // Do any additional setup after loading the view.</span><br><span class=\"line\">        self.view.backgroundColor = UIColor.whiteColor()</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.delegate?.changeValue(&quot;ok&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override func didReceiveMemoryWarning() &#123;</span><br><span class=\"line\">        super.didReceiveMemoryWarning()</span><br><span class=\"line\">        // Dispose of any resources that can be recreated.</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>实现代理传值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import UIKit</span><br><span class=\"line\"></span><br><span class=\"line\">class ViewController: UIViewController,ChangeValueDelegate&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var btn = UIButton()</span><br><span class=\"line\"></span><br><span class=\"line\">    override func viewDidLoad() &#123;</span><br><span class=\"line\">        super.viewDidLoad()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.view.backgroundColor = UIColor.whiteColor()</span><br><span class=\"line\">        </span><br><span class=\"line\">        btn.setTitle(&quot;Change&quot;, forState:.Normal)</span><br><span class=\"line\">        btn.backgroundColor = UIColor.blueColor()</span><br><span class=\"line\">        btn.frame = CGRect(x: 100, y: 100, width: 100, height: 50)</span><br><span class=\"line\">        btn.addTarget(self, action: #selector(change), forControlEvents: .TouchUpInside)</span><br><span class=\"line\">        self.view.addSubview(btn)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override func didReceiveMemoryWarning() &#123;</span><br><span class=\"line\">        super.didReceiveMemoryWarning()</span><br><span class=\"line\">        // Dispose of any resources that can be recreated.</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //    delegate 代理方法</span><br><span class=\"line\">    func changeValue(value: String) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        btn.setTitle(value, forState: .Normal)</span><br><span class=\"line\">        print(&quot;value:\\(value)&quot;)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //  传值</span><br><span class=\"line\">    func change()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let vc = ChangeValueViewController()</span><br><span class=\"line\">        vc.delegate = self</span><br><span class=\"line\">        self.navigationController?.pushViewController(vc, animated: true)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>协议</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protocol ChangeValueDelegate &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func changeValue(value:String)</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用代理传值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ChangeValueViewController: UIViewController &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var delegate:ChangeValueDelegate?</span><br><span class=\"line\">    </span><br><span class=\"line\">    override func viewDidLoad() &#123;</span><br><span class=\"line\">        super.viewDidLoad()</span><br><span class=\"line\"></span><br><span class=\"line\">        // Do any additional setup after loading the view.</span><br><span class=\"line\">        self.view.backgroundColor = UIColor.whiteColor()</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.delegate?.changeValue(&quot;ok&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override func didReceiveMemoryWarning() &#123;</span><br><span class=\"line\">        super.didReceiveMemoryWarning()</span><br><span class=\"line\">        // Dispose of any resources that can be recreated.</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"hexo评论系统与站点计数","_content":"\n评论系统与站点计数\n\n添加 多说 或者 Disqus 第三方评论系统。当同时设置了 多说 和 Disqus 时，优先选择多说。\n\n### 使用多说\n\n1. 注册多说\n\n\t1. 登录后在首页选择 “我要安装”。\n\n\t2. 创建站点，填写站点相关信息。注意，多说域名 这一栏填写的即是你的 duoshuo_shortname。\n\n2. 编辑站点的 _config.yml 注意，不是主题的_config.yml文件 ，添加 duoshuo_shortname 字段，设置如下\n\n```\nduoshuo_shortname: your-duoshuo-shortname\n```\n（注）duoshuo short name: 你的多说二级域名去掉 .duoshuo.com 部分\n\n### 使用 Disqus\n编辑站点的 _config.yml ，添加 disqus_shortname 字段，设置如下\n\n```\ndisqus_shortname: your-disqus-shortname\n```\n\n### 多说评论显示 UA\n需要配置 duoshuo_info 这个字段\n\n```\nduoshuo_info:\n  ua_enable: true\n  admin_enable: true\n  user_id: 1234567\n  admin_nickname: 主编大人\n```\n配置 user_id 和 admin_nickname 字段。 请访问 多说，登录并访问「我的主页」获取 user_id ， 此 ID 是 网址最后那串数字。\n\n### 显示站点总访问量\n找到站点的themes/next/layout/_partials目录下的footer.swig文件\n将以下脚本和标签插入到文件中\n\n```\n\t<script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\t本站总访问量 <span id=\"busuanzi_value_site_pv\"></span> &nbsp&nbsp&nbsp\n\t您是第<span id=\"busuanzi_value_site_uv\"></span>个来到的小伙伴\n```\n插入到这里\n\n```\n\t<div class=\"powered-by\">\n  \t{{ __('footer.powered', '<a class=\"theme-link\" href=\"http://hexo.io\">Hexo</a>') }}\n\t</div>\n\t<div class=\"theme-info\">\n  \t{{ __('footer.theme') }} -\n \t <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n    NexT{% if theme.scheme %}.{{ theme.scheme }}{% endif %}\n  \t</a>\n\t</div>\n\t# 插入到这里\n\t{% block footer %}{% endblock %}\n```\n### 显示单页面访问量\n修改themes/next/layout/_macro目录下的post.swig文件\n\n位于文件开头,在第三个参数的位置，增加is_pv字段\n\n```\n{% macro render(post, is_index, is_pv, post_extra_class) %}\n```\n插入以下代码，用于区分文章页面跟首页\n\n这里不用像”显示站点总访问量”中那样安装脚本，否则会出现重复计数的问题。\n\n```\n{% if is_pv %}\n<span>&nbsp; | &nbsp;\n<span id=\"busuanzi_value_page_pv\" ></span>次阅读\n</span>    \n{% endif %}\n```\n\n插入这个位置\n\n```\n{% if post.comments %}\n          {% if (theme.duoshuo and theme.duoshuo.shortname) or theme.duoshuo_shortname %}\n            <span class=\"post-comments-count\">\n              &nbsp; | &nbsp;\n              <a href=\"{{ url_for(post.path) }}#comments\" itemprop=\"discussionUrl\">\n                <span class=\"post-comments-count ds-thread-count\" data-thread-key=\"{{ post.path }}\" itemprop=\"commentsCount\"></span>\n              </a>\n            </span>\n          {% elseif theme.disqus_shortname %}\n            <span class=\"post-comments-count\">\n            &nbsp; | &nbsp;\n            <a href=\"{{ url_for(post.path) }}#comments\" itemprop=\"discussionUrl\">\n              <span class=\"post-comments-count disqus-comment-count\" data-disqus-identifier=\"{{ post.path }}\" itemprop=\"commentsCount\"></span>\n            </a>\n          </span>\n          {% endif %}      \n        {% endif %} \n\t#插入到这里\n      </div>\n    </header>\n ```\n修改themes/next/layout目录下的post.swig文件\n \n这个文件是文章的模板\n \n找到以下代码，给render方法传入刚才第一步中设置的参数。\n\n```\n{% block content %}\n  <div id=\"posts\" class=\"posts-expand\">\n  \t#render方法第二个参数is_index为是否为首页\n  \t#第三个参数is_pv为我们刚才设置的是否显示计数\n    {{ post_template.render(page, false, true) }} \n    <div class=\"post-spread\">\n      {% if theme.jiathis %}\n        {% include '_partials/share/jiathis.swig' %}\n      {% elseif theme.duoshuo_shortname and theme.duoshuo_share %}\n        {% include '_partials/share/duoshuo_share.swig' %}\n      {% endif %}\n    </div>\n  </div>\n{% endblock %}\n```\n修改themes/next/layout目录下的index.swig文件\n\n这个文件是首页的模板\n\n找到以下代码，给render方法传入刚才第一步中设置的参数。\n\n```\n{% block content %}\n  <section id=\"posts\" class=\"posts-expand\">\n    {% for post in page.posts %}\n       #render方法第二个参数is_index为是否为首页\n       #第三个参数is_pv为我们刚才设置的是否显示计数\n      {{ post_template.render(post, true, false) }}\n    {% endfor %}\n  </section>\n  {% include '_partials/pagination.swig' %}\n{% endblock %}\n```\n至此，我们的站点计数功能就做好了","source":"_posts/Hexo评论与站点统计系统.md","raw":"---\ntitle: hexo评论系统与站点计数\ntags: \n- hexo\n- next\ncategories: hexo\n---\n\n评论系统与站点计数\n\n添加 多说 或者 Disqus 第三方评论系统。当同时设置了 多说 和 Disqus 时，优先选择多说。\n\n### 使用多说\n\n1. 注册多说\n\n\t1. 登录后在首页选择 “我要安装”。\n\n\t2. 创建站点，填写站点相关信息。注意，多说域名 这一栏填写的即是你的 duoshuo_shortname。\n\n2. 编辑站点的 _config.yml 注意，不是主题的_config.yml文件 ，添加 duoshuo_shortname 字段，设置如下\n\n```\nduoshuo_shortname: your-duoshuo-shortname\n```\n（注）duoshuo short name: 你的多说二级域名去掉 .duoshuo.com 部分\n\n### 使用 Disqus\n编辑站点的 _config.yml ，添加 disqus_shortname 字段，设置如下\n\n```\ndisqus_shortname: your-disqus-shortname\n```\n\n### 多说评论显示 UA\n需要配置 duoshuo_info 这个字段\n\n```\nduoshuo_info:\n  ua_enable: true\n  admin_enable: true\n  user_id: 1234567\n  admin_nickname: 主编大人\n```\n配置 user_id 和 admin_nickname 字段。 请访问 多说，登录并访问「我的主页」获取 user_id ， 此 ID 是 网址最后那串数字。\n\n### 显示站点总访问量\n找到站点的themes/next/layout/_partials目录下的footer.swig文件\n将以下脚本和标签插入到文件中\n\n```\n\t<script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\t本站总访问量 <span id=\"busuanzi_value_site_pv\"></span> &nbsp&nbsp&nbsp\n\t您是第<span id=\"busuanzi_value_site_uv\"></span>个来到的小伙伴\n```\n插入到这里\n\n```\n\t<div class=\"powered-by\">\n  \t{{ __('footer.powered', '<a class=\"theme-link\" href=\"http://hexo.io\">Hexo</a>') }}\n\t</div>\n\t<div class=\"theme-info\">\n  \t{{ __('footer.theme') }} -\n \t <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n    NexT{% if theme.scheme %}.{{ theme.scheme }}{% endif %}\n  \t</a>\n\t</div>\n\t# 插入到这里\n\t{% block footer %}{% endblock %}\n```\n### 显示单页面访问量\n修改themes/next/layout/_macro目录下的post.swig文件\n\n位于文件开头,在第三个参数的位置，增加is_pv字段\n\n```\n{% macro render(post, is_index, is_pv, post_extra_class) %}\n```\n插入以下代码，用于区分文章页面跟首页\n\n这里不用像”显示站点总访问量”中那样安装脚本，否则会出现重复计数的问题。\n\n```\n{% if is_pv %}\n<span>&nbsp; | &nbsp;\n<span id=\"busuanzi_value_page_pv\" ></span>次阅读\n</span>    \n{% endif %}\n```\n\n插入这个位置\n\n```\n{% if post.comments %}\n          {% if (theme.duoshuo and theme.duoshuo.shortname) or theme.duoshuo_shortname %}\n            <span class=\"post-comments-count\">\n              &nbsp; | &nbsp;\n              <a href=\"{{ url_for(post.path) }}#comments\" itemprop=\"discussionUrl\">\n                <span class=\"post-comments-count ds-thread-count\" data-thread-key=\"{{ post.path }}\" itemprop=\"commentsCount\"></span>\n              </a>\n            </span>\n          {% elseif theme.disqus_shortname %}\n            <span class=\"post-comments-count\">\n            &nbsp; | &nbsp;\n            <a href=\"{{ url_for(post.path) }}#comments\" itemprop=\"discussionUrl\">\n              <span class=\"post-comments-count disqus-comment-count\" data-disqus-identifier=\"{{ post.path }}\" itemprop=\"commentsCount\"></span>\n            </a>\n          </span>\n          {% endif %}      \n        {% endif %} \n\t#插入到这里\n      </div>\n    </header>\n ```\n修改themes/next/layout目录下的post.swig文件\n \n这个文件是文章的模板\n \n找到以下代码，给render方法传入刚才第一步中设置的参数。\n\n```\n{% block content %}\n  <div id=\"posts\" class=\"posts-expand\">\n  \t#render方法第二个参数is_index为是否为首页\n  \t#第三个参数is_pv为我们刚才设置的是否显示计数\n    {{ post_template.render(page, false, true) }} \n    <div class=\"post-spread\">\n      {% if theme.jiathis %}\n        {% include '_partials/share/jiathis.swig' %}\n      {% elseif theme.duoshuo_shortname and theme.duoshuo_share %}\n        {% include '_partials/share/duoshuo_share.swig' %}\n      {% endif %}\n    </div>\n  </div>\n{% endblock %}\n```\n修改themes/next/layout目录下的index.swig文件\n\n这个文件是首页的模板\n\n找到以下代码，给render方法传入刚才第一步中设置的参数。\n\n```\n{% block content %}\n  <section id=\"posts\" class=\"posts-expand\">\n    {% for post in page.posts %}\n       #render方法第二个参数is_index为是否为首页\n       #第三个参数is_pv为我们刚才设置的是否显示计数\n      {{ post_template.render(post, true, false) }}\n    {% endfor %}\n  </section>\n  {% include '_partials/pagination.swig' %}\n{% endblock %}\n```\n至此，我们的站点计数功能就做好了","slug":"Hexo评论与站点统计系统","published":1,"date":"2016-06-21T01:11:04.000Z","updated":"2016-06-21T01:11:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7khe00088u4iqbwzfvng","content":"<p>评论系统与站点计数</p>\n<p>添加 多说 或者 Disqus 第三方评论系统。当同时设置了 多说 和 Disqus 时，优先选择多说。</p>\n<h3 id=\"使用多说\"><a href=\"#使用多说\" class=\"headerlink\" title=\"使用多说\"></a>使用多说</h3><ol>\n<li><p>注册多说</p>\n<ol>\n<li><p>登录后在首页选择 “我要安装”。</p>\n</li>\n<li><p>创建站点，填写站点相关信息。注意，多说域名 这一栏填写的即是你的 duoshuo_shortname。</p>\n</li>\n</ol>\n</li>\n<li><p>编辑站点的 _config.yml 注意，不是主题的_config.yml文件 ，添加 duoshuo_shortname 字段，设置如下</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">duoshuo_shortname: your-duoshuo-shortname</span><br></pre></td></tr></table></figure>\n<p>（注）duoshuo short name: 你的多说二级域名去掉 .duoshuo.com 部分</p>\n<h3 id=\"使用-Disqus\"><a href=\"#使用-Disqus\" class=\"headerlink\" title=\"使用 Disqus\"></a>使用 Disqus</h3><p>编辑站点的 _config.yml ，添加 disqus_shortname 字段，设置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disqus_shortname: your-disqus-shortname</span><br></pre></td></tr></table></figure>\n<h3 id=\"多说评论显示-UA\"><a href=\"#多说评论显示-UA\" class=\"headerlink\" title=\"多说评论显示 UA\"></a>多说评论显示 UA</h3><p>需要配置 duoshuo_info 这个字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">duoshuo_info:</span><br><span class=\"line\">  ua_enable: true</span><br><span class=\"line\">  admin_enable: true</span><br><span class=\"line\">  user_id: 1234567</span><br><span class=\"line\">  admin_nickname: 主编大人</span><br></pre></td></tr></table></figure>\n<p>配置 user_id 和 admin_nickname 字段。 请访问 多说，登录并访问「我的主页」获取 user_id ， 此 ID 是 网址最后那串数字。</p>\n<h3 id=\"显示站点总访问量\"><a href=\"#显示站点总访问量\" class=\"headerlink\" title=\"显示站点总访问量\"></a>显示站点总访问量</h3><p>找到站点的themes/next/layout/_partials目录下的footer.swig文件<br>将以下脚本和标签插入到文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt; &amp;nbsp&amp;nbsp&amp;nbsp</span><br><span class=\"line\">您是第&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;个来到的小伙伴</span><br></pre></td></tr></table></figure>\n<p>插入到这里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class=\"line\"> \t&#123;&#123; __(&apos;footer.powered&apos;, &apos;&lt;a class=&quot;theme-link&quot; href=&quot;http://hexo.io&quot;&gt;Hexo&lt;/a&gt;&apos;) &#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class=\"line\"> \t&#123;&#123; __(&apos;footer.theme&apos;) &#125;&#125; -</span><br><span class=\"line\">\t &lt;a class=&quot;theme-link&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt;</span><br><span class=\"line\">   NexT&#123;% if theme.scheme %&#125;.&#123;&#123; theme.scheme &#125;&#125;&#123;% endif %&#125;</span><br><span class=\"line\"> \t&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"># 插入到这里</span><br><span class=\"line\">&#123;% block footer %&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"显示单页面访问量\"><a href=\"#显示单页面访问量\" class=\"headerlink\" title=\"显示单页面访问量\"></a>显示单页面访问量</h3><p>修改themes/next/layout/_macro目录下的post.swig文件</p>\n<p>位于文件开头,在第三个参数的位置，增加is_pv字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% macro render(post, is_index, is_pv, post_extra_class) %&#125;</span><br></pre></td></tr></table></figure>\n<p>插入以下代码，用于区分文章页面跟首页</p>\n<p>这里不用像”显示站点总访问量”中那样安装脚本，否则会出现重复计数的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if is_pv %&#125;</span><br><span class=\"line\">&lt;span&gt;&amp;nbsp; | &amp;nbsp;</span><br><span class=\"line\">&lt;span id=&quot;busuanzi_value_page_pv&quot; &gt;&lt;/span&gt;次阅读</span><br><span class=\"line\">&lt;/span&gt;    </span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>插入这个位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if post.comments %&#125;</span><br><span class=\"line\">          &#123;% if (theme.duoshuo and theme.duoshuo.shortname) or theme.duoshuo_shortname %&#125;</span><br><span class=\"line\">            &lt;span class=&quot;post-comments-count&quot;&gt;</span><br><span class=\"line\">              &amp;nbsp; | &amp;nbsp;</span><br><span class=\"line\">              &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;#comments&quot; itemprop=&quot;discussionUrl&quot;&gt;</span><br><span class=\"line\">                &lt;span class=&quot;post-comments-count ds-thread-count&quot; data-thread-key=&quot;&#123;&#123; post.path &#125;&#125;&quot; itemprop=&quot;commentsCount&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">              &lt;/a&gt;</span><br><span class=\"line\">            &lt;/span&gt;</span><br><span class=\"line\">          &#123;% elseif theme.disqus_shortname %&#125;</span><br><span class=\"line\">            &lt;span class=&quot;post-comments-count&quot;&gt;</span><br><span class=\"line\">            &amp;nbsp; | &amp;nbsp;</span><br><span class=\"line\">            &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;#comments&quot; itemprop=&quot;discussionUrl&quot;&gt;</span><br><span class=\"line\">              &lt;span class=&quot;post-comments-count disqus-comment-count&quot; data-disqus-identifier=&quot;&#123;&#123; post.path &#125;&#125;&quot; itemprop=&quot;commentsCount&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">            &lt;/a&gt;</span><br><span class=\"line\">          &lt;/span&gt;</span><br><span class=\"line\">          &#123;% endif %&#125;      </span><br><span class=\"line\">        &#123;% endif %&#125; </span><br><span class=\"line\">\t#插入到这里</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/header&gt;</span><br></pre></td></tr></table></figure>\n<p>修改themes/next/layout目录下的post.swig文件</p>\n<p>这个文件是文章的模板</p>\n<p>找到以下代码，给render方法传入刚才第一步中设置的参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">  &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class=\"line\">  \t#render方法第二个参数is_index为是否为首页</span><br><span class=\"line\">  \t#第三个参数is_pv为我们刚才设置的是否显示计数</span><br><span class=\"line\">    &#123;&#123; post_template.render(page, false, true) &#125;&#125; </span><br><span class=\"line\">    &lt;div class=&quot;post-spread&quot;&gt;</span><br><span class=\"line\">      &#123;% if theme.jiathis %&#125;</span><br><span class=\"line\">        &#123;% include &apos;_partials/share/jiathis.swig&apos; %&#125;</span><br><span class=\"line\">      &#123;% elseif theme.duoshuo_shortname and theme.duoshuo_share %&#125;</span><br><span class=\"line\">        &#123;% include &apos;_partials/share/duoshuo_share.swig&apos; %&#125;</span><br><span class=\"line\">      &#123;% endif %&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<p>修改themes/next/layout目录下的index.swig文件</p>\n<p>这个文件是首页的模板</p>\n<p>找到以下代码，给render方法传入刚才第一步中设置的参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">  &lt;section id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class=\"line\">    &#123;% for post in page.posts %&#125;</span><br><span class=\"line\">       #render方法第二个参数is_index为是否为首页</span><br><span class=\"line\">       #第三个参数is_pv为我们刚才设置的是否显示计数</span><br><span class=\"line\">      &#123;&#123; post_template.render(post, true, false) &#125;&#125;</span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">  &lt;/section&gt;</span><br><span class=\"line\">  &#123;% include &apos;_partials/pagination.swig&apos; %&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，我们的站点计数功能就做好了</p>\n","excerpt":"","more":"<p>评论系统与站点计数</p>\n<p>添加 多说 或者 Disqus 第三方评论系统。当同时设置了 多说 和 Disqus 时，优先选择多说。</p>\n<h3 id=\"使用多说\"><a href=\"#使用多说\" class=\"headerlink\" title=\"使用多说\"></a>使用多说</h3><ol>\n<li><p>注册多说</p>\n<ol>\n<li><p>登录后在首页选择 “我要安装”。</p>\n</li>\n<li><p>创建站点，填写站点相关信息。注意，多说域名 这一栏填写的即是你的 duoshuo_shortname。</p>\n</li>\n</ol>\n</li>\n<li><p>编辑站点的 _config.yml 注意，不是主题的_config.yml文件 ，添加 duoshuo_shortname 字段，设置如下</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">duoshuo_shortname: your-duoshuo-shortname</span><br></pre></td></tr></table></figure>\n<p>（注）duoshuo short name: 你的多说二级域名去掉 .duoshuo.com 部分</p>\n<h3 id=\"使用-Disqus\"><a href=\"#使用-Disqus\" class=\"headerlink\" title=\"使用 Disqus\"></a>使用 Disqus</h3><p>编辑站点的 _config.yml ，添加 disqus_shortname 字段，设置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disqus_shortname: your-disqus-shortname</span><br></pre></td></tr></table></figure>\n<h3 id=\"多说评论显示-UA\"><a href=\"#多说评论显示-UA\" class=\"headerlink\" title=\"多说评论显示 UA\"></a>多说评论显示 UA</h3><p>需要配置 duoshuo_info 这个字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">duoshuo_info:</span><br><span class=\"line\">  ua_enable: true</span><br><span class=\"line\">  admin_enable: true</span><br><span class=\"line\">  user_id: 1234567</span><br><span class=\"line\">  admin_nickname: 主编大人</span><br></pre></td></tr></table></figure>\n<p>配置 user_id 和 admin_nickname 字段。 请访问 多说，登录并访问「我的主页」获取 user_id ， 此 ID 是 网址最后那串数字。</p>\n<h3 id=\"显示站点总访问量\"><a href=\"#显示站点总访问量\" class=\"headerlink\" title=\"显示站点总访问量\"></a>显示站点总访问量</h3><p>找到站点的themes/next/layout/_partials目录下的footer.swig文件<br>将以下脚本和标签插入到文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt; &amp;nbsp&amp;nbsp&amp;nbsp</span><br><span class=\"line\">您是第&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;个来到的小伙伴</span><br></pre></td></tr></table></figure>\n<p>插入到这里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class=\"line\"> \t&#123;&#123; __(&apos;footer.powered&apos;, &apos;&lt;a class=&quot;theme-link&quot; href=&quot;http://hexo.io&quot;&gt;Hexo&lt;/a&gt;&apos;) &#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class=\"line\"> \t&#123;&#123; __(&apos;footer.theme&apos;) &#125;&#125; -</span><br><span class=\"line\">\t &lt;a class=&quot;theme-link&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt;</span><br><span class=\"line\">   NexT&#123;% if theme.scheme %&#125;.&#123;&#123; theme.scheme &#125;&#125;&#123;% endif %&#125;</span><br><span class=\"line\"> \t&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"># 插入到这里</span><br><span class=\"line\">&#123;% block footer %&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"显示单页面访问量\"><a href=\"#显示单页面访问量\" class=\"headerlink\" title=\"显示单页面访问量\"></a>显示单页面访问量</h3><p>修改themes/next/layout/_macro目录下的post.swig文件</p>\n<p>位于文件开头,在第三个参数的位置，增加is_pv字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% macro render(post, is_index, is_pv, post_extra_class) %&#125;</span><br></pre></td></tr></table></figure>\n<p>插入以下代码，用于区分文章页面跟首页</p>\n<p>这里不用像”显示站点总访问量”中那样安装脚本，否则会出现重复计数的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if is_pv %&#125;</span><br><span class=\"line\">&lt;span&gt;&amp;nbsp; | &amp;nbsp;</span><br><span class=\"line\">&lt;span id=&quot;busuanzi_value_page_pv&quot; &gt;&lt;/span&gt;次阅读</span><br><span class=\"line\">&lt;/span&gt;    </span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>插入这个位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if post.comments %&#125;</span><br><span class=\"line\">          &#123;% if (theme.duoshuo and theme.duoshuo.shortname) or theme.duoshuo_shortname %&#125;</span><br><span class=\"line\">            &lt;span class=&quot;post-comments-count&quot;&gt;</span><br><span class=\"line\">              &amp;nbsp; | &amp;nbsp;</span><br><span class=\"line\">              &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;#comments&quot; itemprop=&quot;discussionUrl&quot;&gt;</span><br><span class=\"line\">                &lt;span class=&quot;post-comments-count ds-thread-count&quot; data-thread-key=&quot;&#123;&#123; post.path &#125;&#125;&quot; itemprop=&quot;commentsCount&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">              &lt;/a&gt;</span><br><span class=\"line\">            &lt;/span&gt;</span><br><span class=\"line\">          &#123;% elseif theme.disqus_shortname %&#125;</span><br><span class=\"line\">            &lt;span class=&quot;post-comments-count&quot;&gt;</span><br><span class=\"line\">            &amp;nbsp; | &amp;nbsp;</span><br><span class=\"line\">            &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;#comments&quot; itemprop=&quot;discussionUrl&quot;&gt;</span><br><span class=\"line\">              &lt;span class=&quot;post-comments-count disqus-comment-count&quot; data-disqus-identifier=&quot;&#123;&#123; post.path &#125;&#125;&quot; itemprop=&quot;commentsCount&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">            &lt;/a&gt;</span><br><span class=\"line\">          &lt;/span&gt;</span><br><span class=\"line\">          &#123;% endif %&#125;      </span><br><span class=\"line\">        &#123;% endif %&#125; </span><br><span class=\"line\">\t#插入到这里</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/header&gt;</span><br></pre></td></tr></table></figure>\n<p>修改themes/next/layout目录下的post.swig文件</p>\n<p>这个文件是文章的模板</p>\n<p>找到以下代码，给render方法传入刚才第一步中设置的参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">  &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class=\"line\">  \t#render方法第二个参数is_index为是否为首页</span><br><span class=\"line\">  \t#第三个参数is_pv为我们刚才设置的是否显示计数</span><br><span class=\"line\">    &#123;&#123; post_template.render(page, false, true) &#125;&#125; </span><br><span class=\"line\">    &lt;div class=&quot;post-spread&quot;&gt;</span><br><span class=\"line\">      &#123;% if theme.jiathis %&#125;</span><br><span class=\"line\">        &#123;% include &apos;_partials/share/jiathis.swig&apos; %&#125;</span><br><span class=\"line\">      &#123;% elseif theme.duoshuo_shortname and theme.duoshuo_share %&#125;</span><br><span class=\"line\">        &#123;% include &apos;_partials/share/duoshuo_share.swig&apos; %&#125;</span><br><span class=\"line\">      &#123;% endif %&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<p>修改themes/next/layout目录下的index.swig文件</p>\n<p>这个文件是首页的模板</p>\n<p>找到以下代码，给render方法传入刚才第一步中设置的参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">  &lt;section id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class=\"line\">    &#123;% for post in page.posts %&#125;</span><br><span class=\"line\">       #render方法第二个参数is_index为是否为首页</span><br><span class=\"line\">       #第三个参数is_pv为我们刚才设置的是否显示计数</span><br><span class=\"line\">      &#123;&#123; post_template.render(post, true, false) &#125;&#125;</span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">  &lt;/section&gt;</span><br><span class=\"line\">  &#123;% include &apos;_partials/pagination.swig&apos; %&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，我们的站点计数功能就做好了</p>\n"},{"title":"UIView的常用属性和常用方法总结","_content":"\n\nUIView的常用属性和常用方法总结\n\n1，UIView常用的一些属性如下：\n\n```\nframe：相对父视图的坐标和大小（x,y,w,h）\nbounds：相对自身的坐标和大小，所以bounds的x和y永远为0（0,0,w,h）\ncenter：相对父视图的中点坐标\ntransform：控制视图的放大缩小和旋转\nsuperview：获取父视图\nsubviews：获取所有子视图\nalpha：视图的透明度（0.0-1.0）\ntag：视图的标志（Int类型，默认等于0），设置后，可以通过viewWithTag方法拿到这个视图\n````\n\n2，UIView的常用方法如下：\n\n```\nfunc removeFromSuperview()：将视图从父视图中移除\nfunc insertSubview(view:UIView, atIndex index:Int)：指定一个位置插入一个视图，index越小，视图越往下\nfunc exchangeSubviewAtIndex(index1:Int, withSubviewAtIndex index2:Int)：将index1和index2位置的两个视图互换位置\nfunc addSubview(view:UIView)：添加视图到父视图\nfunc insertSubview(view:UIView,belowSubview siblingSubview:UIView)：在指定视图的下面插入视图\nfunc insertSubview(view:UIVIew,aboveSubview siblingSubview:UIView)：在指定视图上面插入视图\nfunc bringSubviewToFront(view:UIView)：把视图移到最顶层\nfunc sendSubviewToBack(view:UIView)：把视图移到最底层\nfunc viewWithTag(tag:Int)->UIView?：根据tag值获取视图\n```\n","source":"_posts/UIView的常用属性和常用方法.md","raw":"---\ntitle: UIView的常用属性和常用方法总结\ntags: \n- swift\ncategories: swift\n---\n\n\nUIView的常用属性和常用方法总结\n\n1，UIView常用的一些属性如下：\n\n```\nframe：相对父视图的坐标和大小（x,y,w,h）\nbounds：相对自身的坐标和大小，所以bounds的x和y永远为0（0,0,w,h）\ncenter：相对父视图的中点坐标\ntransform：控制视图的放大缩小和旋转\nsuperview：获取父视图\nsubviews：获取所有子视图\nalpha：视图的透明度（0.0-1.0）\ntag：视图的标志（Int类型，默认等于0），设置后，可以通过viewWithTag方法拿到这个视图\n````\n\n2，UIView的常用方法如下：\n\n```\nfunc removeFromSuperview()：将视图从父视图中移除\nfunc insertSubview(view:UIView, atIndex index:Int)：指定一个位置插入一个视图，index越小，视图越往下\nfunc exchangeSubviewAtIndex(index1:Int, withSubviewAtIndex index2:Int)：将index1和index2位置的两个视图互换位置\nfunc addSubview(view:UIView)：添加视图到父视图\nfunc insertSubview(view:UIView,belowSubview siblingSubview:UIView)：在指定视图的下面插入视图\nfunc insertSubview(view:UIVIew,aboveSubview siblingSubview:UIView)：在指定视图上面插入视图\nfunc bringSubviewToFront(view:UIView)：把视图移到最顶层\nfunc sendSubviewToBack(view:UIView)：把视图移到最底层\nfunc viewWithTag(tag:Int)->UIView?：根据tag值获取视图\n```\n","slug":"UIView的常用属性和常用方法","published":1,"date":"2016-06-25T11:30:06.000Z","updated":"2016-06-25T15:18:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7khh000a8u4i0a2lago4","content":"<p>UIView的常用属性和常用方法总结</p>\n<p>1，UIView常用的一些属性如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame：相对父视图的坐标和大小（x,y,w,h）</span><br><span class=\"line\">bounds：相对自身的坐标和大小，所以bounds的x和y永远为0（0,0,w,h）</span><br><span class=\"line\">center：相对父视图的中点坐标</span><br><span class=\"line\">transform：控制视图的放大缩小和旋转</span><br><span class=\"line\">superview：获取父视图</span><br><span class=\"line\">subviews：获取所有子视图</span><br><span class=\"line\">alpha：视图的透明度（0.0-1.0）</span><br><span class=\"line\">tag：视图的标志（Int类型，默认等于0），设置后，可以通过viewWithTag方法拿到这个视图</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>2，UIView的常用方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func removeFromSuperview()：将视图从父视图中移除</span><br><span class=\"line\">func insertSubview(view:UIView, atIndex index:Int)：指定一个位置插入一个视图，index越小，视图越往下</span><br><span class=\"line\">func exchangeSubviewAtIndex(index1:Int, withSubviewAtIndex index2:Int)：将index1和index2位置的两个视图互换位置</span><br><span class=\"line\">func addSubview(view:UIView)：添加视图到父视图</span><br><span class=\"line\">func insertSubview(view:UIView,belowSubview siblingSubview:UIView)：在指定视图的下面插入视图</span><br><span class=\"line\">func insertSubview(view:UIVIew,aboveSubview siblingSubview:UIView)：在指定视图上面插入视图</span><br><span class=\"line\">func bringSubviewToFront(view:UIView)：把视图移到最顶层</span><br><span class=\"line\">func sendSubviewToBack(view:UIView)：把视图移到最底层</span><br><span class=\"line\">func viewWithTag(tag:Int)-&gt;UIView?：根据tag值获取视图</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>UIView的常用属性和常用方法总结</p>\n<p>1，UIView常用的一些属性如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame：相对父视图的坐标和大小（x,y,w,h）</span><br><span class=\"line\">bounds：相对自身的坐标和大小，所以bounds的x和y永远为0（0,0,w,h）</span><br><span class=\"line\">center：相对父视图的中点坐标</span><br><span class=\"line\">transform：控制视图的放大缩小和旋转</span><br><span class=\"line\">superview：获取父视图</span><br><span class=\"line\">subviews：获取所有子视图</span><br><span class=\"line\">alpha：视图的透明度（0.0-1.0）</span><br><span class=\"line\">tag：视图的标志（Int类型，默认等于0），设置后，可以通过viewWithTag方法拿到这个视图</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>2，UIView的常用方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func removeFromSuperview()：将视图从父视图中移除</span><br><span class=\"line\">func insertSubview(view:UIView, atIndex index:Int)：指定一个位置插入一个视图，index越小，视图越往下</span><br><span class=\"line\">func exchangeSubviewAtIndex(index1:Int, withSubviewAtIndex index2:Int)：将index1和index2位置的两个视图互换位置</span><br><span class=\"line\">func addSubview(view:UIView)：添加视图到父视图</span><br><span class=\"line\">func insertSubview(view:UIView,belowSubview siblingSubview:UIView)：在指定视图的下面插入视图</span><br><span class=\"line\">func insertSubview(view:UIVIew,aboveSubview siblingSubview:UIView)：在指定视图上面插入视图</span><br><span class=\"line\">func bringSubviewToFront(view:UIView)：把视图移到最顶层</span><br><span class=\"line\">func sendSubviewToBack(view:UIView)：把视图移到最底层</span><br><span class=\"line\">func viewWithTag(tag:Int)-&gt;UIView?：根据tag值获取视图</span><br></pre></td></tr></table></figure>\n"},{"title":"swift-UISreen类的屏幕大小","_content":"\n获取 UISreen类的屏幕大小\n\n```\n//获取屏幕大小\nvar screenBounds:CGRect = UIScreen.mainScreen().bounds\nprintln(screenBounds) //iPhone6输出：（0.0,0.0,375.0,667.0）\n```\n\n","source":"_posts/UISreen类的屏幕大小.md","raw":"---\ntitle: swift-UISreen类的屏幕大小\ntags: \n- swift \ncategories: swift\n---\n\n获取 UISreen类的屏幕大小\n\n```\n//获取屏幕大小\nvar screenBounds:CGRect = UIScreen.mainScreen().bounds\nprintln(screenBounds) //iPhone6输出：（0.0,0.0,375.0,667.0）\n```\n\n","slug":"UISreen类的屏幕大小","published":1,"date":"2016-06-25T11:26:17.000Z","updated":"2016-06-25T15:13:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7khl000c8u4iwbncqydu","content":"<p>获取 UISreen类的屏幕大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取屏幕大小</span><br><span class=\"line\">var screenBounds:CGRect = UIScreen.mainScreen().bounds</span><br><span class=\"line\">println(screenBounds) //iPhone6输出：（0.0,0.0,375.0,667.0）</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>获取 UISreen类的屏幕大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取屏幕大小</span><br><span class=\"line\">var screenBounds:CGRect = UIScreen.mainScreen().bounds</span><br><span class=\"line\">println(screenBounds) //iPhone6输出：（0.0,0.0,375.0,667.0）</span><br></pre></td></tr></table></figure>\n"},{"title":"github插件","_content":"\ngithub 插件\n\n1 Octotree：你的 GitHub 文档库\n\n　　GitHub 现有的目录层级形式，在查看来自不同层级文件夹的文件的时候，显得似乎不是很方便，Octotree 这款 Chrome 插件能够让你通过文档库的方式管理、查看你的 GitHub 仓库，简单直观的同时，也方便你进行文件之间的跳转操作。\n\n\n![](/image/imagegithub1)\n\n\n2 GitHub Awesome Complete：属于 GitHub 的 「Alfred」\n\n　在 GitHub 搜索仓库或者项目的时候，你会怎么做？相信大部分人的步骤都是一样的：\n\n　　在搜索框输入关键字后按回车键\n\n　　在搜索结果中找到相应结果，点击进入相应页面\n\n　　有没有更简单快捷的操作方法？答案是 GitHub Awesome Complete 这款 Chrome 插件。这款插件能够让你在 GitHub 中输入关键字之后通过弹窗动态显示相应的搜索结果，你所需要做的，只是点击即可。\n\n![](/image/imagegithub1)\n\n3 　除了以上两款 GitHub 相关的插件，这里我还要介绍一下 Octo Mate 这款能够提升你的 GitHub 体验的小工具。对于这款插件，主要功能有以下四点：\n\n　　一键下载文件：GitHub 可以让你很方便的以 .zip 格式下载所有文件，但如果只需要下载一个文件，非常麻烦。使用 Octo Mate 后只需要点击文件图标即可下载。\n\n　　一键打开项目的 Github Pages\n\n　　显示仓库大小\n\n　　显示未读消息数\n\n　　相信这样一款插件一定能让你在使用 GitHub 的时候更加高效。\n\n![](/image/imagegithub1)","source":"_posts/github插件.md","raw":"---\ntitle: github插件\ntags: github\ncategories: github\n---\n\ngithub 插件\n\n1 Octotree：你的 GitHub 文档库\n\n　　GitHub 现有的目录层级形式，在查看来自不同层级文件夹的文件的时候，显得似乎不是很方便，Octotree 这款 Chrome 插件能够让你通过文档库的方式管理、查看你的 GitHub 仓库，简单直观的同时，也方便你进行文件之间的跳转操作。\n\n\n![](/image/imagegithub1)\n\n\n2 GitHub Awesome Complete：属于 GitHub 的 「Alfred」\n\n　在 GitHub 搜索仓库或者项目的时候，你会怎么做？相信大部分人的步骤都是一样的：\n\n　　在搜索框输入关键字后按回车键\n\n　　在搜索结果中找到相应结果，点击进入相应页面\n\n　　有没有更简单快捷的操作方法？答案是 GitHub Awesome Complete 这款 Chrome 插件。这款插件能够让你在 GitHub 中输入关键字之后通过弹窗动态显示相应的搜索结果，你所需要做的，只是点击即可。\n\n![](/image/imagegithub1)\n\n3 　除了以上两款 GitHub 相关的插件，这里我还要介绍一下 Octo Mate 这款能够提升你的 GitHub 体验的小工具。对于这款插件，主要功能有以下四点：\n\n　　一键下载文件：GitHub 可以让你很方便的以 .zip 格式下载所有文件，但如果只需要下载一个文件，非常麻烦。使用 Octo Mate 后只需要点击文件图标即可下载。\n\n　　一键打开项目的 Github Pages\n\n　　显示仓库大小\n\n　　显示未读消息数\n\n　　相信这样一款插件一定能让你在使用 GitHub 的时候更加高效。\n\n![](/image/imagegithub1)","slug":"github插件","published":1,"date":"2016-06-30T14:26:40.000Z","updated":"2016-06-30T14:42:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7ki2000h8u4imvtv2p5g","content":"<p>github 插件</p>\n<p>1 Octotree：你的 GitHub 文档库</p>\n<p>　　GitHub 现有的目录层级形式，在查看来自不同层级文件夹的文件的时候，显得似乎不是很方便，Octotree 这款 Chrome 插件能够让你通过文档库的方式管理、查看你的 GitHub 仓库，简单直观的同时，也方便你进行文件之间的跳转操作。</p>\n<p><img src=\"/image/imagegithub1\" alt=\"\"></p>\n<p>2 GitHub Awesome Complete：属于 GitHub 的 「Alfred」</p>\n<p>　在 GitHub 搜索仓库或者项目的时候，你会怎么做？相信大部分人的步骤都是一样的：</p>\n<p>　　在搜索框输入关键字后按回车键</p>\n<p>　　在搜索结果中找到相应结果，点击进入相应页面</p>\n<p>　　有没有更简单快捷的操作方法？答案是 GitHub Awesome Complete 这款 Chrome 插件。这款插件能够让你在 GitHub 中输入关键字之后通过弹窗动态显示相应的搜索结果，你所需要做的，只是点击即可。</p>\n<p><img src=\"/image/imagegithub1\" alt=\"\"></p>\n<p>3 　除了以上两款 GitHub 相关的插件，这里我还要介绍一下 Octo Mate 这款能够提升你的 GitHub 体验的小工具。对于这款插件，主要功能有以下四点：</p>\n<p>　　一键下载文件：GitHub 可以让你很方便的以 .zip 格式下载所有文件，但如果只需要下载一个文件，非常麻烦。使用 Octo Mate 后只需要点击文件图标即可下载。</p>\n<p>　　一键打开项目的 Github Pages</p>\n<p>　　显示仓库大小</p>\n<p>　　显示未读消息数</p>\n<p>　　相信这样一款插件一定能让你在使用 GitHub 的时候更加高效。</p>\n<p><img src=\"/image/imagegithub1\" alt=\"\"></p>\n","excerpt":"","more":"<p>github 插件</p>\n<p>1 Octotree：你的 GitHub 文档库</p>\n<p>　　GitHub 现有的目录层级形式，在查看来自不同层级文件夹的文件的时候，显得似乎不是很方便，Octotree 这款 Chrome 插件能够让你通过文档库的方式管理、查看你的 GitHub 仓库，简单直观的同时，也方便你进行文件之间的跳转操作。</p>\n<p><img src=\"/image/imagegithub1\" alt=\"\"></p>\n<p>2 GitHub Awesome Complete：属于 GitHub 的 「Alfred」</p>\n<p>　在 GitHub 搜索仓库或者项目的时候，你会怎么做？相信大部分人的步骤都是一样的：</p>\n<p>　　在搜索框输入关键字后按回车键</p>\n<p>　　在搜索结果中找到相应结果，点击进入相应页面</p>\n<p>　　有没有更简单快捷的操作方法？答案是 GitHub Awesome Complete 这款 Chrome 插件。这款插件能够让你在 GitHub 中输入关键字之后通过弹窗动态显示相应的搜索结果，你所需要做的，只是点击即可。</p>\n<p><img src=\"/image/imagegithub1\" alt=\"\"></p>\n<p>3 　除了以上两款 GitHub 相关的插件，这里我还要介绍一下 Octo Mate 这款能够提升你的 GitHub 体验的小工具。对于这款插件，主要功能有以下四点：</p>\n<p>　　一键下载文件：GitHub 可以让你很方便的以 .zip 格式下载所有文件，但如果只需要下载一个文件，非常麻烦。使用 Octo Mate 后只需要点击文件图标即可下载。</p>\n<p>　　一键打开项目的 Github Pages</p>\n<p>　　显示仓库大小</p>\n<p>　　显示未读消息数</p>\n<p>　　相信这样一款插件一定能让你在使用 GitHub 的时候更加高效。</p>\n<p><img src=\"/image/imagegithub1\" alt=\"\"></p>\n"},{"title":"Swift_ios_开发之UINavigationController的常用属性","_content":"\nSwift开发之UINavigationController的常用属性\n\n1.导航栏是否隐藏\n\n```\nself.navigationController?.navigationBar.hidden = false\n```\n\n2.导航栏的最底部颜色设置\n\n```\n//backgroundColor 是最底下的color \nself.navigationController?.navigationBar.backgroundColor = UIColor.redColor()\n```\n\n3.导航栏的表层颜色，即首先看到的颜色\n\n```\n//barTintColor 是表层颜色\nself.navigationController?.navigationBar.barTintColor = UIColor.grayColor()\n```\n\n4.导航栏中间标题title的颜色，大小，字体设置\n\n```\nself.navigationController?.navigationBar.titleTextAttributes = [NSForegroundColorAttributeName:UIColor.blueColor(),NSFontAttributeName:UIFont(name: \"Heiti SC\", size: 24.0)!]\n```\n\n5.导航栏隐藏左边backitem，即leftbarbuttonitem\n\n```\n//完全隐藏backItem//\nself.navigationItem.setHidesBackButton(true, animated: true)\n```\n\n6.导航栏leftbarbuttonitem的颜色设置\n\n```\nswiftself.navigationController?.navigationBar.tintColor = UIColor.whiteColor()\n```\n7.导航栏leftbarbuttonitem的字体，颜色，大小设置\n\n```\nself.navigationItem.leftBarButtonItem?.setTitleTextAttributes([NSForegroundColorAttributeName:UIColor.blueColor(),NSFontAttributeName: UIFont(name: \"Chalkduster\", size: 13)!], forState: UIControlState.Normal)\n```\n8.导航栏重新定义leftbarbuttonitem\n\n```\n//重新定义backItem，将覆盖原来的BackItem.与storyboard中拖入一个item，效果一样。都是覆盖原来的backitem。\n\n//第一种代码定义方式\nself.navigationItem.setLeftBarButtonItem(UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Add, target: self, action: \"function\"), animated: true)\n\n//第二种代码定义方式 \nself.navigationItem.leftBarButtonItem = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Add, target: self, action: \"function\")\n\n//第三种代码定义的方式\nself.navigationItem.setLeftBarButtonItem(UIBarButtonItem(title: \"<Grandre\", style: UIBarButtonItemStyle.Plain, target: self, action: \"function\"), animated: true)\n\n```\n\n9.导航栏设置成透明\n\n```\n//将导航栏设置成透明\nself.navigationController?.navigationBar.setBackgroundImage(UIImage(), forBarMetrics: UIBarMetrics.Default)\nself.navigationController!.navigationBar.shadowImage = UIImage()\nself.navigationController?.navigationBar.translucent = true\n```","source":"_posts/Swift_ios_开发之UINavigationController的常用属性.md","raw":"---\ntitle: Swift_ios_开发之UINavigationController的常用属性\ntags: \n- swift\n- ios\n- UINavigationController\ncategories: swift\n---\n\nSwift开发之UINavigationController的常用属性\n\n1.导航栏是否隐藏\n\n```\nself.navigationController?.navigationBar.hidden = false\n```\n\n2.导航栏的最底部颜色设置\n\n```\n//backgroundColor 是最底下的color \nself.navigationController?.navigationBar.backgroundColor = UIColor.redColor()\n```\n\n3.导航栏的表层颜色，即首先看到的颜色\n\n```\n//barTintColor 是表层颜色\nself.navigationController?.navigationBar.barTintColor = UIColor.grayColor()\n```\n\n4.导航栏中间标题title的颜色，大小，字体设置\n\n```\nself.navigationController?.navigationBar.titleTextAttributes = [NSForegroundColorAttributeName:UIColor.blueColor(),NSFontAttributeName:UIFont(name: \"Heiti SC\", size: 24.0)!]\n```\n\n5.导航栏隐藏左边backitem，即leftbarbuttonitem\n\n```\n//完全隐藏backItem//\nself.navigationItem.setHidesBackButton(true, animated: true)\n```\n\n6.导航栏leftbarbuttonitem的颜色设置\n\n```\nswiftself.navigationController?.navigationBar.tintColor = UIColor.whiteColor()\n```\n7.导航栏leftbarbuttonitem的字体，颜色，大小设置\n\n```\nself.navigationItem.leftBarButtonItem?.setTitleTextAttributes([NSForegroundColorAttributeName:UIColor.blueColor(),NSFontAttributeName: UIFont(name: \"Chalkduster\", size: 13)!], forState: UIControlState.Normal)\n```\n8.导航栏重新定义leftbarbuttonitem\n\n```\n//重新定义backItem，将覆盖原来的BackItem.与storyboard中拖入一个item，效果一样。都是覆盖原来的backitem。\n\n//第一种代码定义方式\nself.navigationItem.setLeftBarButtonItem(UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Add, target: self, action: \"function\"), animated: true)\n\n//第二种代码定义方式 \nself.navigationItem.leftBarButtonItem = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Add, target: self, action: \"function\")\n\n//第三种代码定义的方式\nself.navigationItem.setLeftBarButtonItem(UIBarButtonItem(title: \"<Grandre\", style: UIBarButtonItemStyle.Plain, target: self, action: \"function\"), animated: true)\n\n```\n\n9.导航栏设置成透明\n\n```\n//将导航栏设置成透明\nself.navigationController?.navigationBar.setBackgroundImage(UIImage(), forBarMetrics: UIBarMetrics.Default)\nself.navigationController!.navigationBar.shadowImage = UIImage()\nself.navigationController?.navigationBar.translucent = true\n```","slug":"Swift_ios_开发之UINavigationController的常用属性","published":1,"date":"2016-06-30T04:45:25.000Z","updated":"2016-06-30T04:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7ki5000k8u4i6tjlut25","content":"<p>Swift开发之UINavigationController的常用属性</p>\n<p>1.导航栏是否隐藏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.navigationController?.navigationBar.hidden = false</span><br></pre></td></tr></table></figure>\n<p>2.导航栏的最底部颜色设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//backgroundColor 是最底下的color </span><br><span class=\"line\">self.navigationController?.navigationBar.backgroundColor = UIColor.redColor()</span><br></pre></td></tr></table></figure>\n<p>3.导航栏的表层颜色，即首先看到的颜色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//barTintColor 是表层颜色</span><br><span class=\"line\">self.navigationController?.navigationBar.barTintColor = UIColor.grayColor()</span><br></pre></td></tr></table></figure>\n<p>4.导航栏中间标题title的颜色，大小，字体设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.navigationController?.navigationBar.titleTextAttributes = [NSForegroundColorAttributeName:UIColor.blueColor(),NSFontAttributeName:UIFont(name: &quot;Heiti SC&quot;, size: 24.0)!]</span><br></pre></td></tr></table></figure>\n<p>5.导航栏隐藏左边backitem，即leftbarbuttonitem</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//完全隐藏backItem//</span><br><span class=\"line\">self.navigationItem.setHidesBackButton(true, animated: true)</span><br></pre></td></tr></table></figure>\n<p>6.导航栏leftbarbuttonitem的颜色设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swiftself.navigationController?.navigationBar.tintColor = UIColor.whiteColor()</span><br></pre></td></tr></table></figure>\n<p>7.导航栏leftbarbuttonitem的字体，颜色，大小设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.navigationItem.leftBarButtonItem?.setTitleTextAttributes([NSForegroundColorAttributeName:UIColor.blueColor(),NSFontAttributeName: UIFont(name: &quot;Chalkduster&quot;, size: 13)!], forState: UIControlState.Normal)</span><br></pre></td></tr></table></figure>\n<p>8.导航栏重新定义leftbarbuttonitem</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重新定义backItem，将覆盖原来的BackItem.与storyboard中拖入一个item，效果一样。都是覆盖原来的backitem。</span><br><span class=\"line\"></span><br><span class=\"line\">//第一种代码定义方式</span><br><span class=\"line\">self.navigationItem.setLeftBarButtonItem(UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Add, target: self, action: &quot;function&quot;), animated: true)</span><br><span class=\"line\"></span><br><span class=\"line\">//第二种代码定义方式 </span><br><span class=\"line\">self.navigationItem.leftBarButtonItem = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Add, target: self, action: &quot;function&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">//第三种代码定义的方式</span><br><span class=\"line\">self.navigationItem.setLeftBarButtonItem(UIBarButtonItem(title: &quot;&lt;Grandre&quot;, style: UIBarButtonItemStyle.Plain, target: self, action: &quot;function&quot;), animated: true)</span><br></pre></td></tr></table></figure>\n<p>9.导航栏设置成透明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将导航栏设置成透明</span><br><span class=\"line\">self.navigationController?.navigationBar.setBackgroundImage(UIImage(), forBarMetrics: UIBarMetrics.Default)</span><br><span class=\"line\">self.navigationController!.navigationBar.shadowImage = UIImage()</span><br><span class=\"line\">self.navigationController?.navigationBar.translucent = true</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>Swift开发之UINavigationController的常用属性</p>\n<p>1.导航栏是否隐藏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.navigationController?.navigationBar.hidden = false</span><br></pre></td></tr></table></figure>\n<p>2.导航栏的最底部颜色设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//backgroundColor 是最底下的color </span><br><span class=\"line\">self.navigationController?.navigationBar.backgroundColor = UIColor.redColor()</span><br></pre></td></tr></table></figure>\n<p>3.导航栏的表层颜色，即首先看到的颜色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//barTintColor 是表层颜色</span><br><span class=\"line\">self.navigationController?.navigationBar.barTintColor = UIColor.grayColor()</span><br></pre></td></tr></table></figure>\n<p>4.导航栏中间标题title的颜色，大小，字体设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.navigationController?.navigationBar.titleTextAttributes = [NSForegroundColorAttributeName:UIColor.blueColor(),NSFontAttributeName:UIFont(name: &quot;Heiti SC&quot;, size: 24.0)!]</span><br></pre></td></tr></table></figure>\n<p>5.导航栏隐藏左边backitem，即leftbarbuttonitem</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//完全隐藏backItem//</span><br><span class=\"line\">self.navigationItem.setHidesBackButton(true, animated: true)</span><br></pre></td></tr></table></figure>\n<p>6.导航栏leftbarbuttonitem的颜色设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swiftself.navigationController?.navigationBar.tintColor = UIColor.whiteColor()</span><br></pre></td></tr></table></figure>\n<p>7.导航栏leftbarbuttonitem的字体，颜色，大小设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.navigationItem.leftBarButtonItem?.setTitleTextAttributes([NSForegroundColorAttributeName:UIColor.blueColor(),NSFontAttributeName: UIFont(name: &quot;Chalkduster&quot;, size: 13)!], forState: UIControlState.Normal)</span><br></pre></td></tr></table></figure>\n<p>8.导航栏重新定义leftbarbuttonitem</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重新定义backItem，将覆盖原来的BackItem.与storyboard中拖入一个item，效果一样。都是覆盖原来的backitem。</span><br><span class=\"line\"></span><br><span class=\"line\">//第一种代码定义方式</span><br><span class=\"line\">self.navigationItem.setLeftBarButtonItem(UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Add, target: self, action: &quot;function&quot;), animated: true)</span><br><span class=\"line\"></span><br><span class=\"line\">//第二种代码定义方式 </span><br><span class=\"line\">self.navigationItem.leftBarButtonItem = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Add, target: self, action: &quot;function&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">//第三种代码定义的方式</span><br><span class=\"line\">self.navigationItem.setLeftBarButtonItem(UIBarButtonItem(title: &quot;&lt;Grandre&quot;, style: UIBarButtonItemStyle.Plain, target: self, action: &quot;function&quot;), animated: true)</span><br></pre></td></tr></table></figure>\n<p>9.导航栏设置成透明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将导航栏设置成透明</span><br><span class=\"line\">self.navigationController?.navigationBar.setBackgroundImage(UIImage(), forBarMetrics: UIBarMetrics.Default)</span><br><span class=\"line\">self.navigationController!.navigationBar.shadowImage = UIImage()</span><br><span class=\"line\">self.navigationController?.navigationBar.translucent = true</span><br></pre></td></tr></table></figure>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-06-21T01:11:04.000Z","updated":"2016-06-21T01:11:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7ki9000o8u4i8gomxlfr","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"ios核心动画之CAShapeLayer","_content":"### 专用图层\n##### CAShapeLayer\n\nCAShapeLayer优点：\n\n1. 渲染快速。CAShapeLayer使用了硬件加速，绘制同一图形会比用Core Graphics快很多。\n2. 高效使用内存。一个CAShapeLayer不需要像普通CALayer一样创建一个寄宿图形，所以无论有多大，都不会占用太多的内存。\n3. 不会被图层边界剪裁掉。一个CAShapeLayer可以在边界之外绘制。你的图层路径不会像在使用Core Graphics的普通CALayer一样被剪裁掉（如我们在第二章所见）。\n4. 不会出现像素化。当你给CAShapeLayer做3D变换时，它不像一个有寄宿图的普通图层一样变得像素化。\n\n创建一个CGPath 一般使用 UIBezierPath 绘制路线。\n\nCAShapeLayer 属性\n\n* lineWith（线宽，用点表示单位）\n* lineCap（线条结尾的样子）\n* lineJoin（线条之间的结合点的样子）\n* strokeColor(线条颜色)\n* fillColor（填充颜色）\n* path（路线）\n\n","source":"_posts/ios核心动画之CAShapeLayer.md","raw":"---\ntitle: ios核心动画之CAShapeLayer\ntags: \n- ios\n- animation\ncategories: ios\n---\n### 专用图层\n##### CAShapeLayer\n\nCAShapeLayer优点：\n\n1. 渲染快速。CAShapeLayer使用了硬件加速，绘制同一图形会比用Core Graphics快很多。\n2. 高效使用内存。一个CAShapeLayer不需要像普通CALayer一样创建一个寄宿图形，所以无论有多大，都不会占用太多的内存。\n3. 不会被图层边界剪裁掉。一个CAShapeLayer可以在边界之外绘制。你的图层路径不会像在使用Core Graphics的普通CALayer一样被剪裁掉（如我们在第二章所见）。\n4. 不会出现像素化。当你给CAShapeLayer做3D变换时，它不像一个有寄宿图的普通图层一样变得像素化。\n\n创建一个CGPath 一般使用 UIBezierPath 绘制路线。\n\nCAShapeLayer 属性\n\n* lineWith（线宽，用点表示单位）\n* lineCap（线条结尾的样子）\n* lineJoin（线条之间的结合点的样子）\n* strokeColor(线条颜色)\n* fillColor（填充颜色）\n* path（路线）\n\n","slug":"ios核心动画之CAShapeLayer","published":1,"date":"2016-06-21T01:11:04.000Z","updated":"2016-06-23T16:15:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kid000q8u4ikkhtxxyn","content":"<h3 id=\"专用图层\"><a href=\"#专用图层\" class=\"headerlink\" title=\"专用图层\"></a>专用图层</h3><h5 id=\"CAShapeLayer\"><a href=\"#CAShapeLayer\" class=\"headerlink\" title=\"CAShapeLayer\"></a>CAShapeLayer</h5><p>CAShapeLayer优点：</p>\n<ol>\n<li>渲染快速。CAShapeLayer使用了硬件加速，绘制同一图形会比用Core Graphics快很多。</li>\n<li>高效使用内存。一个CAShapeLayer不需要像普通CALayer一样创建一个寄宿图形，所以无论有多大，都不会占用太多的内存。</li>\n<li>不会被图层边界剪裁掉。一个CAShapeLayer可以在边界之外绘制。你的图层路径不会像在使用Core Graphics的普通CALayer一样被剪裁掉（如我们在第二章所见）。</li>\n<li>不会出现像素化。当你给CAShapeLayer做3D变换时，它不像一个有寄宿图的普通图层一样变得像素化。</li>\n</ol>\n<p>创建一个CGPath 一般使用 UIBezierPath 绘制路线。</p>\n<p>CAShapeLayer 属性</p>\n<ul>\n<li>lineWith（线宽，用点表示单位）</li>\n<li>lineCap（线条结尾的样子）</li>\n<li>lineJoin（线条之间的结合点的样子）</li>\n<li>strokeColor(线条颜色)</li>\n<li>fillColor（填充颜色）</li>\n<li>path（路线）</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"专用图层\"><a href=\"#专用图层\" class=\"headerlink\" title=\"专用图层\"></a>专用图层</h3><h5 id=\"CAShapeLayer\"><a href=\"#CAShapeLayer\" class=\"headerlink\" title=\"CAShapeLayer\"></a>CAShapeLayer</h5><p>CAShapeLayer优点：</p>\n<ol>\n<li>渲染快速。CAShapeLayer使用了硬件加速，绘制同一图形会比用Core Graphics快很多。</li>\n<li>高效使用内存。一个CAShapeLayer不需要像普通CALayer一样创建一个寄宿图形，所以无论有多大，都不会占用太多的内存。</li>\n<li>不会被图层边界剪裁掉。一个CAShapeLayer可以在边界之外绘制。你的图层路径不会像在使用Core Graphics的普通CALayer一样被剪裁掉（如我们在第二章所见）。</li>\n<li>不会出现像素化。当你给CAShapeLayer做3D变换时，它不像一个有寄宿图的普通图层一样变得像素化。</li>\n</ol>\n<p>创建一个CGPath 一般使用 UIBezierPath 绘制路线。</p>\n<p>CAShapeLayer 属性</p>\n<ul>\n<li>lineWith（线宽，用点表示单位）</li>\n<li>lineCap（线条结尾的样子）</li>\n<li>lineJoin（线条之间的结合点的样子）</li>\n<li>strokeColor(线条颜色)</li>\n<li>fillColor（填充颜色）</li>\n<li>path（路线）</li>\n</ul>\n"},{"title":"mac localhost server","_content":"\n\n1\n建立方式很简单，直接在终端中运行：\n\n```\nsudo mkdir ~/Sites\n```\n\n2建立“站点”文件夹之后，检查 /etc/ 文件夹下面是不是有“haibor.conf”这个文件：\n\n```\n/etc/apache2/users/\n```\n如果没有，那么你需要创建一个，取名为“你的名字.conf”，可以使用 vi 或者 nano 这两种编辑器之一来创建。\n\n```\nsudo vi /etc/apache2/users/你的名字.conf\n```\n创建之后将下面的这几行内容写到上面的 conf 文件中：\n\n```\n<Directory \"/Users/你的名字/Sites/\">\n    Options Indexes MultiViews\n    AllowOverride All\n    Order allow,deny\n    Allow from all\n</Directory>\n```\n3\n文件保存之后，给它赋予相应的权限：\n\n```\nsudo chmod 755 /etc/apache2/users/你的名字.conf\n```\n\n4接下来重启 Apache，以使该配置文件生效：\n\n```\nsudo apachectl restart\n```\n\n","source":"_posts/mac server.md","raw":"---\ntitle: mac localhost server\ntags: mac\ncategories: mac\n---\n\n\n1\n建立方式很简单，直接在终端中运行：\n\n```\nsudo mkdir ~/Sites\n```\n\n2建立“站点”文件夹之后，检查 /etc/ 文件夹下面是不是有“haibor.conf”这个文件：\n\n```\n/etc/apache2/users/\n```\n如果没有，那么你需要创建一个，取名为“你的名字.conf”，可以使用 vi 或者 nano 这两种编辑器之一来创建。\n\n```\nsudo vi /etc/apache2/users/你的名字.conf\n```\n创建之后将下面的这几行内容写到上面的 conf 文件中：\n\n```\n<Directory \"/Users/你的名字/Sites/\">\n    Options Indexes MultiViews\n    AllowOverride All\n    Order allow,deny\n    Allow from all\n</Directory>\n```\n3\n文件保存之后，给它赋予相应的权限：\n\n```\nsudo chmod 755 /etc/apache2/users/你的名字.conf\n```\n\n4接下来重启 Apache，以使该配置文件生效：\n\n```\nsudo apachectl restart\n```\n\n","slug":"mac server","published":1,"date":"2016-06-21T01:11:04.000Z","updated":"2016-06-23T16:13:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kig000u8u4i7piwrjbe","content":"<p>1<br>建立方式很简单，直接在终端中运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir ~/Sites</span><br></pre></td></tr></table></figure>\n<p>2建立“站点”文件夹之后，检查 /etc/ 文件夹下面是不是有“haibor.conf”这个文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/apache2/users/</span><br></pre></td></tr></table></figure>\n<p>如果没有，那么你需要创建一个，取名为“你的名字.conf”，可以使用 vi 或者 nano 这两种编辑器之一来创建。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/apache2/users/你的名字.conf</span><br></pre></td></tr></table></figure>\n<p>创建之后将下面的这几行内容写到上面的 conf 文件中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory &quot;/Users/你的名字/Sites/&quot;&gt;</span><br><span class=\"line\">    Options Indexes MultiViews</span><br><span class=\"line\">    AllowOverride All</span><br><span class=\"line\">    Order allow,deny</span><br><span class=\"line\">    Allow from all</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>\n<p>3<br>文件保存之后，给它赋予相应的权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 755 /etc/apache2/users/你的名字.conf</span><br></pre></td></tr></table></figure>\n<p>4接下来重启 Apache，以使该配置文件生效：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apachectl restart</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>1<br>建立方式很简单，直接在终端中运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir ~/Sites</span><br></pre></td></tr></table></figure>\n<p>2建立“站点”文件夹之后，检查 /etc/ 文件夹下面是不是有“haibor.conf”这个文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/apache2/users/</span><br></pre></td></tr></table></figure>\n<p>如果没有，那么你需要创建一个，取名为“你的名字.conf”，可以使用 vi 或者 nano 这两种编辑器之一来创建。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/apache2/users/你的名字.conf</span><br></pre></td></tr></table></figure>\n<p>创建之后将下面的这几行内容写到上面的 conf 文件中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory &quot;/Users/你的名字/Sites/&quot;&gt;</span><br><span class=\"line\">    Options Indexes MultiViews</span><br><span class=\"line\">    AllowOverride All</span><br><span class=\"line\">    Order allow,deny</span><br><span class=\"line\">    Allow from all</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>\n<p>3<br>文件保存之后，给它赋予相应的权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 755 /etc/apache2/users/你的名字.conf</span><br></pre></td></tr></table></figure>\n<p>4接下来重启 Apache，以使该配置文件生效：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apachectl restart</span><br></pre></td></tr></table></figure>\n"},{"title":"Swift 二维码QRCode","_content":"\nSwift 二维码QRCode\n1，直接读取图片中的二维码\n\n```\n\t\tlet qrcodeImg =  UIImage(named: \"codeBg.png\")\n        let ciImage:CIImage=CIImage(image:qrcodeImg!)!\n        let context = CIContext(options: nil)\n        let detector:CIDetector=CIDetector(ofType: CIDetectorTypeQRCode,\n            context: context, options: [CIDetectorAccuracy:CIDetectorAccuracyHigh])\n        let features=detector.featuresInImage(ciImage)\n        print(\"扫描到二维码个数：\\(features.count)\")\n        //遍历所有的二维码，并框出\n        for feature in features as! [CIQRCodeFeature] {\n            print(feature.messageString)\n        }\n```\n\n2，从相册中选择图片读取二维码\n\n```\n //选取相册\n //判断设置是否支持图片库\n        if UIImagePickerController.isSourceTypeAvailable(.PhotoLibrary){\n            //初始化图片控制器\n            let picker = UIImagePickerController()\n            //设置代理\n            picker.delegate = self\n            //指定图片控制器类型\n            picker.sourceType = UIImagePickerControllerSourceType.PhotoLibrary\n            //弹出控制器，显示界面\n            self.presentViewController(picker, animated: true, completion: {\n                () -> Void in\n            })\n        }else{\n            print(\"读取相册错误\")\n        }\n```\n//选择图片成功后代理\n\n```\n \t//选择图片成功后代理\n    func imagePickerController(picker: UIImagePickerController,\n        didFinishPickingMediaWithInfo info: [String : AnyObject]) {\n        //获取选择的原图\n        let image = info[UIImagePickerControllerOriginalImage] as! UIImage\n        //二维码读取\n        let ciImage:CIImage=CIImage(image:image)!\n        let context = CIContext(options: nil)\n        let detector:CIDetector=CIDetector(ofType: CIDetectorTypeQRCode,\n            context: context, options: [CIDetectorAccuracy:CIDetectorAccuracyHigh])\n        let features=detector.featuresInImage(ciImage)\n        print(\"扫描到二维码个数：\\(features.count)\")\n        //遍历所有的二维码，并框出\n        for feature in features as! [CIQRCodeFeature] {\n            print(feature.messageString)\n        }\n        //图片控制器退出\n        picker.dismissViewControllerAnimated(true, completion: {\n            () -> Void in\n        })\n    }\n```\n\n3，使用摄像头扫描读取二维码\n\n（1）扫描主要使用的是AVFoundation，用起来方便简单\n\n（2）通过 AVCaptureMetadataOutput 的 rectOfInterest 属性，可以设置探测探测区域。同时给这个探测区域添加个方框，只有在框中的二维码才会被扫描到。\n\n\n\n```\n \tvar scanRectView:UIView!\n    var device:AVCaptureDevice!\n    var input:AVCaptureDeviceInput!\n    var output:AVCaptureMetadataOutput!\n    var session:AVCaptureSession!\n    var preview:AVCaptureVideoPreviewLayer!\n```\n\n//通过摄像头扫描\n  \n```\n \t\t\tdo{\n            self.device = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo)\n            self.input = try AVCaptureDeviceInput(device: device)\n            self.output = AVCaptureMetadataOutput()\n            output.setMetadataObjectsDelegate(self, queue: dispatch_get_main_queue())\n            self.session = AVCaptureSession()\n            if UIScreen.mainScreen().bounds.size.height<500 {\n                self.session.sessionPreset = AVCaptureSessionPreset640x480\n            }else{\n                self.session.sessionPreset = AVCaptureSessionPresetHigh\n            }\n            self.session.addInput(self.input)\n            self.session.addOutput(self.output)\n            self.output.metadataObjectTypes = [AVMetadataObjectTypeQRCode]\n            //计算中间可探测区域\n            let windowSize:CGSize = UIScreen.mainScreen().bounds.size;\n            let scanSize:CGSize = CGSizeMake(windowSize.width*3/4,\n                windowSize.width*3/4);\n            var scanRect:CGRect = CGRectMake((windowSize.width-scanSize.width)/2,\n                (windowSize.height-scanSize.height)/2, scanSize.width, scanSize.height);\n            //计算rectOfInterest 注意x,y交换位置\n            scanRect = CGRectMake(scanRect.origin.y/windowSize.height,\n                scanRect.origin.x/windowSize.width,\n                scanRect.size.height/windowSize.height,\n                scanRect.size.width/windowSize.width);\n            //设置可探测区域\n            self.output.rectOfInterest = scanRect\n            self.preview = AVCaptureVideoPreviewLayer(session:self.session)\n            self.preview.videoGravity = AVLayerVideoGravityResizeAspectFill\n            self.preview.frame = UIScreen.mainScreen().bounds\n            self.view.layer.insertSublayer(self.preview, atIndex:0)\n            //添加中间的探测区域绿框\n            self.scanRectView = UIView();\n            self.view.addSubview(self.scanRectView)\n            self.scanRectView.frame = CGRectMake(0, 0, scanSize.width, scanSize.height);\n            self.scanRectView.center = CGPointMake(\n                CGRectGetMidX(UIScreen.mainScreen().bounds),\n                CGRectGetMidY(UIScreen.mainScreen().bounds));\n            self.scanRectView.layer.borderColor = UIColor.greenColor().CGColor\n            self.scanRectView.layer.borderWidth = 1;\n            //开始捕获\n            self.session.startRunning()\n        }catch _ as NSError{\n            //打印错误消息\n            let errorAlert = UIAlertView(title: \"提醒\",\n                message: \"请在iPhone的\\\"设置-隐私-相机\\\"选项中,允许本程序访问您的相机\",\n                delegate: self,\n                cancelButtonTitle: \"确定\")\n            errorAlert.show()\n        }\n```\n\n```\n //摄像头捕获\n    func captureOutput(captureOutput: AVCaptureOutput!,\n        didOutputMetadataObjects metadataObjects: [AnyObject]!,\n        fromConnection connection: AVCaptureConnection!) {\n        var stringValue:String?\n        if metadataObjects.count > 0 {\n            let metadataObject = metadataObjects[0] as! AVMetadataMachineReadableCodeObject\n            stringValue = metadataObject.stringValue\n            if stringValue != nil{\n                self.session.stopRunning()\n            }\n        }\n        self.session.stopRunning()\n        //输出结果\n        let alertView = UIAlertView(title: \"二维码\", message: stringValue,\n            delegate: self, cancelButtonTitle: \"确定\")\n        alertView.show()\n    }\n```\n//消息框确认后消失\n\n```\n    //消息框确认后消失\n    func alertView(alertView: UIAlertView, willDismissWithButtonIndex buttonIndex: Int) {\n         //继续扫描\n         self.session.startRunning()\n    }\n```","source":"_posts/iosQR二维码.md","raw":"---\ntitle: Swift 二维码QRCode\ntags: \n- swift\n- QRCode\n- AVFoundation\ncategories: swift\n---\n\nSwift 二维码QRCode\n1，直接读取图片中的二维码\n\n```\n\t\tlet qrcodeImg =  UIImage(named: \"codeBg.png\")\n        let ciImage:CIImage=CIImage(image:qrcodeImg!)!\n        let context = CIContext(options: nil)\n        let detector:CIDetector=CIDetector(ofType: CIDetectorTypeQRCode,\n            context: context, options: [CIDetectorAccuracy:CIDetectorAccuracyHigh])\n        let features=detector.featuresInImage(ciImage)\n        print(\"扫描到二维码个数：\\(features.count)\")\n        //遍历所有的二维码，并框出\n        for feature in features as! [CIQRCodeFeature] {\n            print(feature.messageString)\n        }\n```\n\n2，从相册中选择图片读取二维码\n\n```\n //选取相册\n //判断设置是否支持图片库\n        if UIImagePickerController.isSourceTypeAvailable(.PhotoLibrary){\n            //初始化图片控制器\n            let picker = UIImagePickerController()\n            //设置代理\n            picker.delegate = self\n            //指定图片控制器类型\n            picker.sourceType = UIImagePickerControllerSourceType.PhotoLibrary\n            //弹出控制器，显示界面\n            self.presentViewController(picker, animated: true, completion: {\n                () -> Void in\n            })\n        }else{\n            print(\"读取相册错误\")\n        }\n```\n//选择图片成功后代理\n\n```\n \t//选择图片成功后代理\n    func imagePickerController(picker: UIImagePickerController,\n        didFinishPickingMediaWithInfo info: [String : AnyObject]) {\n        //获取选择的原图\n        let image = info[UIImagePickerControllerOriginalImage] as! UIImage\n        //二维码读取\n        let ciImage:CIImage=CIImage(image:image)!\n        let context = CIContext(options: nil)\n        let detector:CIDetector=CIDetector(ofType: CIDetectorTypeQRCode,\n            context: context, options: [CIDetectorAccuracy:CIDetectorAccuracyHigh])\n        let features=detector.featuresInImage(ciImage)\n        print(\"扫描到二维码个数：\\(features.count)\")\n        //遍历所有的二维码，并框出\n        for feature in features as! [CIQRCodeFeature] {\n            print(feature.messageString)\n        }\n        //图片控制器退出\n        picker.dismissViewControllerAnimated(true, completion: {\n            () -> Void in\n        })\n    }\n```\n\n3，使用摄像头扫描读取二维码\n\n（1）扫描主要使用的是AVFoundation，用起来方便简单\n\n（2）通过 AVCaptureMetadataOutput 的 rectOfInterest 属性，可以设置探测探测区域。同时给这个探测区域添加个方框，只有在框中的二维码才会被扫描到。\n\n\n\n```\n \tvar scanRectView:UIView!\n    var device:AVCaptureDevice!\n    var input:AVCaptureDeviceInput!\n    var output:AVCaptureMetadataOutput!\n    var session:AVCaptureSession!\n    var preview:AVCaptureVideoPreviewLayer!\n```\n\n//通过摄像头扫描\n  \n```\n \t\t\tdo{\n            self.device = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo)\n            self.input = try AVCaptureDeviceInput(device: device)\n            self.output = AVCaptureMetadataOutput()\n            output.setMetadataObjectsDelegate(self, queue: dispatch_get_main_queue())\n            self.session = AVCaptureSession()\n            if UIScreen.mainScreen().bounds.size.height<500 {\n                self.session.sessionPreset = AVCaptureSessionPreset640x480\n            }else{\n                self.session.sessionPreset = AVCaptureSessionPresetHigh\n            }\n            self.session.addInput(self.input)\n            self.session.addOutput(self.output)\n            self.output.metadataObjectTypes = [AVMetadataObjectTypeQRCode]\n            //计算中间可探测区域\n            let windowSize:CGSize = UIScreen.mainScreen().bounds.size;\n            let scanSize:CGSize = CGSizeMake(windowSize.width*3/4,\n                windowSize.width*3/4);\n            var scanRect:CGRect = CGRectMake((windowSize.width-scanSize.width)/2,\n                (windowSize.height-scanSize.height)/2, scanSize.width, scanSize.height);\n            //计算rectOfInterest 注意x,y交换位置\n            scanRect = CGRectMake(scanRect.origin.y/windowSize.height,\n                scanRect.origin.x/windowSize.width,\n                scanRect.size.height/windowSize.height,\n                scanRect.size.width/windowSize.width);\n            //设置可探测区域\n            self.output.rectOfInterest = scanRect\n            self.preview = AVCaptureVideoPreviewLayer(session:self.session)\n            self.preview.videoGravity = AVLayerVideoGravityResizeAspectFill\n            self.preview.frame = UIScreen.mainScreen().bounds\n            self.view.layer.insertSublayer(self.preview, atIndex:0)\n            //添加中间的探测区域绿框\n            self.scanRectView = UIView();\n            self.view.addSubview(self.scanRectView)\n            self.scanRectView.frame = CGRectMake(0, 0, scanSize.width, scanSize.height);\n            self.scanRectView.center = CGPointMake(\n                CGRectGetMidX(UIScreen.mainScreen().bounds),\n                CGRectGetMidY(UIScreen.mainScreen().bounds));\n            self.scanRectView.layer.borderColor = UIColor.greenColor().CGColor\n            self.scanRectView.layer.borderWidth = 1;\n            //开始捕获\n            self.session.startRunning()\n        }catch _ as NSError{\n            //打印错误消息\n            let errorAlert = UIAlertView(title: \"提醒\",\n                message: \"请在iPhone的\\\"设置-隐私-相机\\\"选项中,允许本程序访问您的相机\",\n                delegate: self,\n                cancelButtonTitle: \"确定\")\n            errorAlert.show()\n        }\n```\n\n```\n //摄像头捕获\n    func captureOutput(captureOutput: AVCaptureOutput!,\n        didOutputMetadataObjects metadataObjects: [AnyObject]!,\n        fromConnection connection: AVCaptureConnection!) {\n        var stringValue:String?\n        if metadataObjects.count > 0 {\n            let metadataObject = metadataObjects[0] as! AVMetadataMachineReadableCodeObject\n            stringValue = metadataObject.stringValue\n            if stringValue != nil{\n                self.session.stopRunning()\n            }\n        }\n        self.session.stopRunning()\n        //输出结果\n        let alertView = UIAlertView(title: \"二维码\", message: stringValue,\n            delegate: self, cancelButtonTitle: \"确定\")\n        alertView.show()\n    }\n```\n//消息框确认后消失\n\n```\n    //消息框确认后消失\n    func alertView(alertView: UIAlertView, willDismissWithButtonIndex buttonIndex: Int) {\n         //继续扫描\n         self.session.startRunning()\n    }\n```","slug":"iosQR二维码","published":1,"date":"2016-06-28T15:22:25.000Z","updated":"2016-06-28T15:46:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kij000v8u4i2lfcuwb8","content":"<p>Swift 二维码QRCode<br>1，直接读取图片中的二维码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let qrcodeImg =  UIImage(named: &quot;codeBg.png&quot;)</span><br><span class=\"line\">      let ciImage:CIImage=CIImage(image:qrcodeImg!)!</span><br><span class=\"line\">      let context = CIContext(options: nil)</span><br><span class=\"line\">      let detector:CIDetector=CIDetector(ofType: CIDetectorTypeQRCode,</span><br><span class=\"line\">          context: context, options: [CIDetectorAccuracy:CIDetectorAccuracyHigh])</span><br><span class=\"line\">      let features=detector.featuresInImage(ciImage)</span><br><span class=\"line\">      print(&quot;扫描到二维码个数：\\(features.count)&quot;)</span><br><span class=\"line\">      //遍历所有的二维码，并框出</span><br><span class=\"line\">      for feature in features as! [CIQRCodeFeature] &#123;</span><br><span class=\"line\">          print(feature.messageString)</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>2，从相册中选择图片读取二维码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//选取相册</span><br><span class=\"line\">//判断设置是否支持图片库</span><br><span class=\"line\">       if UIImagePickerController.isSourceTypeAvailable(.PhotoLibrary)&#123;</span><br><span class=\"line\">           //初始化图片控制器</span><br><span class=\"line\">           let picker = UIImagePickerController()</span><br><span class=\"line\">           //设置代理</span><br><span class=\"line\">           picker.delegate = self</span><br><span class=\"line\">           //指定图片控制器类型</span><br><span class=\"line\">           picker.sourceType = UIImagePickerControllerSourceType.PhotoLibrary</span><br><span class=\"line\">           //弹出控制器，显示界面</span><br><span class=\"line\">           self.presentViewController(picker, animated: true, completion: &#123;</span><br><span class=\"line\">               () -&gt; Void in</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\">       &#125;else&#123;</span><br><span class=\"line\">           print(&quot;读取相册错误&quot;)</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>//选择图片成功后代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//选择图片成功后代理</span><br><span class=\"line\">  func imagePickerController(picker: UIImagePickerController,</span><br><span class=\"line\">      didFinishPickingMediaWithInfo info: [String : AnyObject]) &#123;</span><br><span class=\"line\">      //获取选择的原图</span><br><span class=\"line\">      let image = info[UIImagePickerControllerOriginalImage] as! UIImage</span><br><span class=\"line\">      //二维码读取</span><br><span class=\"line\">      let ciImage:CIImage=CIImage(image:image)!</span><br><span class=\"line\">      let context = CIContext(options: nil)</span><br><span class=\"line\">      let detector:CIDetector=CIDetector(ofType: CIDetectorTypeQRCode,</span><br><span class=\"line\">          context: context, options: [CIDetectorAccuracy:CIDetectorAccuracyHigh])</span><br><span class=\"line\">      let features=detector.featuresInImage(ciImage)</span><br><span class=\"line\">      print(&quot;扫描到二维码个数：\\(features.count)&quot;)</span><br><span class=\"line\">      //遍历所有的二维码，并框出</span><br><span class=\"line\">      for feature in features as! [CIQRCodeFeature] &#123;</span><br><span class=\"line\">          print(feature.messageString)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      //图片控制器退出</span><br><span class=\"line\">      picker.dismissViewControllerAnimated(true, completion: &#123;</span><br><span class=\"line\">          () -&gt; Void in</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>3，使用摄像头扫描读取二维码</p>\n<p>（1）扫描主要使用的是AVFoundation，用起来方便简单</p>\n<p>（2）通过 AVCaptureMetadataOutput 的 rectOfInterest 属性，可以设置探测探测区域。同时给这个探测区域添加个方框，只有在框中的二维码才会被扫描到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var scanRectView:UIView!</span><br><span class=\"line\">  var device:AVCaptureDevice!</span><br><span class=\"line\">  var input:AVCaptureDeviceInput!</span><br><span class=\"line\">  var output:AVCaptureMetadataOutput!</span><br><span class=\"line\">  var session:AVCaptureSession!</span><br><span class=\"line\">  var preview:AVCaptureVideoPreviewLayer!</span><br></pre></td></tr></table></figure>\n<p>//通过摄像头扫描</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do&#123;</span><br><span class=\"line\">        self.device = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo)</span><br><span class=\"line\">        self.input = try AVCaptureDeviceInput(device: device)</span><br><span class=\"line\">        self.output = AVCaptureMetadataOutput()</span><br><span class=\"line\">        output.setMetadataObjectsDelegate(self, queue: dispatch_get_main_queue())</span><br><span class=\"line\">        self.session = AVCaptureSession()</span><br><span class=\"line\">        if UIScreen.mainScreen().bounds.size.height&lt;500 &#123;</span><br><span class=\"line\">            self.session.sessionPreset = AVCaptureSessionPreset640x480</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            self.session.sessionPreset = AVCaptureSessionPresetHigh</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.session.addInput(self.input)</span><br><span class=\"line\">        self.session.addOutput(self.output)</span><br><span class=\"line\">        self.output.metadataObjectTypes = [AVMetadataObjectTypeQRCode]</span><br><span class=\"line\">        //计算中间可探测区域</span><br><span class=\"line\">        let windowSize:CGSize = UIScreen.mainScreen().bounds.size;</span><br><span class=\"line\">        let scanSize:CGSize = CGSizeMake(windowSize.width*3/4,</span><br><span class=\"line\">            windowSize.width*3/4);</span><br><span class=\"line\">        var scanRect:CGRect = CGRectMake((windowSize.width-scanSize.width)/2,</span><br><span class=\"line\">            (windowSize.height-scanSize.height)/2, scanSize.width, scanSize.height);</span><br><span class=\"line\">        //计算rectOfInterest 注意x,y交换位置</span><br><span class=\"line\">        scanRect = CGRectMake(scanRect.origin.y/windowSize.height,</span><br><span class=\"line\">            scanRect.origin.x/windowSize.width,</span><br><span class=\"line\">            scanRect.size.height/windowSize.height,</span><br><span class=\"line\">            scanRect.size.width/windowSize.width);</span><br><span class=\"line\">        //设置可探测区域</span><br><span class=\"line\">        self.output.rectOfInterest = scanRect</span><br><span class=\"line\">        self.preview = AVCaptureVideoPreviewLayer(session:self.session)</span><br><span class=\"line\">        self.preview.videoGravity = AVLayerVideoGravityResizeAspectFill</span><br><span class=\"line\">        self.preview.frame = UIScreen.mainScreen().bounds</span><br><span class=\"line\">        self.view.layer.insertSublayer(self.preview, atIndex:0)</span><br><span class=\"line\">        //添加中间的探测区域绿框</span><br><span class=\"line\">        self.scanRectView = UIView();</span><br><span class=\"line\">        self.view.addSubview(self.scanRectView)</span><br><span class=\"line\">        self.scanRectView.frame = CGRectMake(0, 0, scanSize.width, scanSize.height);</span><br><span class=\"line\">        self.scanRectView.center = CGPointMake(</span><br><span class=\"line\">            CGRectGetMidX(UIScreen.mainScreen().bounds),</span><br><span class=\"line\">            CGRectGetMidY(UIScreen.mainScreen().bounds));</span><br><span class=\"line\">        self.scanRectView.layer.borderColor = UIColor.greenColor().CGColor</span><br><span class=\"line\">        self.scanRectView.layer.borderWidth = 1;</span><br><span class=\"line\">        //开始捕获</span><br><span class=\"line\">        self.session.startRunning()</span><br><span class=\"line\">    &#125;catch _ as NSError&#123;</span><br><span class=\"line\">        //打印错误消息</span><br><span class=\"line\">        let errorAlert = UIAlertView(title: &quot;提醒&quot;,</span><br><span class=\"line\">            message: &quot;请在iPhone的\\&quot;设置-隐私-相机\\&quot;选项中,允许本程序访问您的相机&quot;,</span><br><span class=\"line\">            delegate: self,</span><br><span class=\"line\">            cancelButtonTitle: &quot;确定&quot;)</span><br><span class=\"line\">        errorAlert.show()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//摄像头捕获</span><br><span class=\"line\">   func captureOutput(captureOutput: AVCaptureOutput!,</span><br><span class=\"line\">       didOutputMetadataObjects metadataObjects: [AnyObject]!,</span><br><span class=\"line\">       fromConnection connection: AVCaptureConnection!) &#123;</span><br><span class=\"line\">       var stringValue:String?</span><br><span class=\"line\">       if metadataObjects.count &gt; 0 &#123;</span><br><span class=\"line\">           let metadataObject = metadataObjects[0] as! AVMetadataMachineReadableCodeObject</span><br><span class=\"line\">           stringValue = metadataObject.stringValue</span><br><span class=\"line\">           if stringValue != nil&#123;</span><br><span class=\"line\">               self.session.stopRunning()</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       self.session.stopRunning()</span><br><span class=\"line\">       //输出结果</span><br><span class=\"line\">       let alertView = UIAlertView(title: &quot;二维码&quot;, message: stringValue,</span><br><span class=\"line\">           delegate: self, cancelButtonTitle: &quot;确定&quot;)</span><br><span class=\"line\">       alertView.show()</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>//消息框确认后消失</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    //消息框确认后消失</span><br><span class=\"line\">    func alertView(alertView: UIAlertView, willDismissWithButtonIndex buttonIndex: Int) &#123;</span><br><span class=\"line\">         //继续扫描</span><br><span class=\"line\">         self.session.startRunning()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>Swift 二维码QRCode<br>1，直接读取图片中的二维码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let qrcodeImg =  UIImage(named: &quot;codeBg.png&quot;)</span><br><span class=\"line\">      let ciImage:CIImage=CIImage(image:qrcodeImg!)!</span><br><span class=\"line\">      let context = CIContext(options: nil)</span><br><span class=\"line\">      let detector:CIDetector=CIDetector(ofType: CIDetectorTypeQRCode,</span><br><span class=\"line\">          context: context, options: [CIDetectorAccuracy:CIDetectorAccuracyHigh])</span><br><span class=\"line\">      let features=detector.featuresInImage(ciImage)</span><br><span class=\"line\">      print(&quot;扫描到二维码个数：\\(features.count)&quot;)</span><br><span class=\"line\">      //遍历所有的二维码，并框出</span><br><span class=\"line\">      for feature in features as! [CIQRCodeFeature] &#123;</span><br><span class=\"line\">          print(feature.messageString)</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>2，从相册中选择图片读取二维码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//选取相册</span><br><span class=\"line\">//判断设置是否支持图片库</span><br><span class=\"line\">       if UIImagePickerController.isSourceTypeAvailable(.PhotoLibrary)&#123;</span><br><span class=\"line\">           //初始化图片控制器</span><br><span class=\"line\">           let picker = UIImagePickerController()</span><br><span class=\"line\">           //设置代理</span><br><span class=\"line\">           picker.delegate = self</span><br><span class=\"line\">           //指定图片控制器类型</span><br><span class=\"line\">           picker.sourceType = UIImagePickerControllerSourceType.PhotoLibrary</span><br><span class=\"line\">           //弹出控制器，显示界面</span><br><span class=\"line\">           self.presentViewController(picker, animated: true, completion: &#123;</span><br><span class=\"line\">               () -&gt; Void in</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\">       &#125;else&#123;</span><br><span class=\"line\">           print(&quot;读取相册错误&quot;)</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>//选择图片成功后代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//选择图片成功后代理</span><br><span class=\"line\">  func imagePickerController(picker: UIImagePickerController,</span><br><span class=\"line\">      didFinishPickingMediaWithInfo info: [String : AnyObject]) &#123;</span><br><span class=\"line\">      //获取选择的原图</span><br><span class=\"line\">      let image = info[UIImagePickerControllerOriginalImage] as! UIImage</span><br><span class=\"line\">      //二维码读取</span><br><span class=\"line\">      let ciImage:CIImage=CIImage(image:image)!</span><br><span class=\"line\">      let context = CIContext(options: nil)</span><br><span class=\"line\">      let detector:CIDetector=CIDetector(ofType: CIDetectorTypeQRCode,</span><br><span class=\"line\">          context: context, options: [CIDetectorAccuracy:CIDetectorAccuracyHigh])</span><br><span class=\"line\">      let features=detector.featuresInImage(ciImage)</span><br><span class=\"line\">      print(&quot;扫描到二维码个数：\\(features.count)&quot;)</span><br><span class=\"line\">      //遍历所有的二维码，并框出</span><br><span class=\"line\">      for feature in features as! [CIQRCodeFeature] &#123;</span><br><span class=\"line\">          print(feature.messageString)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      //图片控制器退出</span><br><span class=\"line\">      picker.dismissViewControllerAnimated(true, completion: &#123;</span><br><span class=\"line\">          () -&gt; Void in</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>3，使用摄像头扫描读取二维码</p>\n<p>（1）扫描主要使用的是AVFoundation，用起来方便简单</p>\n<p>（2）通过 AVCaptureMetadataOutput 的 rectOfInterest 属性，可以设置探测探测区域。同时给这个探测区域添加个方框，只有在框中的二维码才会被扫描到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var scanRectView:UIView!</span><br><span class=\"line\">  var device:AVCaptureDevice!</span><br><span class=\"line\">  var input:AVCaptureDeviceInput!</span><br><span class=\"line\">  var output:AVCaptureMetadataOutput!</span><br><span class=\"line\">  var session:AVCaptureSession!</span><br><span class=\"line\">  var preview:AVCaptureVideoPreviewLayer!</span><br></pre></td></tr></table></figure>\n<p>//通过摄像头扫描</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do&#123;</span><br><span class=\"line\">        self.device = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo)</span><br><span class=\"line\">        self.input = try AVCaptureDeviceInput(device: device)</span><br><span class=\"line\">        self.output = AVCaptureMetadataOutput()</span><br><span class=\"line\">        output.setMetadataObjectsDelegate(self, queue: dispatch_get_main_queue())</span><br><span class=\"line\">        self.session = AVCaptureSession()</span><br><span class=\"line\">        if UIScreen.mainScreen().bounds.size.height&lt;500 &#123;</span><br><span class=\"line\">            self.session.sessionPreset = AVCaptureSessionPreset640x480</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            self.session.sessionPreset = AVCaptureSessionPresetHigh</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.session.addInput(self.input)</span><br><span class=\"line\">        self.session.addOutput(self.output)</span><br><span class=\"line\">        self.output.metadataObjectTypes = [AVMetadataObjectTypeQRCode]</span><br><span class=\"line\">        //计算中间可探测区域</span><br><span class=\"line\">        let windowSize:CGSize = UIScreen.mainScreen().bounds.size;</span><br><span class=\"line\">        let scanSize:CGSize = CGSizeMake(windowSize.width*3/4,</span><br><span class=\"line\">            windowSize.width*3/4);</span><br><span class=\"line\">        var scanRect:CGRect = CGRectMake((windowSize.width-scanSize.width)/2,</span><br><span class=\"line\">            (windowSize.height-scanSize.height)/2, scanSize.width, scanSize.height);</span><br><span class=\"line\">        //计算rectOfInterest 注意x,y交换位置</span><br><span class=\"line\">        scanRect = CGRectMake(scanRect.origin.y/windowSize.height,</span><br><span class=\"line\">            scanRect.origin.x/windowSize.width,</span><br><span class=\"line\">            scanRect.size.height/windowSize.height,</span><br><span class=\"line\">            scanRect.size.width/windowSize.width);</span><br><span class=\"line\">        //设置可探测区域</span><br><span class=\"line\">        self.output.rectOfInterest = scanRect</span><br><span class=\"line\">        self.preview = AVCaptureVideoPreviewLayer(session:self.session)</span><br><span class=\"line\">        self.preview.videoGravity = AVLayerVideoGravityResizeAspectFill</span><br><span class=\"line\">        self.preview.frame = UIScreen.mainScreen().bounds</span><br><span class=\"line\">        self.view.layer.insertSublayer(self.preview, atIndex:0)</span><br><span class=\"line\">        //添加中间的探测区域绿框</span><br><span class=\"line\">        self.scanRectView = UIView();</span><br><span class=\"line\">        self.view.addSubview(self.scanRectView)</span><br><span class=\"line\">        self.scanRectView.frame = CGRectMake(0, 0, scanSize.width, scanSize.height);</span><br><span class=\"line\">        self.scanRectView.center = CGPointMake(</span><br><span class=\"line\">            CGRectGetMidX(UIScreen.mainScreen().bounds),</span><br><span class=\"line\">            CGRectGetMidY(UIScreen.mainScreen().bounds));</span><br><span class=\"line\">        self.scanRectView.layer.borderColor = UIColor.greenColor().CGColor</span><br><span class=\"line\">        self.scanRectView.layer.borderWidth = 1;</span><br><span class=\"line\">        //开始捕获</span><br><span class=\"line\">        self.session.startRunning()</span><br><span class=\"line\">    &#125;catch _ as NSError&#123;</span><br><span class=\"line\">        //打印错误消息</span><br><span class=\"line\">        let errorAlert = UIAlertView(title: &quot;提醒&quot;,</span><br><span class=\"line\">            message: &quot;请在iPhone的\\&quot;设置-隐私-相机\\&quot;选项中,允许本程序访问您的相机&quot;,</span><br><span class=\"line\">            delegate: self,</span><br><span class=\"line\">            cancelButtonTitle: &quot;确定&quot;)</span><br><span class=\"line\">        errorAlert.show()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//摄像头捕获</span><br><span class=\"line\">   func captureOutput(captureOutput: AVCaptureOutput!,</span><br><span class=\"line\">       didOutputMetadataObjects metadataObjects: [AnyObject]!,</span><br><span class=\"line\">       fromConnection connection: AVCaptureConnection!) &#123;</span><br><span class=\"line\">       var stringValue:String?</span><br><span class=\"line\">       if metadataObjects.count &gt; 0 &#123;</span><br><span class=\"line\">           let metadataObject = metadataObjects[0] as! AVMetadataMachineReadableCodeObject</span><br><span class=\"line\">           stringValue = metadataObject.stringValue</span><br><span class=\"line\">           if stringValue != nil&#123;</span><br><span class=\"line\">               self.session.stopRunning()</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       self.session.stopRunning()</span><br><span class=\"line\">       //输出结果</span><br><span class=\"line\">       let alertView = UIAlertView(title: &quot;二维码&quot;, message: stringValue,</span><br><span class=\"line\">           delegate: self, cancelButtonTitle: &quot;确定&quot;)</span><br><span class=\"line\">       alertView.show()</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>//消息框确认后消失</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    //消息框确认后消失</span><br><span class=\"line\">    func alertView(alertView: UIAlertView, willDismissWithButtonIndex buttonIndex: Int) &#123;</span><br><span class=\"line\">         //继续扫描</span><br><span class=\"line\">         self.session.startRunning()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"Swift使用AVFoundation实现条形码扫描","_content":"\nSwift - 使用AVFoundation实现条形码扫描（附：拉近镜头改善读取）\n\n1，条形码（一维码）的扫描读取\n\nmetadataObjectTypes 做如下修改\n\n```\nself.output.metadataObjectTypes = [AVMetadataObjectTypeEAN13Code,\n        AVMetadataObjectTypeEAN8Code, AVMetadataObjectTypeCode128Code,\n        AVMetadataObjectTypeCode39Code,AVMetadataObjectTypeCode93Code]\n```\n\n2，拉近镜头，改善条形码读取效果\n\n如果条码太小的时候,就会识别不出来。\n\n解决办法是：通过代码拉近镜头焦距，放大内容区域让机器更好的识别。\n\n\n```\nimport UIKit\nimport AVFoundation\n \nclass ViewController: UIViewController, AVCaptureMetadataOutputObjectsDelegate,\nUIAlertViewDelegate{\n     \n    var scanRectView:UIView!\n    var device:AVCaptureDevice!\n    var input:AVCaptureDeviceInput!\n    var output:AVCaptureMetadataOutput!\n    var session:AVCaptureSession!\n    var preview:AVCaptureVideoPreviewLayer!\n     \n    override func viewDidLoad() {\n        super.viewDidLoad()\n         \n        fromCamera()\n    }\n     \n    //通过摄像头扫描\n    func fromCamera() {\n        do{\n            self.device = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo)\n             \n            self.input = try AVCaptureDeviceInput(device: device)\n             \n            self.output = AVCaptureMetadataOutput()\n            output.setMetadataObjectsDelegate(self, queue: dispatch_get_main_queue())\n             \n            self.session = AVCaptureSession()\n            if UIScreen.mainScreen().bounds.size.height<500 {\n                self.session.sessionPreset = AVCaptureSessionPreset640x480\n            }else{\n                self.session.sessionPreset = AVCaptureSessionPresetHigh\n            }\n             \n            self.session.addInput(self.input)\n            self.session.addOutput(self.output)\n             \n            self.output.metadataObjectTypes = [AVMetadataObjectTypeEAN13Code,\n                AVMetadataObjectTypeEAN8Code, AVMetadataObjectTypeCode128Code,\n                AVMetadataObjectTypeCode39Code,AVMetadataObjectTypeCode93Code]\n             \n            //计算中间可探测区域\n            let windowSize:CGSize = UIScreen.mainScreen().bounds.size;\n            let scanSize:CGSize = CGSizeMake(windowSize.width*3/4,\n                windowSize.width*3/4);\n            var scanRect:CGRect = CGRectMake((windowSize.width-scanSize.width)/2,\n                (windowSize.height-scanSize.height)/2, scanSize.width, scanSize.height);\n            //计算rectOfInterest 注意x,y交换位置\n            scanRect = CGRectMake(scanRect.origin.y/windowSize.height,\n                scanRect.origin.x/windowSize.width,\n                scanRect.size.height/windowSize.height,\n                scanRect.size.width/windowSize.width);\n            //设置可探测区域\n            self.output.rectOfInterest = scanRect\n             \n            self.preview = AVCaptureVideoPreviewLayer(session:self.session)\n            self.preview.videoGravity = AVLayerVideoGravityResizeAspectFill\n            self.preview.frame = UIScreen.mainScreen().bounds\n            self.view.layer.insertSublayer(self.preview, atIndex:0)\n             \n            //添加中间的探测区域绿框\n            self.scanRectView = UIView();\n            self.view.addSubview(self.scanRectView)\n            self.scanRectView.frame = CGRectMake(0, 0, scanSize.width, scanSize.height);\n            self.scanRectView.center = CGPointMake(\n                CGRectGetMidX(UIScreen.mainScreen().bounds),\n                CGRectGetMidY(UIScreen.mainScreen().bounds));\n            self.scanRectView.layer.borderColor = UIColor.greenColor().CGColor\n            self.scanRectView.layer.borderWidth = 1;\n             \n            //开始捕获\n            self.session.startRunning()\n             \n            //放大\n            do {\n                try self.device!.lockForConfiguration()\n            } catch _ {\n                NSLog(\"Error: lockForConfiguration.\");\n            }\n            self.device!.videoZoomFactor = 1.5\n            self.device!.unlockForConfiguration()\n             //放大\n             \n             \n        }catch _ as NSError{\n            //打印错误消息\n            let errorAlert = UIAlertView(title: \"提醒\",\n                message: \"请在iPhone的\\\"设置-隐私-相机\\\"选项中,允许本程序访问您的相机\",\n                delegate: self,\n                cancelButtonTitle: \"确定\")\n            errorAlert.show()\n        }\n    }\n     \n    //摄像头捕获\n    func captureOutput(captureOutput: AVCaptureOutput!,\n        didOutputMetadataObjects metadataObjects: [AnyObject]!,\n        fromConnection connection: AVCaptureConnection!) {\n             \n            var stringValue:String?\n            if metadataObjects.count > 0 {\n                let metadataObject = metadataObjects[0]\n                    as! AVMetadataMachineReadableCodeObject\n                stringValue = metadataObject.stringValue\n                 \n                if stringValue != nil{\n                    self.session.stopRunning()\n                }\n            }\n            self.session.stopRunning()\n            //输出结果\n            let alertView = UIAlertView(title: \"一维码\", message: stringValue,\n                delegate: self, cancelButtonTitle: \"确定\")\n            alertView.show()\n    }\n     \n    //消息框确认后消失\n    func alertView(alertView: UIAlertView, willDismissWithButtonIndex buttonIndex: Int) {\n        //继续扫描\n        self.session.startRunning()\n    }\n     \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n}\n```\n","source":"_posts/ios使用AVFoundation实现条形码扫描.md","raw":"---\ntitle: Swift使用AVFoundation实现条形码扫描\ntags: \n- swift\n- QRCode\n- AVFoundation\ncategories: swift\n---\n\nSwift - 使用AVFoundation实现条形码扫描（附：拉近镜头改善读取）\n\n1，条形码（一维码）的扫描读取\n\nmetadataObjectTypes 做如下修改\n\n```\nself.output.metadataObjectTypes = [AVMetadataObjectTypeEAN13Code,\n        AVMetadataObjectTypeEAN8Code, AVMetadataObjectTypeCode128Code,\n        AVMetadataObjectTypeCode39Code,AVMetadataObjectTypeCode93Code]\n```\n\n2，拉近镜头，改善条形码读取效果\n\n如果条码太小的时候,就会识别不出来。\n\n解决办法是：通过代码拉近镜头焦距，放大内容区域让机器更好的识别。\n\n\n```\nimport UIKit\nimport AVFoundation\n \nclass ViewController: UIViewController, AVCaptureMetadataOutputObjectsDelegate,\nUIAlertViewDelegate{\n     \n    var scanRectView:UIView!\n    var device:AVCaptureDevice!\n    var input:AVCaptureDeviceInput!\n    var output:AVCaptureMetadataOutput!\n    var session:AVCaptureSession!\n    var preview:AVCaptureVideoPreviewLayer!\n     \n    override func viewDidLoad() {\n        super.viewDidLoad()\n         \n        fromCamera()\n    }\n     \n    //通过摄像头扫描\n    func fromCamera() {\n        do{\n            self.device = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo)\n             \n            self.input = try AVCaptureDeviceInput(device: device)\n             \n            self.output = AVCaptureMetadataOutput()\n            output.setMetadataObjectsDelegate(self, queue: dispatch_get_main_queue())\n             \n            self.session = AVCaptureSession()\n            if UIScreen.mainScreen().bounds.size.height<500 {\n                self.session.sessionPreset = AVCaptureSessionPreset640x480\n            }else{\n                self.session.sessionPreset = AVCaptureSessionPresetHigh\n            }\n             \n            self.session.addInput(self.input)\n            self.session.addOutput(self.output)\n             \n            self.output.metadataObjectTypes = [AVMetadataObjectTypeEAN13Code,\n                AVMetadataObjectTypeEAN8Code, AVMetadataObjectTypeCode128Code,\n                AVMetadataObjectTypeCode39Code,AVMetadataObjectTypeCode93Code]\n             \n            //计算中间可探测区域\n            let windowSize:CGSize = UIScreen.mainScreen().bounds.size;\n            let scanSize:CGSize = CGSizeMake(windowSize.width*3/4,\n                windowSize.width*3/4);\n            var scanRect:CGRect = CGRectMake((windowSize.width-scanSize.width)/2,\n                (windowSize.height-scanSize.height)/2, scanSize.width, scanSize.height);\n            //计算rectOfInterest 注意x,y交换位置\n            scanRect = CGRectMake(scanRect.origin.y/windowSize.height,\n                scanRect.origin.x/windowSize.width,\n                scanRect.size.height/windowSize.height,\n                scanRect.size.width/windowSize.width);\n            //设置可探测区域\n            self.output.rectOfInterest = scanRect\n             \n            self.preview = AVCaptureVideoPreviewLayer(session:self.session)\n            self.preview.videoGravity = AVLayerVideoGravityResizeAspectFill\n            self.preview.frame = UIScreen.mainScreen().bounds\n            self.view.layer.insertSublayer(self.preview, atIndex:0)\n             \n            //添加中间的探测区域绿框\n            self.scanRectView = UIView();\n            self.view.addSubview(self.scanRectView)\n            self.scanRectView.frame = CGRectMake(0, 0, scanSize.width, scanSize.height);\n            self.scanRectView.center = CGPointMake(\n                CGRectGetMidX(UIScreen.mainScreen().bounds),\n                CGRectGetMidY(UIScreen.mainScreen().bounds));\n            self.scanRectView.layer.borderColor = UIColor.greenColor().CGColor\n            self.scanRectView.layer.borderWidth = 1;\n             \n            //开始捕获\n            self.session.startRunning()\n             \n            //放大\n            do {\n                try self.device!.lockForConfiguration()\n            } catch _ {\n                NSLog(\"Error: lockForConfiguration.\");\n            }\n            self.device!.videoZoomFactor = 1.5\n            self.device!.unlockForConfiguration()\n             //放大\n             \n             \n        }catch _ as NSError{\n            //打印错误消息\n            let errorAlert = UIAlertView(title: \"提醒\",\n                message: \"请在iPhone的\\\"设置-隐私-相机\\\"选项中,允许本程序访问您的相机\",\n                delegate: self,\n                cancelButtonTitle: \"确定\")\n            errorAlert.show()\n        }\n    }\n     \n    //摄像头捕获\n    func captureOutput(captureOutput: AVCaptureOutput!,\n        didOutputMetadataObjects metadataObjects: [AnyObject]!,\n        fromConnection connection: AVCaptureConnection!) {\n             \n            var stringValue:String?\n            if metadataObjects.count > 0 {\n                let metadataObject = metadataObjects[0]\n                    as! AVMetadataMachineReadableCodeObject\n                stringValue = metadataObject.stringValue\n                 \n                if stringValue != nil{\n                    self.session.stopRunning()\n                }\n            }\n            self.session.stopRunning()\n            //输出结果\n            let alertView = UIAlertView(title: \"一维码\", message: stringValue,\n                delegate: self, cancelButtonTitle: \"确定\")\n            alertView.show()\n    }\n     \n    //消息框确认后消失\n    func alertView(alertView: UIAlertView, willDismissWithButtonIndex buttonIndex: Int) {\n        //继续扫描\n        self.session.startRunning()\n    }\n     \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n}\n```\n","slug":"ios使用AVFoundation实现条形码扫描","published":1,"date":"2016-06-30T04:45:25.000Z","updated":"2016-06-30T04:45:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kim000z8u4ij7rq3drq","content":"<p>Swift - 使用AVFoundation实现条形码扫描（附：拉近镜头改善读取）</p>\n<p>1，条形码（一维码）的扫描读取</p>\n<p>metadataObjectTypes 做如下修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.output.metadataObjectTypes = [AVMetadataObjectTypeEAN13Code,</span><br><span class=\"line\">        AVMetadataObjectTypeEAN8Code, AVMetadataObjectTypeCode128Code,</span><br><span class=\"line\">        AVMetadataObjectTypeCode39Code,AVMetadataObjectTypeCode93Code]</span><br></pre></td></tr></table></figure>\n<p>2，拉近镜头，改善条形码读取效果</p>\n<p>如果条码太小的时候,就会识别不出来。</p>\n<p>解决办法是：通过代码拉近镜头焦距，放大内容区域让机器更好的识别。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import UIKit</span><br><span class=\"line\">import AVFoundation</span><br><span class=\"line\"> </span><br><span class=\"line\">class ViewController: UIViewController, AVCaptureMetadataOutputObjectsDelegate,</span><br><span class=\"line\">UIAlertViewDelegate&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">    var scanRectView:UIView!</span><br><span class=\"line\">    var device:AVCaptureDevice!</span><br><span class=\"line\">    var input:AVCaptureDeviceInput!</span><br><span class=\"line\">    var output:AVCaptureMetadataOutput!</span><br><span class=\"line\">    var session:AVCaptureSession!</span><br><span class=\"line\">    var preview:AVCaptureVideoPreviewLayer!</span><br><span class=\"line\">     </span><br><span class=\"line\">    override func viewDidLoad() &#123;</span><br><span class=\"line\">        super.viewDidLoad()</span><br><span class=\"line\">         </span><br><span class=\"line\">        fromCamera()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    //通过摄像头扫描</span><br><span class=\"line\">    func fromCamera() &#123;</span><br><span class=\"line\">        do&#123;</span><br><span class=\"line\">            self.device = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo)</span><br><span class=\"line\">             </span><br><span class=\"line\">            self.input = try AVCaptureDeviceInput(device: device)</span><br><span class=\"line\">             </span><br><span class=\"line\">            self.output = AVCaptureMetadataOutput()</span><br><span class=\"line\">            output.setMetadataObjectsDelegate(self, queue: dispatch_get_main_queue())</span><br><span class=\"line\">             </span><br><span class=\"line\">            self.session = AVCaptureSession()</span><br><span class=\"line\">            if UIScreen.mainScreen().bounds.size.height&lt;500 &#123;</span><br><span class=\"line\">                self.session.sessionPreset = AVCaptureSessionPreset640x480</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                self.session.sessionPreset = AVCaptureSessionPresetHigh</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">             </span><br><span class=\"line\">            self.session.addInput(self.input)</span><br><span class=\"line\">            self.session.addOutput(self.output)</span><br><span class=\"line\">             </span><br><span class=\"line\">            self.output.metadataObjectTypes = [AVMetadataObjectTypeEAN13Code,</span><br><span class=\"line\">                AVMetadataObjectTypeEAN8Code, AVMetadataObjectTypeCode128Code,</span><br><span class=\"line\">                AVMetadataObjectTypeCode39Code,AVMetadataObjectTypeCode93Code]</span><br><span class=\"line\">             </span><br><span class=\"line\">            //计算中间可探测区域</span><br><span class=\"line\">            let windowSize:CGSize = UIScreen.mainScreen().bounds.size;</span><br><span class=\"line\">            let scanSize:CGSize = CGSizeMake(windowSize.width*3/4,</span><br><span class=\"line\">                windowSize.width*3/4);</span><br><span class=\"line\">            var scanRect:CGRect = CGRectMake((windowSize.width-scanSize.width)/2,</span><br><span class=\"line\">                (windowSize.height-scanSize.height)/2, scanSize.width, scanSize.height);</span><br><span class=\"line\">            //计算rectOfInterest 注意x,y交换位置</span><br><span class=\"line\">            scanRect = CGRectMake(scanRect.origin.y/windowSize.height,</span><br><span class=\"line\">                scanRect.origin.x/windowSize.width,</span><br><span class=\"line\">                scanRect.size.height/windowSize.height,</span><br><span class=\"line\">                scanRect.size.width/windowSize.width);</span><br><span class=\"line\">            //设置可探测区域</span><br><span class=\"line\">            self.output.rectOfInterest = scanRect</span><br><span class=\"line\">             </span><br><span class=\"line\">            self.preview = AVCaptureVideoPreviewLayer(session:self.session)</span><br><span class=\"line\">            self.preview.videoGravity = AVLayerVideoGravityResizeAspectFill</span><br><span class=\"line\">            self.preview.frame = UIScreen.mainScreen().bounds</span><br><span class=\"line\">            self.view.layer.insertSublayer(self.preview, atIndex:0)</span><br><span class=\"line\">             </span><br><span class=\"line\">            //添加中间的探测区域绿框</span><br><span class=\"line\">            self.scanRectView = UIView();</span><br><span class=\"line\">            self.view.addSubview(self.scanRectView)</span><br><span class=\"line\">            self.scanRectView.frame = CGRectMake(0, 0, scanSize.width, scanSize.height);</span><br><span class=\"line\">            self.scanRectView.center = CGPointMake(</span><br><span class=\"line\">                CGRectGetMidX(UIScreen.mainScreen().bounds),</span><br><span class=\"line\">                CGRectGetMidY(UIScreen.mainScreen().bounds));</span><br><span class=\"line\">            self.scanRectView.layer.borderColor = UIColor.greenColor().CGColor</span><br><span class=\"line\">            self.scanRectView.layer.borderWidth = 1;</span><br><span class=\"line\">             </span><br><span class=\"line\">            //开始捕获</span><br><span class=\"line\">            self.session.startRunning()</span><br><span class=\"line\">             </span><br><span class=\"line\">            //放大</span><br><span class=\"line\">            do &#123;</span><br><span class=\"line\">                try self.device!.lockForConfiguration()</span><br><span class=\"line\">            &#125; catch _ &#123;</span><br><span class=\"line\">                NSLog(&quot;Error: lockForConfiguration.&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            self.device!.videoZoomFactor = 1.5</span><br><span class=\"line\">            self.device!.unlockForConfiguration()</span><br><span class=\"line\">             //放大</span><br><span class=\"line\">             </span><br><span class=\"line\">             </span><br><span class=\"line\">        &#125;catch _ as NSError&#123;</span><br><span class=\"line\">            //打印错误消息</span><br><span class=\"line\">            let errorAlert = UIAlertView(title: &quot;提醒&quot;,</span><br><span class=\"line\">                message: &quot;请在iPhone的\\&quot;设置-隐私-相机\\&quot;选项中,允许本程序访问您的相机&quot;,</span><br><span class=\"line\">                delegate: self,</span><br><span class=\"line\">                cancelButtonTitle: &quot;确定&quot;)</span><br><span class=\"line\">            errorAlert.show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    //摄像头捕获</span><br><span class=\"line\">    func captureOutput(captureOutput: AVCaptureOutput!,</span><br><span class=\"line\">        didOutputMetadataObjects metadataObjects: [AnyObject]!,</span><br><span class=\"line\">        fromConnection connection: AVCaptureConnection!) &#123;</span><br><span class=\"line\">             </span><br><span class=\"line\">            var stringValue:String?</span><br><span class=\"line\">            if metadataObjects.count &gt; 0 &#123;</span><br><span class=\"line\">                let metadataObject = metadataObjects[0]</span><br><span class=\"line\">                    as! AVMetadataMachineReadableCodeObject</span><br><span class=\"line\">                stringValue = metadataObject.stringValue</span><br><span class=\"line\">                 </span><br><span class=\"line\">                if stringValue != nil&#123;</span><br><span class=\"line\">                    self.session.stopRunning()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            self.session.stopRunning()</span><br><span class=\"line\">            //输出结果</span><br><span class=\"line\">            let alertView = UIAlertView(title: &quot;一维码&quot;, message: stringValue,</span><br><span class=\"line\">                delegate: self, cancelButtonTitle: &quot;确定&quot;)</span><br><span class=\"line\">            alertView.show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    //消息框确认后消失</span><br><span class=\"line\">    func alertView(alertView: UIAlertView, willDismissWithButtonIndex buttonIndex: Int) &#123;</span><br><span class=\"line\">        //继续扫描</span><br><span class=\"line\">        self.session.startRunning()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    override func didReceiveMemoryWarning() &#123;</span><br><span class=\"line\">        super.didReceiveMemoryWarning()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>Swift - 使用AVFoundation实现条形码扫描（附：拉近镜头改善读取）</p>\n<p>1，条形码（一维码）的扫描读取</p>\n<p>metadataObjectTypes 做如下修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.output.metadataObjectTypes = [AVMetadataObjectTypeEAN13Code,</span><br><span class=\"line\">        AVMetadataObjectTypeEAN8Code, AVMetadataObjectTypeCode128Code,</span><br><span class=\"line\">        AVMetadataObjectTypeCode39Code,AVMetadataObjectTypeCode93Code]</span><br></pre></td></tr></table></figure>\n<p>2，拉近镜头，改善条形码读取效果</p>\n<p>如果条码太小的时候,就会识别不出来。</p>\n<p>解决办法是：通过代码拉近镜头焦距，放大内容区域让机器更好的识别。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import UIKit</span><br><span class=\"line\">import AVFoundation</span><br><span class=\"line\"> </span><br><span class=\"line\">class ViewController: UIViewController, AVCaptureMetadataOutputObjectsDelegate,</span><br><span class=\"line\">UIAlertViewDelegate&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">    var scanRectView:UIView!</span><br><span class=\"line\">    var device:AVCaptureDevice!</span><br><span class=\"line\">    var input:AVCaptureDeviceInput!</span><br><span class=\"line\">    var output:AVCaptureMetadataOutput!</span><br><span class=\"line\">    var session:AVCaptureSession!</span><br><span class=\"line\">    var preview:AVCaptureVideoPreviewLayer!</span><br><span class=\"line\">     </span><br><span class=\"line\">    override func viewDidLoad() &#123;</span><br><span class=\"line\">        super.viewDidLoad()</span><br><span class=\"line\">         </span><br><span class=\"line\">        fromCamera()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    //通过摄像头扫描</span><br><span class=\"line\">    func fromCamera() &#123;</span><br><span class=\"line\">        do&#123;</span><br><span class=\"line\">            self.device = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo)</span><br><span class=\"line\">             </span><br><span class=\"line\">            self.input = try AVCaptureDeviceInput(device: device)</span><br><span class=\"line\">             </span><br><span class=\"line\">            self.output = AVCaptureMetadataOutput()</span><br><span class=\"line\">            output.setMetadataObjectsDelegate(self, queue: dispatch_get_main_queue())</span><br><span class=\"line\">             </span><br><span class=\"line\">            self.session = AVCaptureSession()</span><br><span class=\"line\">            if UIScreen.mainScreen().bounds.size.height&lt;500 &#123;</span><br><span class=\"line\">                self.session.sessionPreset = AVCaptureSessionPreset640x480</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                self.session.sessionPreset = AVCaptureSessionPresetHigh</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">             </span><br><span class=\"line\">            self.session.addInput(self.input)</span><br><span class=\"line\">            self.session.addOutput(self.output)</span><br><span class=\"line\">             </span><br><span class=\"line\">            self.output.metadataObjectTypes = [AVMetadataObjectTypeEAN13Code,</span><br><span class=\"line\">                AVMetadataObjectTypeEAN8Code, AVMetadataObjectTypeCode128Code,</span><br><span class=\"line\">                AVMetadataObjectTypeCode39Code,AVMetadataObjectTypeCode93Code]</span><br><span class=\"line\">             </span><br><span class=\"line\">            //计算中间可探测区域</span><br><span class=\"line\">            let windowSize:CGSize = UIScreen.mainScreen().bounds.size;</span><br><span class=\"line\">            let scanSize:CGSize = CGSizeMake(windowSize.width*3/4,</span><br><span class=\"line\">                windowSize.width*3/4);</span><br><span class=\"line\">            var scanRect:CGRect = CGRectMake((windowSize.width-scanSize.width)/2,</span><br><span class=\"line\">                (windowSize.height-scanSize.height)/2, scanSize.width, scanSize.height);</span><br><span class=\"line\">            //计算rectOfInterest 注意x,y交换位置</span><br><span class=\"line\">            scanRect = CGRectMake(scanRect.origin.y/windowSize.height,</span><br><span class=\"line\">                scanRect.origin.x/windowSize.width,</span><br><span class=\"line\">                scanRect.size.height/windowSize.height,</span><br><span class=\"line\">                scanRect.size.width/windowSize.width);</span><br><span class=\"line\">            //设置可探测区域</span><br><span class=\"line\">            self.output.rectOfInterest = scanRect</span><br><span class=\"line\">             </span><br><span class=\"line\">            self.preview = AVCaptureVideoPreviewLayer(session:self.session)</span><br><span class=\"line\">            self.preview.videoGravity = AVLayerVideoGravityResizeAspectFill</span><br><span class=\"line\">            self.preview.frame = UIScreen.mainScreen().bounds</span><br><span class=\"line\">            self.view.layer.insertSublayer(self.preview, atIndex:0)</span><br><span class=\"line\">             </span><br><span class=\"line\">            //添加中间的探测区域绿框</span><br><span class=\"line\">            self.scanRectView = UIView();</span><br><span class=\"line\">            self.view.addSubview(self.scanRectView)</span><br><span class=\"line\">            self.scanRectView.frame = CGRectMake(0, 0, scanSize.width, scanSize.height);</span><br><span class=\"line\">            self.scanRectView.center = CGPointMake(</span><br><span class=\"line\">                CGRectGetMidX(UIScreen.mainScreen().bounds),</span><br><span class=\"line\">                CGRectGetMidY(UIScreen.mainScreen().bounds));</span><br><span class=\"line\">            self.scanRectView.layer.borderColor = UIColor.greenColor().CGColor</span><br><span class=\"line\">            self.scanRectView.layer.borderWidth = 1;</span><br><span class=\"line\">             </span><br><span class=\"line\">            //开始捕获</span><br><span class=\"line\">            self.session.startRunning()</span><br><span class=\"line\">             </span><br><span class=\"line\">            //放大</span><br><span class=\"line\">            do &#123;</span><br><span class=\"line\">                try self.device!.lockForConfiguration()</span><br><span class=\"line\">            &#125; catch _ &#123;</span><br><span class=\"line\">                NSLog(&quot;Error: lockForConfiguration.&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            self.device!.videoZoomFactor = 1.5</span><br><span class=\"line\">            self.device!.unlockForConfiguration()</span><br><span class=\"line\">             //放大</span><br><span class=\"line\">             </span><br><span class=\"line\">             </span><br><span class=\"line\">        &#125;catch _ as NSError&#123;</span><br><span class=\"line\">            //打印错误消息</span><br><span class=\"line\">            let errorAlert = UIAlertView(title: &quot;提醒&quot;,</span><br><span class=\"line\">                message: &quot;请在iPhone的\\&quot;设置-隐私-相机\\&quot;选项中,允许本程序访问您的相机&quot;,</span><br><span class=\"line\">                delegate: self,</span><br><span class=\"line\">                cancelButtonTitle: &quot;确定&quot;)</span><br><span class=\"line\">            errorAlert.show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    //摄像头捕获</span><br><span class=\"line\">    func captureOutput(captureOutput: AVCaptureOutput!,</span><br><span class=\"line\">        didOutputMetadataObjects metadataObjects: [AnyObject]!,</span><br><span class=\"line\">        fromConnection connection: AVCaptureConnection!) &#123;</span><br><span class=\"line\">             </span><br><span class=\"line\">            var stringValue:String?</span><br><span class=\"line\">            if metadataObjects.count &gt; 0 &#123;</span><br><span class=\"line\">                let metadataObject = metadataObjects[0]</span><br><span class=\"line\">                    as! AVMetadataMachineReadableCodeObject</span><br><span class=\"line\">                stringValue = metadataObject.stringValue</span><br><span class=\"line\">                 </span><br><span class=\"line\">                if stringValue != nil&#123;</span><br><span class=\"line\">                    self.session.stopRunning()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            self.session.stopRunning()</span><br><span class=\"line\">            //输出结果</span><br><span class=\"line\">            let alertView = UIAlertView(title: &quot;一维码&quot;, message: stringValue,</span><br><span class=\"line\">                delegate: self, cancelButtonTitle: &quot;确定&quot;)</span><br><span class=\"line\">            alertView.show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    //消息框确认后消失</span><br><span class=\"line\">    func alertView(alertView: UIAlertView, willDismissWithButtonIndex buttonIndex: Int) &#123;</span><br><span class=\"line\">        //继续扫描</span><br><span class=\"line\">        self.session.startRunning()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    override func didReceiveMemoryWarning() &#123;</span><br><span class=\"line\">        super.didReceiveMemoryWarning()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"swift-SnapKit自动布局使用2","_content":"\n1 保存约束\n\n```\n //保存约束的引用\n var topConstraint:Constraint?\n  \n self.topConstraint = make.top.equalTo(self.view).offset(40).constraint\n```\n    \n2 删除约束\n\n```\n//移除约束\nself.topConstraint?.uninstall()\n```\n        \n3 通过约束的引用来更新约束 updateOffset() \n\n```\n//更新修改约束\nself.topConstraint?.updateOffset(60)\n```\n\n4 使用snp_updateConstraints更新约束\n\n我们还可以用 snp_updateConstraints 方法来代替 snp_makeConstraints 进行约束的更新，这个更新操作通常放在 UIViewController 的 updateViewConstraints() 方法中，或者 UIView 的 updateConstraints() 方法中执行，这样视图约束需要更新的时候会自动调用。\n\n```\n//视图约束更新\n    override func updateViewConstraints() {\n        self.box.snp_updateConstraints{ (make) -> Void in\n            //视图宽度与屏幕等宽\n            make.width.equalTo(self.view)\n        }\n   \n        super.updateViewConstraints()\n    }\n}\n```\n\n5 使用snp_remakeConstraints重做约束\n\n```\nsnp_remakeConstraints 与 snp_makeConstraints 用法类似，不同的是 snp_remakeConstraints 首先会先清除掉之前所有被SnapKit设置的约束。\n\n   //重做约束\n        box.snp_remakeConstraints { (make) -> Void in\n            make.width.height.equalTo(100)\n        }\n```\n\n        \n\n","source":"_posts/swift-SnapKit自动布局使用2.md","raw":"---\ntitle: swift-SnapKit自动布局使用2\ntags: \n- swift \n- SnapKit\ncategories: swift\n---\n\n1 保存约束\n\n```\n //保存约束的引用\n var topConstraint:Constraint?\n  \n self.topConstraint = make.top.equalTo(self.view).offset(40).constraint\n```\n    \n2 删除约束\n\n```\n//移除约束\nself.topConstraint?.uninstall()\n```\n        \n3 通过约束的引用来更新约束 updateOffset() \n\n```\n//更新修改约束\nself.topConstraint?.updateOffset(60)\n```\n\n4 使用snp_updateConstraints更新约束\n\n我们还可以用 snp_updateConstraints 方法来代替 snp_makeConstraints 进行约束的更新，这个更新操作通常放在 UIViewController 的 updateViewConstraints() 方法中，或者 UIView 的 updateConstraints() 方法中执行，这样视图约束需要更新的时候会自动调用。\n\n```\n//视图约束更新\n    override func updateViewConstraints() {\n        self.box.snp_updateConstraints{ (make) -> Void in\n            //视图宽度与屏幕等宽\n            make.width.equalTo(self.view)\n        }\n   \n        super.updateViewConstraints()\n    }\n}\n```\n\n5 使用snp_remakeConstraints重做约束\n\n```\nsnp_remakeConstraints 与 snp_makeConstraints 用法类似，不同的是 snp_remakeConstraints 首先会先清除掉之前所有被SnapKit设置的约束。\n\n   //重做约束\n        box.snp_remakeConstraints { (make) -> Void in\n            make.width.height.equalTo(100)\n        }\n```\n\n        \n\n","slug":"swift-SnapKit自动布局使用2","published":1,"date":"2016-06-25T02:13:33.000Z","updated":"2016-06-25T02:20:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kiq00108u4i1ahcjqpd","content":"<p>1 保存约束</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//保存约束的引用</span><br><span class=\"line\">var topConstraint:Constraint?</span><br><span class=\"line\"> </span><br><span class=\"line\">self.topConstraint = make.top.equalTo(self.view).offset(40).constraint</span><br></pre></td></tr></table></figure>\n<p>2 删除约束</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//移除约束</span><br><span class=\"line\">self.topConstraint?.uninstall()</span><br></pre></td></tr></table></figure>\n<p>3 通过约束的引用来更新约束 updateOffset() </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//更新修改约束</span><br><span class=\"line\">self.topConstraint?.updateOffset(60)</span><br></pre></td></tr></table></figure>\n<p>4 使用snp_updateConstraints更新约束</p>\n<p>我们还可以用 snp_updateConstraints 方法来代替 snp_makeConstraints 进行约束的更新，这个更新操作通常放在 UIViewController 的 updateViewConstraints() 方法中，或者 UIView 的 updateConstraints() 方法中执行，这样视图约束需要更新的时候会自动调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//视图约束更新</span><br><span class=\"line\">    override func updateViewConstraints() &#123;</span><br><span class=\"line\">        self.box.snp_updateConstraints&#123; (make) -&gt; Void in</span><br><span class=\"line\">            //视图宽度与屏幕等宽</span><br><span class=\"line\">            make.width.equalTo(self.view)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">        super.updateViewConstraints()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5 使用snp_remakeConstraints重做约束</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">snp_remakeConstraints 与 snp_makeConstraints 用法类似，不同的是 snp_remakeConstraints 首先会先清除掉之前所有被SnapKit设置的约束。</span><br><span class=\"line\"></span><br><span class=\"line\">   //重做约束</span><br><span class=\"line\">        box.snp_remakeConstraints &#123; (make) -&gt; Void in</span><br><span class=\"line\">            make.width.height.equalTo(100)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>1 保存约束</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//保存约束的引用</span><br><span class=\"line\">var topConstraint:Constraint?</span><br><span class=\"line\"> </span><br><span class=\"line\">self.topConstraint = make.top.equalTo(self.view).offset(40).constraint</span><br></pre></td></tr></table></figure>\n<p>2 删除约束</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//移除约束</span><br><span class=\"line\">self.topConstraint?.uninstall()</span><br></pre></td></tr></table></figure>\n<p>3 通过约束的引用来更新约束 updateOffset() </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//更新修改约束</span><br><span class=\"line\">self.topConstraint?.updateOffset(60)</span><br></pre></td></tr></table></figure>\n<p>4 使用snp_updateConstraints更新约束</p>\n<p>我们还可以用 snp_updateConstraints 方法来代替 snp_makeConstraints 进行约束的更新，这个更新操作通常放在 UIViewController 的 updateViewConstraints() 方法中，或者 UIView 的 updateConstraints() 方法中执行，这样视图约束需要更新的时候会自动调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//视图约束更新</span><br><span class=\"line\">    override func updateViewConstraints() &#123;</span><br><span class=\"line\">        self.box.snp_updateConstraints&#123; (make) -&gt; Void in</span><br><span class=\"line\">            //视图宽度与屏幕等宽</span><br><span class=\"line\">            make.width.equalTo(self.view)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">        super.updateViewConstraints()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5 使用snp_remakeConstraints重做约束</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">snp_remakeConstraints 与 snp_makeConstraints 用法类似，不同的是 snp_remakeConstraints 首先会先清除掉之前所有被SnapKit设置的约束。</span><br><span class=\"line\"></span><br><span class=\"line\">   //重做约束</span><br><span class=\"line\">        box.snp_remakeConstraints &#123; (make) -&gt; Void in</span><br><span class=\"line\">            make.width.height.equalTo(100)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"swift-SnapKit自动布局使用1","_content":"swift自动布局库SnapKit使用详解1\nSnapKit 前身是Masonry（一个oc版本的布局库）\n\n1 安装\n\nSnapKit github地址 https://github.com/SnapKit/SnapKit\n\n可以通过Cocoapods 安装\n在Podfile中加入\n\n```\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '8.0'\nuse_frameworks!\npod 'SnapKit'\n```\n然后在终端项目目录下输入\n\n```\npod install\n```\n\n2 SnapKit的使用方法\nsnp_makeConstraints 来添加view的约束\n\n* 边距，宽，高，左上右下，基准线。\n* 修正位移（inset，offset）\n* 倍率修正（multipliedBy）\n\n注意： 使用 snp_makeConstraints 方法的元素必须事先添加到父元素的中，例如：self.view.addSubview(view)\n\n\n* .equalTo: 等于\n* .lessThanOrEqualTo: 小于等于\n* .greaterThanOrEqualTo: 大于等于\n\n3 约束条件参数支持如下三种类型：\n\n（1）视图属性（ViewAttribute）\n\n```\n//使当前视图对象的中心x坐标小于等于视图view2的左边的x坐标\nmake.centerX.lessThanOrEqualTo(view2.snp_left)\n```\n（2）视图关系（UIView/NSView） \n\n```\n比如想让view.left 大于等于 label.left：\n\nmake.left.greaterThanOrEqualTo(label)\n这个其实等价于：\n\nmake.left.greaterThanOrEqualTo(label.snp_left)\n```\n\n（3）严格检测（Strick Checks）\n\n```\n比如将宽度和高度属性设置为常量值：\nmake.height.equalTo(20)\nmake.width.equalTo(20)\nmake.top.equalTo(42)\n```\n\n4 给视图的各种属性设置约束\n\n（1）width、height属性\n\n```\n自动布局允许宽度、高度设置为常量值。\n\nmake.height.equalTo(20)\nmake.width.equalTo(self.buttonSize.width)\n//当前视图与label的顶部齐平\nmake.top.equalTo(label.snp_top)\n```\n\n（2） left、right、top、centerX、centerY等其他属性\n\n```\n这些属性直接设置常量值，表示他们相对于父容器的相对约束条件。\n\n当然也可以使用与其他视图的关系来添加约束。\n```\n\n（3）edges(边缘）\n\n```\n//让当前视图 的 上下左右(top,left,bottom,right) 等于 view2\nmake.edges.equalTo(view2)\n```\n\n（4）size(尺寸）\n\n```\n//当前视图宽高 >= titleLabel\nmake.size.greaterThanOrEqualTo(titleLabel)\n```\n\n（5）center(中心）\n\n```\n//当前视图与 button1中心相同 （centerX 和 centerY）\nmake.center.equalTo(button1)\n```\n\n5 位移修正与倍率修正\n\n（1）内位移修正：inset\n\n```\n视图view，它距离父视图上、左、下、右边距分别是10、15、20、25\n\nmake.edges.equalTo(boxOutter).inset(UIEdgeInsetsMake(10, 15, 20, 25))\n上面边距的偏移设置实际上相当于如下形式：\n\nmake.top.equalTo(boxOutter).offset(10)\nmake.left.equalTo(boxOutter).offset(15)\nmake.bottom.equalTo(boxOutter).offset(-20)\nmake.right.equalTo(boxOutter).offset(-25)\n```\n\n（2）外位移修正：offset \n\n```\n视图比视图宽度加50，高度减50。\nmake.size.equalTo(boxOutter).offset(CGSizeMake(50, -50))\n```\n\n（3）倍率修正：multipliedBy \n\n```\n视图的尺寸设置成视图一半大小。\nmake.size.equalTo(boxOutter).multipliedBy(0.5)\n ```\n","source":"_posts/swift-SnapKit自动布局使用1.md","raw":"---\ntitle: swift-SnapKit自动布局使用1\ntags: \n- swift \n- SnapKit\ncategories: swift\n---\nswift自动布局库SnapKit使用详解1\nSnapKit 前身是Masonry（一个oc版本的布局库）\n\n1 安装\n\nSnapKit github地址 https://github.com/SnapKit/SnapKit\n\n可以通过Cocoapods 安装\n在Podfile中加入\n\n```\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '8.0'\nuse_frameworks!\npod 'SnapKit'\n```\n然后在终端项目目录下输入\n\n```\npod install\n```\n\n2 SnapKit的使用方法\nsnp_makeConstraints 来添加view的约束\n\n* 边距，宽，高，左上右下，基准线。\n* 修正位移（inset，offset）\n* 倍率修正（multipliedBy）\n\n注意： 使用 snp_makeConstraints 方法的元素必须事先添加到父元素的中，例如：self.view.addSubview(view)\n\n\n* .equalTo: 等于\n* .lessThanOrEqualTo: 小于等于\n* .greaterThanOrEqualTo: 大于等于\n\n3 约束条件参数支持如下三种类型：\n\n（1）视图属性（ViewAttribute）\n\n```\n//使当前视图对象的中心x坐标小于等于视图view2的左边的x坐标\nmake.centerX.lessThanOrEqualTo(view2.snp_left)\n```\n（2）视图关系（UIView/NSView） \n\n```\n比如想让view.left 大于等于 label.left：\n\nmake.left.greaterThanOrEqualTo(label)\n这个其实等价于：\n\nmake.left.greaterThanOrEqualTo(label.snp_left)\n```\n\n（3）严格检测（Strick Checks）\n\n```\n比如将宽度和高度属性设置为常量值：\nmake.height.equalTo(20)\nmake.width.equalTo(20)\nmake.top.equalTo(42)\n```\n\n4 给视图的各种属性设置约束\n\n（1）width、height属性\n\n```\n自动布局允许宽度、高度设置为常量值。\n\nmake.height.equalTo(20)\nmake.width.equalTo(self.buttonSize.width)\n//当前视图与label的顶部齐平\nmake.top.equalTo(label.snp_top)\n```\n\n（2） left、right、top、centerX、centerY等其他属性\n\n```\n这些属性直接设置常量值，表示他们相对于父容器的相对约束条件。\n\n当然也可以使用与其他视图的关系来添加约束。\n```\n\n（3）edges(边缘）\n\n```\n//让当前视图 的 上下左右(top,left,bottom,right) 等于 view2\nmake.edges.equalTo(view2)\n```\n\n（4）size(尺寸）\n\n```\n//当前视图宽高 >= titleLabel\nmake.size.greaterThanOrEqualTo(titleLabel)\n```\n\n（5）center(中心）\n\n```\n//当前视图与 button1中心相同 （centerX 和 centerY）\nmake.center.equalTo(button1)\n```\n\n5 位移修正与倍率修正\n\n（1）内位移修正：inset\n\n```\n视图view，它距离父视图上、左、下、右边距分别是10、15、20、25\n\nmake.edges.equalTo(boxOutter).inset(UIEdgeInsetsMake(10, 15, 20, 25))\n上面边距的偏移设置实际上相当于如下形式：\n\nmake.top.equalTo(boxOutter).offset(10)\nmake.left.equalTo(boxOutter).offset(15)\nmake.bottom.equalTo(boxOutter).offset(-20)\nmake.right.equalTo(boxOutter).offset(-25)\n```\n\n（2）外位移修正：offset \n\n```\n视图比视图宽度加50，高度减50。\nmake.size.equalTo(boxOutter).offset(CGSizeMake(50, -50))\n```\n\n（3）倍率修正：multipliedBy \n\n```\n视图的尺寸设置成视图一半大小。\nmake.size.equalTo(boxOutter).multipliedBy(0.5)\n ```\n","slug":"swift-SnapKit自动布局使用1","published":1,"date":"2016-06-24T08:53:26.000Z","updated":"2016-06-25T02:12:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kiz00148u4ic7drn17f","content":"<p>swift自动布局库SnapKit使用详解1<br>SnapKit 前身是Masonry（一个oc版本的布局库）</p>\n<p>1 安装</p>\n<p>SnapKit github地址 <a href=\"https://github.com/SnapKit/SnapKit\" target=\"_blank\" rel=\"external\">https://github.com/SnapKit/SnapKit</a></p>\n<p>可以通过Cocoapods 安装<br>在Podfile中加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &apos;https://github.com/CocoaPods/Specs.git&apos;</span><br><span class=\"line\">platform :ios, &apos;8.0&apos;</span><br><span class=\"line\">use_frameworks!</span><br><span class=\"line\">pod &apos;SnapKit&apos;</span><br></pre></td></tr></table></figure>\n<p>然后在终端项目目录下输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod install</span><br></pre></td></tr></table></figure>\n<p>2 SnapKit的使用方法<br>snp_makeConstraints 来添加view的约束</p>\n<ul>\n<li>边距，宽，高，左上右下，基准线。</li>\n<li>修正位移（inset，offset）</li>\n<li>倍率修正（multipliedBy）</li>\n</ul>\n<p>注意： 使用 snp_makeConstraints 方法的元素必须事先添加到父元素的中，例如：self.view.addSubview(view)</p>\n<ul>\n<li>.equalTo: 等于</li>\n<li>.lessThanOrEqualTo: 小于等于</li>\n<li>.greaterThanOrEqualTo: 大于等于</li>\n</ul>\n<p>3 约束条件参数支持如下三种类型：</p>\n<p>（1）视图属性（ViewAttribute）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使当前视图对象的中心x坐标小于等于视图view2的左边的x坐标</span><br><span class=\"line\">make.centerX.lessThanOrEqualTo(view2.snp_left)</span><br></pre></td></tr></table></figure>\n<p>（2）视图关系（UIView/NSView） </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">比如想让view.left 大于等于 label.left：</span><br><span class=\"line\"></span><br><span class=\"line\">make.left.greaterThanOrEqualTo(label)</span><br><span class=\"line\">这个其实等价于：</span><br><span class=\"line\"></span><br><span class=\"line\">make.left.greaterThanOrEqualTo(label.snp_left)</span><br></pre></td></tr></table></figure>\n<p>（3）严格检测（Strick Checks）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">比如将宽度和高度属性设置为常量值：</span><br><span class=\"line\">make.height.equalTo(20)</span><br><span class=\"line\">make.width.equalTo(20)</span><br><span class=\"line\">make.top.equalTo(42)</span><br></pre></td></tr></table></figure>\n<p>4 给视图的各种属性设置约束</p>\n<p>（1）width、height属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自动布局允许宽度、高度设置为常量值。</span><br><span class=\"line\"></span><br><span class=\"line\">make.height.equalTo(20)</span><br><span class=\"line\">make.width.equalTo(self.buttonSize.width)</span><br><span class=\"line\">//当前视图与label的顶部齐平</span><br><span class=\"line\">make.top.equalTo(label.snp_top)</span><br></pre></td></tr></table></figure>\n<p>（2） left、right、top、centerX、centerY等其他属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这些属性直接设置常量值，表示他们相对于父容器的相对约束条件。</span><br><span class=\"line\"></span><br><span class=\"line\">当然也可以使用与其他视图的关系来添加约束。</span><br></pre></td></tr></table></figure>\n<p>（3）edges(边缘）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//让当前视图 的 上下左右(top,left,bottom,right) 等于 view2</span><br><span class=\"line\">make.edges.equalTo(view2)</span><br></pre></td></tr></table></figure>\n<p>（4）size(尺寸）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//当前视图宽高 &gt;= titleLabel</span><br><span class=\"line\">make.size.greaterThanOrEqualTo(titleLabel)</span><br></pre></td></tr></table></figure>\n<p>（5）center(中心）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//当前视图与 button1中心相同 （centerX 和 centerY）</span><br><span class=\"line\">make.center.equalTo(button1)</span><br></pre></td></tr></table></figure>\n<p>5 位移修正与倍率修正</p>\n<p>（1）内位移修正：inset</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">视图view，它距离父视图上、左、下、右边距分别是10、15、20、25</span><br><span class=\"line\"></span><br><span class=\"line\">make.edges.equalTo(boxOutter).inset(UIEdgeInsetsMake(10, 15, 20, 25))</span><br><span class=\"line\">上面边距的偏移设置实际上相当于如下形式：</span><br><span class=\"line\"></span><br><span class=\"line\">make.top.equalTo(boxOutter).offset(10)</span><br><span class=\"line\">make.left.equalTo(boxOutter).offset(15)</span><br><span class=\"line\">make.bottom.equalTo(boxOutter).offset(-20)</span><br><span class=\"line\">make.right.equalTo(boxOutter).offset(-25)</span><br></pre></td></tr></table></figure>\n<p>（2）外位移修正：offset </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">视图比视图宽度加50，高度减50。</span><br><span class=\"line\">make.size.equalTo(boxOutter).offset(CGSizeMake(50, -50))</span><br></pre></td></tr></table></figure>\n<p>（3）倍率修正：multipliedBy </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">视图的尺寸设置成视图一半大小。</span><br><span class=\"line\">make.size.equalTo(boxOutter).multipliedBy(0.5)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>swift自动布局库SnapKit使用详解1<br>SnapKit 前身是Masonry（一个oc版本的布局库）</p>\n<p>1 安装</p>\n<p>SnapKit github地址 <a href=\"https://github.com/SnapKit/SnapKit\">https://github.com/SnapKit/SnapKit</a></p>\n<p>可以通过Cocoapods 安装<br>在Podfile中加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &apos;https://github.com/CocoaPods/Specs.git&apos;</span><br><span class=\"line\">platform :ios, &apos;8.0&apos;</span><br><span class=\"line\">use_frameworks!</span><br><span class=\"line\">pod &apos;SnapKit&apos;</span><br></pre></td></tr></table></figure>\n<p>然后在终端项目目录下输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod install</span><br></pre></td></tr></table></figure>\n<p>2 SnapKit的使用方法<br>snp_makeConstraints 来添加view的约束</p>\n<ul>\n<li>边距，宽，高，左上右下，基准线。</li>\n<li>修正位移（inset，offset）</li>\n<li>倍率修正（multipliedBy）</li>\n</ul>\n<p>注意： 使用 snp_makeConstraints 方法的元素必须事先添加到父元素的中，例如：self.view.addSubview(view)</p>\n<ul>\n<li>.equalTo: 等于</li>\n<li>.lessThanOrEqualTo: 小于等于</li>\n<li>.greaterThanOrEqualTo: 大于等于</li>\n</ul>\n<p>3 约束条件参数支持如下三种类型：</p>\n<p>（1）视图属性（ViewAttribute）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使当前视图对象的中心x坐标小于等于视图view2的左边的x坐标</span><br><span class=\"line\">make.centerX.lessThanOrEqualTo(view2.snp_left)</span><br></pre></td></tr></table></figure>\n<p>（2）视图关系（UIView/NSView） </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">比如想让view.left 大于等于 label.left：</span><br><span class=\"line\"></span><br><span class=\"line\">make.left.greaterThanOrEqualTo(label)</span><br><span class=\"line\">这个其实等价于：</span><br><span class=\"line\"></span><br><span class=\"line\">make.left.greaterThanOrEqualTo(label.snp_left)</span><br></pre></td></tr></table></figure>\n<p>（3）严格检测（Strick Checks）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">比如将宽度和高度属性设置为常量值：</span><br><span class=\"line\">make.height.equalTo(20)</span><br><span class=\"line\">make.width.equalTo(20)</span><br><span class=\"line\">make.top.equalTo(42)</span><br></pre></td></tr></table></figure>\n<p>4 给视图的各种属性设置约束</p>\n<p>（1）width、height属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自动布局允许宽度、高度设置为常量值。</span><br><span class=\"line\"></span><br><span class=\"line\">make.height.equalTo(20)</span><br><span class=\"line\">make.width.equalTo(self.buttonSize.width)</span><br><span class=\"line\">//当前视图与label的顶部齐平</span><br><span class=\"line\">make.top.equalTo(label.snp_top)</span><br></pre></td></tr></table></figure>\n<p>（2） left、right、top、centerX、centerY等其他属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这些属性直接设置常量值，表示他们相对于父容器的相对约束条件。</span><br><span class=\"line\"></span><br><span class=\"line\">当然也可以使用与其他视图的关系来添加约束。</span><br></pre></td></tr></table></figure>\n<p>（3）edges(边缘）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//让当前视图 的 上下左右(top,left,bottom,right) 等于 view2</span><br><span class=\"line\">make.edges.equalTo(view2)</span><br></pre></td></tr></table></figure>\n<p>（4）size(尺寸）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//当前视图宽高 &gt;= titleLabel</span><br><span class=\"line\">make.size.greaterThanOrEqualTo(titleLabel)</span><br></pre></td></tr></table></figure>\n<p>（5）center(中心）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//当前视图与 button1中心相同 （centerX 和 centerY）</span><br><span class=\"line\">make.center.equalTo(button1)</span><br></pre></td></tr></table></figure>\n<p>5 位移修正与倍率修正</p>\n<p>（1）内位移修正：inset</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">视图view，它距离父视图上、左、下、右边距分别是10、15、20、25</span><br><span class=\"line\"></span><br><span class=\"line\">make.edges.equalTo(boxOutter).inset(UIEdgeInsetsMake(10, 15, 20, 25))</span><br><span class=\"line\">上面边距的偏移设置实际上相当于如下形式：</span><br><span class=\"line\"></span><br><span class=\"line\">make.top.equalTo(boxOutter).offset(10)</span><br><span class=\"line\">make.left.equalTo(boxOutter).offset(15)</span><br><span class=\"line\">make.bottom.equalTo(boxOutter).offset(-20)</span><br><span class=\"line\">make.right.equalTo(boxOutter).offset(-25)</span><br></pre></td></tr></table></figure>\n<p>（2）外位移修正：offset </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">视图比视图宽度加50，高度减50。</span><br><span class=\"line\">make.size.equalTo(boxOutter).offset(CGSizeMake(50, -50))</span><br></pre></td></tr></table></figure>\n<p>（3）倍率修正：multipliedBy </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">视图的尺寸设置成视图一半大小。</span><br><span class=\"line\">make.size.equalTo(boxOutter).multipliedBy(0.5)</span><br></pre></td></tr></table></figure>\n"},{"title":"第三方库学习","_content":"\n# 第三方库\n使用cocoapods\n\n必须用以下格式写Podfile文件\n\n``` \nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '9.0'\nuse_frameworks!\n\ntarget 'ProjectName' do\n    pod 'ThreeLibName'\nend\n```\n\n使用swfit必须加上\n\n```\nuse_frameworks!\n```\n\n## 刷新控件\n### MJrefresh\n## 图表控件\n### ios-Echarts\n\n是用oc写的一个基于百度推出的js版本的echarts而写的一个ios版本\n\n[ios-echarts](https://github.com/Pluto-Y/iOS-Echarts)\n\n##### 支持以下图表 #####\n* 柱状图\n* 散点图\n* 饼状图\n* K线图\n* 折线图\n\njs版本的[echats](https://github.com/ecomfe/echarts)\n\n还可访问一个百度的js程序员张雯莉。\n\ngithub地址[Ovilia](http://github.com/Ovilia)\n### PNchart\n一个oc的图表，比较简单实用，不如[ios-echarts](https://github.com/Pluto-Y/iOS-Echarts)丰富。\n\n### ios-charts\n一个用swift写的图标库。\n[ios-carhts](https://github.com/danielgindi/Charts)\n还有一个android版本的\n[MPAndroidChart](https://github.com/PhilJay/MPAndroidChart)\n### 特效,special effects,文本\n一个UILable的第三方特效控件。\n[LTMorphingLabel](https://github.com/lexrus/LTMorphingLabel)\n\n### ios热更新代码 JSPatch 非常好用\n\n[JSPatch](http://www.jspatch.com/) \n\ngihub地址[JSPatch](https://github.com/bang590/JSPatch)\n### android 热更新\n\n百度的热更新[HotFix](https://github.com/dodola/HotFix)\n\n阿里巴巴的热更新[AndFix](https://github.com/alibaba/AndFix)\n\n点评的热更新[Nuwa](https://github.com/jasonross/Nuwa)\n\n\n\n\n\n\n\n\n","source":"_posts/第三方库.md","raw":"---\ntitle: 第三方库学习\ntags: ios\ncategories: ios\n---\n\n# 第三方库\n使用cocoapods\n\n必须用以下格式写Podfile文件\n\n``` \nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '9.0'\nuse_frameworks!\n\ntarget 'ProjectName' do\n    pod 'ThreeLibName'\nend\n```\n\n使用swfit必须加上\n\n```\nuse_frameworks!\n```\n\n## 刷新控件\n### MJrefresh\n## 图表控件\n### ios-Echarts\n\n是用oc写的一个基于百度推出的js版本的echarts而写的一个ios版本\n\n[ios-echarts](https://github.com/Pluto-Y/iOS-Echarts)\n\n##### 支持以下图表 #####\n* 柱状图\n* 散点图\n* 饼状图\n* K线图\n* 折线图\n\njs版本的[echats](https://github.com/ecomfe/echarts)\n\n还可访问一个百度的js程序员张雯莉。\n\ngithub地址[Ovilia](http://github.com/Ovilia)\n### PNchart\n一个oc的图表，比较简单实用，不如[ios-echarts](https://github.com/Pluto-Y/iOS-Echarts)丰富。\n\n### ios-charts\n一个用swift写的图标库。\n[ios-carhts](https://github.com/danielgindi/Charts)\n还有一个android版本的\n[MPAndroidChart](https://github.com/PhilJay/MPAndroidChart)\n### 特效,special effects,文本\n一个UILable的第三方特效控件。\n[LTMorphingLabel](https://github.com/lexrus/LTMorphingLabel)\n\n### ios热更新代码 JSPatch 非常好用\n\n[JSPatch](http://www.jspatch.com/) \n\ngihub地址[JSPatch](https://github.com/bang590/JSPatch)\n### android 热更新\n\n百度的热更新[HotFix](https://github.com/dodola/HotFix)\n\n阿里巴巴的热更新[AndFix](https://github.com/alibaba/AndFix)\n\n点评的热更新[Nuwa](https://github.com/jasonross/Nuwa)\n\n\n\n\n\n\n\n\n","slug":"第三方库","published":1,"date":"2016-06-21T01:11:04.000Z","updated":"2016-06-23T16:15:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kj200178u4ir1vyuvr9","content":"<h1 id=\"第三方库\"><a href=\"#第三方库\" class=\"headerlink\" title=\"第三方库\"></a>第三方库</h1><p>使用cocoapods</p>\n<p>必须用以下格式写Podfile文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &apos;https://github.com/CocoaPods/Specs.git&apos;</span><br><span class=\"line\">platform :ios, &apos;9.0&apos;</span><br><span class=\"line\">use_frameworks!</span><br><span class=\"line\"></span><br><span class=\"line\">target &apos;ProjectName&apos; do</span><br><span class=\"line\">    pod &apos;ThreeLibName&apos;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>使用swfit必须加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use_frameworks!</span><br></pre></td></tr></table></figure>\n<h2 id=\"刷新控件\"><a href=\"#刷新控件\" class=\"headerlink\" title=\"刷新控件\"></a>刷新控件</h2><h3 id=\"MJrefresh\"><a href=\"#MJrefresh\" class=\"headerlink\" title=\"MJrefresh\"></a>MJrefresh</h3><h2 id=\"图表控件\"><a href=\"#图表控件\" class=\"headerlink\" title=\"图表控件\"></a>图表控件</h2><h3 id=\"ios-Echarts\"><a href=\"#ios-Echarts\" class=\"headerlink\" title=\"ios-Echarts\"></a>ios-Echarts</h3><p>是用oc写的一个基于百度推出的js版本的echarts而写的一个ios版本</p>\n<p><a href=\"https://github.com/Pluto-Y/iOS-Echarts\" target=\"_blank\" rel=\"external\">ios-echarts</a></p>\n<h5 id=\"支持以下图表\"><a href=\"#支持以下图表\" class=\"headerlink\" title=\"支持以下图表\"></a>支持以下图表</h5><ul>\n<li>柱状图</li>\n<li>散点图</li>\n<li>饼状图</li>\n<li>K线图</li>\n<li>折线图</li>\n</ul>\n<p>js版本的<a href=\"https://github.com/ecomfe/echarts\" target=\"_blank\" rel=\"external\">echats</a></p>\n<p>还可访问一个百度的js程序员张雯莉。</p>\n<p>github地址<a href=\"http://github.com/Ovilia\" target=\"_blank\" rel=\"external\">Ovilia</a></p>\n<h3 id=\"PNchart\"><a href=\"#PNchart\" class=\"headerlink\" title=\"PNchart\"></a>PNchart</h3><p>一个oc的图表，比较简单实用，不如<a href=\"https://github.com/Pluto-Y/iOS-Echarts\" target=\"_blank\" rel=\"external\">ios-echarts</a>丰富。</p>\n<h3 id=\"ios-charts\"><a href=\"#ios-charts\" class=\"headerlink\" title=\"ios-charts\"></a>ios-charts</h3><p>一个用swift写的图标库。<br><a href=\"https://github.com/danielgindi/Charts\" target=\"_blank\" rel=\"external\">ios-carhts</a><br>还有一个android版本的<br><a href=\"https://github.com/PhilJay/MPAndroidChart\" target=\"_blank\" rel=\"external\">MPAndroidChart</a></p>\n<h3 id=\"特效-special-effects-文本\"><a href=\"#特效-special-effects-文本\" class=\"headerlink\" title=\"特效,special effects,文本\"></a>特效,special effects,文本</h3><p>一个UILable的第三方特效控件。<br><a href=\"https://github.com/lexrus/LTMorphingLabel\" target=\"_blank\" rel=\"external\">LTMorphingLabel</a></p>\n<h3 id=\"ios热更新代码-JSPatch-非常好用\"><a href=\"#ios热更新代码-JSPatch-非常好用\" class=\"headerlink\" title=\"ios热更新代码 JSPatch 非常好用\"></a>ios热更新代码 JSPatch 非常好用</h3><p><a href=\"http://www.jspatch.com/\" target=\"_blank\" rel=\"external\">JSPatch</a> </p>\n<p>gihub地址<a href=\"https://github.com/bang590/JSPatch\" target=\"_blank\" rel=\"external\">JSPatch</a></p>\n<h3 id=\"android-热更新\"><a href=\"#android-热更新\" class=\"headerlink\" title=\"android 热更新\"></a>android 热更新</h3><p>百度的热更新<a href=\"https://github.com/dodola/HotFix\" target=\"_blank\" rel=\"external\">HotFix</a></p>\n<p>阿里巴巴的热更新<a href=\"https://github.com/alibaba/AndFix\" target=\"_blank\" rel=\"external\">AndFix</a></p>\n<p>点评的热更新<a href=\"https://github.com/jasonross/Nuwa\" target=\"_blank\" rel=\"external\">Nuwa</a></p>\n","excerpt":"","more":"<h1 id=\"第三方库\"><a href=\"#第三方库\" class=\"headerlink\" title=\"第三方库\"></a>第三方库</h1><p>使用cocoapods</p>\n<p>必须用以下格式写Podfile文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &apos;https://github.com/CocoaPods/Specs.git&apos;</span><br><span class=\"line\">platform :ios, &apos;9.0&apos;</span><br><span class=\"line\">use_frameworks!</span><br><span class=\"line\"></span><br><span class=\"line\">target &apos;ProjectName&apos; do</span><br><span class=\"line\">    pod &apos;ThreeLibName&apos;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>使用swfit必须加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use_frameworks!</span><br></pre></td></tr></table></figure>\n<h2 id=\"刷新控件\"><a href=\"#刷新控件\" class=\"headerlink\" title=\"刷新控件\"></a>刷新控件</h2><h3 id=\"MJrefresh\"><a href=\"#MJrefresh\" class=\"headerlink\" title=\"MJrefresh\"></a>MJrefresh</h3><h2 id=\"图表控件\"><a href=\"#图表控件\" class=\"headerlink\" title=\"图表控件\"></a>图表控件</h2><h3 id=\"ios-Echarts\"><a href=\"#ios-Echarts\" class=\"headerlink\" title=\"ios-Echarts\"></a>ios-Echarts</h3><p>是用oc写的一个基于百度推出的js版本的echarts而写的一个ios版本</p>\n<p><a href=\"https://github.com/Pluto-Y/iOS-Echarts\">ios-echarts</a></p>\n<h5 id=\"支持以下图表\"><a href=\"#支持以下图表\" class=\"headerlink\" title=\"支持以下图表\"></a>支持以下图表</h5><ul>\n<li>柱状图</li>\n<li>散点图</li>\n<li>饼状图</li>\n<li>K线图</li>\n<li>折线图</li>\n</ul>\n<p>js版本的<a href=\"https://github.com/ecomfe/echarts\">echats</a></p>\n<p>还可访问一个百度的js程序员张雯莉。</p>\n<p>github地址<a href=\"http://github.com/Ovilia\">Ovilia</a></p>\n<h3 id=\"PNchart\"><a href=\"#PNchart\" class=\"headerlink\" title=\"PNchart\"></a>PNchart</h3><p>一个oc的图表，比较简单实用，不如<a href=\"https://github.com/Pluto-Y/iOS-Echarts\">ios-echarts</a>丰富。</p>\n<h3 id=\"ios-charts\"><a href=\"#ios-charts\" class=\"headerlink\" title=\"ios-charts\"></a>ios-charts</h3><p>一个用swift写的图标库。<br><a href=\"https://github.com/danielgindi/Charts\">ios-carhts</a><br>还有一个android版本的<br><a href=\"https://github.com/PhilJay/MPAndroidChart\">MPAndroidChart</a></p>\n<h3 id=\"特效-special-effects-文本\"><a href=\"#特效-special-effects-文本\" class=\"headerlink\" title=\"特效,special effects,文本\"></a>特效,special effects,文本</h3><p>一个UILable的第三方特效控件。<br><a href=\"https://github.com/lexrus/LTMorphingLabel\">LTMorphingLabel</a></p>\n<h3 id=\"ios热更新代码-JSPatch-非常好用\"><a href=\"#ios热更新代码-JSPatch-非常好用\" class=\"headerlink\" title=\"ios热更新代码 JSPatch 非常好用\"></a>ios热更新代码 JSPatch 非常好用</h3><p><a href=\"http://www.jspatch.com/\">JSPatch</a> </p>\n<p>gihub地址<a href=\"https://github.com/bang590/JSPatch\">JSPatch</a></p>\n<h3 id=\"android-热更新\"><a href=\"#android-热更新\" class=\"headerlink\" title=\"android 热更新\"></a>android 热更新</h3><p>百度的热更新<a href=\"https://github.com/dodola/HotFix\">HotFix</a></p>\n<p>阿里巴巴的热更新<a href=\"https://github.com/alibaba/AndFix\">AndFix</a></p>\n<p>点评的热更新<a href=\"https://github.com/jasonross/Nuwa\">Nuwa</a></p>\n"},{"title":"按钮（UIButton）的用法","_content":"\n按钮（UIButton）的用法\n\n1，按钮的创建\n\n（1）按钮有下面四种类型：\n\n```\n\tUIButtonType.ContactAdd：前面带“+”图标按钮，默认文字颜色为蓝色，有触摸时的高亮效果\n\tUIButtonType.DetailDisclosure：前面带“!”图标按钮，默认文字颜色为蓝色，有触摸时的高亮效果\n\tUIButtonType.System：前面不带图标，默认文字颜色为蓝色，有触摸时的高亮效果\n\tUIButtonType.Custom：定制按钮，前面不带图标，默认文字颜色为白色，无触摸时的高亮效果\n\tUIButtonType.InfoDark：为感叹号“!”圆形按钮\n\tUIButtonType.InfoLight：为感叹号“!”圆形按钮\n```\n\t\n```\n//创建一个ContactAdd类型的按钮\nlet button:UIButton = UIButton(type:.ContactAdd)\n//设置按钮位置和大小\nbutton.frame=CGRectMake(10, 150, 100, 30)\n//设置按钮文字\nbutton.setTitle(\"按钮\", forState:UIControlState.Normal)\nself.view.addSubview(button);\n\n```\n\n（2）对于Custom定制类型按钮，代码可简化为：\n\n```\nlet button = UIButton(frame:CGRectMake(10, 150, 100, 30))\n```\n\n2，按钮的文字设置\n\n```\nbutton.setTitle(\"普通状态\", forState:UIControlState.Normal) //普通状态下的文字\nbutton.setTitle(\"触摸状态\", forState:UIControlState.Highlighted) //触摸状态下的文字\nbutton.setTitle(\"禁用状态\", forState:UIControlState.Disabled) //禁用状态下的文字\n```\n\n3，按钮文字颜色的设置\n\n```\nbutton.setTitleColor(UIColor.blackColor(),forState: .Normal) //普通状态下文字的颜色\nbutton.setTitleColor(UIColor.greenColor(),forState: .Highlighted) //触摸状态下文字的颜色\nbutton.setTitleColor(UIColor.grayColor(),forState: .Disabled) //禁用状态下文字的颜色\n```\n\n4，按钮文字阴影颜色的设置\n\n```\nbutton.setTitleShadowColor(UIColor.greenColor(),forState:.Normal) //普通状态下文字阴影的颜色\nbutton.setTitleShadowColor(UIColor.yellowColor(),forState:.Highlighted) //普通状态下文字阴影的颜色\nbutton.setTitleShadowColor(UIColor.grayColor(),forState:.Disabled) //普通状态下文字阴影的颜色\n```\n\n5，按钮背景颜色设置\n\n```\nbutton.backgroundColor=UIColor.blackColor()\n```\n\n6，按钮文字图标的设置\n\n```\nbutton.setImage(UIImage(named:\"icon1\"),forState:.Normal)  //设置图标\nbutton.adjustsImageWhenHighlighted=false //使触摸模式下按钮也不会变暗\nbutton.adjustsImageWhenDisabled=false //使禁用模式下按钮也不会变暗\n\n```\n\n7，设置按钮背景图片\n\n```\nbutton.setBackgroundImage(UIImage(named:\"background1\"),forState:.Normal)\n```\n\n8，按钮触摸点击事件响应\n\n```\n//不传递触摸对象（即点击的按钮）\nbutton.addTarget(self,action:#selector(tapped),forControlEvents:.TouchUpInside)\nfunc tapped(){\n    print(\"tapped\")\n}\n \n//传递触摸对象（即点击的按钮），需要在定义action参数时，方法名称后面带上冒号\nbutton.addTarget(self,action:#selector(tapped(_:)),forControlEvents:.TouchUpInside)\nfunc tapped(button:UIButton){\n    print(button.titleForState(.Normal))\n}\n```\n\n常用的触摸事件类型：\n\n```\nTouchDown：单点触摸按下事件，点触屏幕\nTouchDownRepeat：多点触摸按下事件，点触计数大于1，按下第2、3或第4根手指的时候\nTouchDragInside：触摸在控件内拖动时\nTouchDragOutside：触摸在控件外拖动时\nTouchDragEnter：触摸从控件之外拖动到内部时\nTouchDragExit：触摸从控件内部拖动到外部时\nTouchUpInside：在控件之内触摸并抬起事件\nTouchUpOutside：在控件之外触摸抬起事件\nTouchCancel：触摸取消事件，即一次触摸因为放上太多手指而被取消，或者电话打断\n```","source":"_posts/按钮（UIButton）的用法.md","raw":"---\ntitle: 按钮（UIButton）的用法\ntags: \n- swift\ncategories: swift\n---\n\n按钮（UIButton）的用法\n\n1，按钮的创建\n\n（1）按钮有下面四种类型：\n\n```\n\tUIButtonType.ContactAdd：前面带“+”图标按钮，默认文字颜色为蓝色，有触摸时的高亮效果\n\tUIButtonType.DetailDisclosure：前面带“!”图标按钮，默认文字颜色为蓝色，有触摸时的高亮效果\n\tUIButtonType.System：前面不带图标，默认文字颜色为蓝色，有触摸时的高亮效果\n\tUIButtonType.Custom：定制按钮，前面不带图标，默认文字颜色为白色，无触摸时的高亮效果\n\tUIButtonType.InfoDark：为感叹号“!”圆形按钮\n\tUIButtonType.InfoLight：为感叹号“!”圆形按钮\n```\n\t\n```\n//创建一个ContactAdd类型的按钮\nlet button:UIButton = UIButton(type:.ContactAdd)\n//设置按钮位置和大小\nbutton.frame=CGRectMake(10, 150, 100, 30)\n//设置按钮文字\nbutton.setTitle(\"按钮\", forState:UIControlState.Normal)\nself.view.addSubview(button);\n\n```\n\n（2）对于Custom定制类型按钮，代码可简化为：\n\n```\nlet button = UIButton(frame:CGRectMake(10, 150, 100, 30))\n```\n\n2，按钮的文字设置\n\n```\nbutton.setTitle(\"普通状态\", forState:UIControlState.Normal) //普通状态下的文字\nbutton.setTitle(\"触摸状态\", forState:UIControlState.Highlighted) //触摸状态下的文字\nbutton.setTitle(\"禁用状态\", forState:UIControlState.Disabled) //禁用状态下的文字\n```\n\n3，按钮文字颜色的设置\n\n```\nbutton.setTitleColor(UIColor.blackColor(),forState: .Normal) //普通状态下文字的颜色\nbutton.setTitleColor(UIColor.greenColor(),forState: .Highlighted) //触摸状态下文字的颜色\nbutton.setTitleColor(UIColor.grayColor(),forState: .Disabled) //禁用状态下文字的颜色\n```\n\n4，按钮文字阴影颜色的设置\n\n```\nbutton.setTitleShadowColor(UIColor.greenColor(),forState:.Normal) //普通状态下文字阴影的颜色\nbutton.setTitleShadowColor(UIColor.yellowColor(),forState:.Highlighted) //普通状态下文字阴影的颜色\nbutton.setTitleShadowColor(UIColor.grayColor(),forState:.Disabled) //普通状态下文字阴影的颜色\n```\n\n5，按钮背景颜色设置\n\n```\nbutton.backgroundColor=UIColor.blackColor()\n```\n\n6，按钮文字图标的设置\n\n```\nbutton.setImage(UIImage(named:\"icon1\"),forState:.Normal)  //设置图标\nbutton.adjustsImageWhenHighlighted=false //使触摸模式下按钮也不会变暗\nbutton.adjustsImageWhenDisabled=false //使禁用模式下按钮也不会变暗\n\n```\n\n7，设置按钮背景图片\n\n```\nbutton.setBackgroundImage(UIImage(named:\"background1\"),forState:.Normal)\n```\n\n8，按钮触摸点击事件响应\n\n```\n//不传递触摸对象（即点击的按钮）\nbutton.addTarget(self,action:#selector(tapped),forControlEvents:.TouchUpInside)\nfunc tapped(){\n    print(\"tapped\")\n}\n \n//传递触摸对象（即点击的按钮），需要在定义action参数时，方法名称后面带上冒号\nbutton.addTarget(self,action:#selector(tapped(_:)),forControlEvents:.TouchUpInside)\nfunc tapped(button:UIButton){\n    print(button.titleForState(.Normal))\n}\n```\n\n常用的触摸事件类型：\n\n```\nTouchDown：单点触摸按下事件，点触屏幕\nTouchDownRepeat：多点触摸按下事件，点触计数大于1，按下第2、3或第4根手指的时候\nTouchDragInside：触摸在控件内拖动时\nTouchDragOutside：触摸在控件外拖动时\nTouchDragEnter：触摸从控件之外拖动到内部时\nTouchDragExit：触摸从控件内部拖动到外部时\nTouchUpInside：在控件之内触摸并抬起事件\nTouchUpOutside：在控件之外触摸抬起事件\nTouchCancel：触摸取消事件，即一次触摸因为放上太多手指而被取消，或者电话打断\n```","slug":"按钮（UIButton）的用法","published":1,"date":"2016-06-26T00:49:49.000Z","updated":"2016-06-26T00:50:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kj7001c8u4i2tq6ezg2","content":"<p>按钮（UIButton）的用法</p>\n<p>1，按钮的创建</p>\n<p>（1）按钮有下面四种类型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIButtonType.ContactAdd：前面带“+”图标按钮，默认文字颜色为蓝色，有触摸时的高亮效果</span><br><span class=\"line\">UIButtonType.DetailDisclosure：前面带“!”图标按钮，默认文字颜色为蓝色，有触摸时的高亮效果</span><br><span class=\"line\">UIButtonType.System：前面不带图标，默认文字颜色为蓝色，有触摸时的高亮效果</span><br><span class=\"line\">UIButtonType.Custom：定制按钮，前面不带图标，默认文字颜色为白色，无触摸时的高亮效果</span><br><span class=\"line\">UIButtonType.InfoDark：为感叹号“!”圆形按钮</span><br><span class=\"line\">UIButtonType.InfoLight：为感叹号“!”圆形按钮</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建一个ContactAdd类型的按钮</span><br><span class=\"line\">let button:UIButton = UIButton(type:.ContactAdd)</span><br><span class=\"line\">//设置按钮位置和大小</span><br><span class=\"line\">button.frame=CGRectMake(10, 150, 100, 30)</span><br><span class=\"line\">//设置按钮文字</span><br><span class=\"line\">button.setTitle(&quot;按钮&quot;, forState:UIControlState.Normal)</span><br><span class=\"line\">self.view.addSubview(button);</span><br></pre></td></tr></table></figure>\n<p>（2）对于Custom定制类型按钮，代码可简化为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let button = UIButton(frame:CGRectMake(10, 150, 100, 30))</span><br></pre></td></tr></table></figure>\n<p>2，按钮的文字设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setTitle(&quot;普通状态&quot;, forState:UIControlState.Normal) //普通状态下的文字</span><br><span class=\"line\">button.setTitle(&quot;触摸状态&quot;, forState:UIControlState.Highlighted) //触摸状态下的文字</span><br><span class=\"line\">button.setTitle(&quot;禁用状态&quot;, forState:UIControlState.Disabled) //禁用状态下的文字</span><br></pre></td></tr></table></figure>\n<p>3，按钮文字颜色的设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setTitleColor(UIColor.blackColor(),forState: .Normal) //普通状态下文字的颜色</span><br><span class=\"line\">button.setTitleColor(UIColor.greenColor(),forState: .Highlighted) //触摸状态下文字的颜色</span><br><span class=\"line\">button.setTitleColor(UIColor.grayColor(),forState: .Disabled) //禁用状态下文字的颜色</span><br></pre></td></tr></table></figure>\n<p>4，按钮文字阴影颜色的设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setTitleShadowColor(UIColor.greenColor(),forState:.Normal) //普通状态下文字阴影的颜色</span><br><span class=\"line\">button.setTitleShadowColor(UIColor.yellowColor(),forState:.Highlighted) //普通状态下文字阴影的颜色</span><br><span class=\"line\">button.setTitleShadowColor(UIColor.grayColor(),forState:.Disabled) //普通状态下文字阴影的颜色</span><br></pre></td></tr></table></figure>\n<p>5，按钮背景颜色设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.backgroundColor=UIColor.blackColor()</span><br></pre></td></tr></table></figure>\n<p>6，按钮文字图标的设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setImage(UIImage(named:&quot;icon1&quot;),forState:.Normal)  //设置图标</span><br><span class=\"line\">button.adjustsImageWhenHighlighted=false //使触摸模式下按钮也不会变暗</span><br><span class=\"line\">button.adjustsImageWhenDisabled=false //使禁用模式下按钮也不会变暗</span><br></pre></td></tr></table></figure>\n<p>7，设置按钮背景图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setBackgroundImage(UIImage(named:&quot;background1&quot;),forState:.Normal)</span><br></pre></td></tr></table></figure>\n<p>8，按钮触摸点击事件响应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不传递触摸对象（即点击的按钮）</span><br><span class=\"line\">button.addTarget(self,action:#selector(tapped),forControlEvents:.TouchUpInside)</span><br><span class=\"line\">func tapped()&#123;</span><br><span class=\"line\">    print(&quot;tapped&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//传递触摸对象（即点击的按钮），需要在定义action参数时，方法名称后面带上冒号</span><br><span class=\"line\">button.addTarget(self,action:#selector(tapped(_:)),forControlEvents:.TouchUpInside)</span><br><span class=\"line\">func tapped(button:UIButton)&#123;</span><br><span class=\"line\">    print(button.titleForState(.Normal))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>常用的触摸事件类型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TouchDown：单点触摸按下事件，点触屏幕</span><br><span class=\"line\">TouchDownRepeat：多点触摸按下事件，点触计数大于1，按下第2、3或第4根手指的时候</span><br><span class=\"line\">TouchDragInside：触摸在控件内拖动时</span><br><span class=\"line\">TouchDragOutside：触摸在控件外拖动时</span><br><span class=\"line\">TouchDragEnter：触摸从控件之外拖动到内部时</span><br><span class=\"line\">TouchDragExit：触摸从控件内部拖动到外部时</span><br><span class=\"line\">TouchUpInside：在控件之内触摸并抬起事件</span><br><span class=\"line\">TouchUpOutside：在控件之外触摸抬起事件</span><br><span class=\"line\">TouchCancel：触摸取消事件，即一次触摸因为放上太多手指而被取消，或者电话打断</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>按钮（UIButton）的用法</p>\n<p>1，按钮的创建</p>\n<p>（1）按钮有下面四种类型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIButtonType.ContactAdd：前面带“+”图标按钮，默认文字颜色为蓝色，有触摸时的高亮效果</span><br><span class=\"line\">UIButtonType.DetailDisclosure：前面带“!”图标按钮，默认文字颜色为蓝色，有触摸时的高亮效果</span><br><span class=\"line\">UIButtonType.System：前面不带图标，默认文字颜色为蓝色，有触摸时的高亮效果</span><br><span class=\"line\">UIButtonType.Custom：定制按钮，前面不带图标，默认文字颜色为白色，无触摸时的高亮效果</span><br><span class=\"line\">UIButtonType.InfoDark：为感叹号“!”圆形按钮</span><br><span class=\"line\">UIButtonType.InfoLight：为感叹号“!”圆形按钮</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建一个ContactAdd类型的按钮</span><br><span class=\"line\">let button:UIButton = UIButton(type:.ContactAdd)</span><br><span class=\"line\">//设置按钮位置和大小</span><br><span class=\"line\">button.frame=CGRectMake(10, 150, 100, 30)</span><br><span class=\"line\">//设置按钮文字</span><br><span class=\"line\">button.setTitle(&quot;按钮&quot;, forState:UIControlState.Normal)</span><br><span class=\"line\">self.view.addSubview(button);</span><br></pre></td></tr></table></figure>\n<p>（2）对于Custom定制类型按钮，代码可简化为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let button = UIButton(frame:CGRectMake(10, 150, 100, 30))</span><br></pre></td></tr></table></figure>\n<p>2，按钮的文字设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setTitle(&quot;普通状态&quot;, forState:UIControlState.Normal) //普通状态下的文字</span><br><span class=\"line\">button.setTitle(&quot;触摸状态&quot;, forState:UIControlState.Highlighted) //触摸状态下的文字</span><br><span class=\"line\">button.setTitle(&quot;禁用状态&quot;, forState:UIControlState.Disabled) //禁用状态下的文字</span><br></pre></td></tr></table></figure>\n<p>3，按钮文字颜色的设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setTitleColor(UIColor.blackColor(),forState: .Normal) //普通状态下文字的颜色</span><br><span class=\"line\">button.setTitleColor(UIColor.greenColor(),forState: .Highlighted) //触摸状态下文字的颜色</span><br><span class=\"line\">button.setTitleColor(UIColor.grayColor(),forState: .Disabled) //禁用状态下文字的颜色</span><br></pre></td></tr></table></figure>\n<p>4，按钮文字阴影颜色的设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setTitleShadowColor(UIColor.greenColor(),forState:.Normal) //普通状态下文字阴影的颜色</span><br><span class=\"line\">button.setTitleShadowColor(UIColor.yellowColor(),forState:.Highlighted) //普通状态下文字阴影的颜色</span><br><span class=\"line\">button.setTitleShadowColor(UIColor.grayColor(),forState:.Disabled) //普通状态下文字阴影的颜色</span><br></pre></td></tr></table></figure>\n<p>5，按钮背景颜色设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.backgroundColor=UIColor.blackColor()</span><br></pre></td></tr></table></figure>\n<p>6，按钮文字图标的设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setImage(UIImage(named:&quot;icon1&quot;),forState:.Normal)  //设置图标</span><br><span class=\"line\">button.adjustsImageWhenHighlighted=false //使触摸模式下按钮也不会变暗</span><br><span class=\"line\">button.adjustsImageWhenDisabled=false //使禁用模式下按钮也不会变暗</span><br></pre></td></tr></table></figure>\n<p>7，设置按钮背景图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setBackgroundImage(UIImage(named:&quot;background1&quot;),forState:.Normal)</span><br></pre></td></tr></table></figure>\n<p>8，按钮触摸点击事件响应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不传递触摸对象（即点击的按钮）</span><br><span class=\"line\">button.addTarget(self,action:#selector(tapped),forControlEvents:.TouchUpInside)</span><br><span class=\"line\">func tapped()&#123;</span><br><span class=\"line\">    print(&quot;tapped&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//传递触摸对象（即点击的按钮），需要在定义action参数时，方法名称后面带上冒号</span><br><span class=\"line\">button.addTarget(self,action:#selector(tapped(_:)),forControlEvents:.TouchUpInside)</span><br><span class=\"line\">func tapped(button:UIButton)&#123;</span><br><span class=\"line\">    print(button.titleForState(.Normal))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>常用的触摸事件类型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TouchDown：单点触摸按下事件，点触屏幕</span><br><span class=\"line\">TouchDownRepeat：多点触摸按下事件，点触计数大于1，按下第2、3或第4根手指的时候</span><br><span class=\"line\">TouchDragInside：触摸在控件内拖动时</span><br><span class=\"line\">TouchDragOutside：触摸在控件外拖动时</span><br><span class=\"line\">TouchDragEnter：触摸从控件之外拖动到内部时</span><br><span class=\"line\">TouchDragExit：触摸从控件内部拖动到外部时</span><br><span class=\"line\">TouchUpInside：在控件之内触摸并抬起事件</span><br><span class=\"line\">TouchUpOutside：在控件之外触摸抬起事件</span><br><span class=\"line\">TouchCancel：触摸取消事件，即一次触摸因为放上太多手指而被取消，或者电话打断</span><br></pre></td></tr></table></figure>"},{"title":"android studio启动慢","_content":"\n### android studio每次启动都要在fetching Android sdk compoment information停好久 怎么解决？\n\n1）进入刚安装的Android Studio目录下的bin目录。找到idea.properties文件，用文本编辑器打开。\n\n2）在idea.properties文件末尾添加一行： disable.android.first.run=true ，然后保存文件。\n\n3）关闭Android Studio后重新启动，便可进入界面。\n\n可以解决。","source":"_posts/androidstudio启动慢.md","raw":"---\ntitle: android studio启动慢\ntags: \n- android\n- android studio\ncategories: android\n---\n\n### android studio每次启动都要在fetching Android sdk compoment information停好久 怎么解决？\n\n1）进入刚安装的Android Studio目录下的bin目录。找到idea.properties文件，用文本编辑器打开。\n\n2）在idea.properties文件末尾添加一行： disable.android.first.run=true ，然后保存文件。\n\n3）关闭Android Studio后重新启动，便可进入界面。\n\n可以解决。","slug":"androidstudio启动慢","published":1,"date":"2016-06-23T08:51:19.000Z","updated":"2016-06-23T08:54:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kja001f8u4irkjwhqwu","content":"<h3 id=\"android-studio每次启动都要在fetching-Android-sdk-compoment-information停好久-怎么解决？\"><a href=\"#android-studio每次启动都要在fetching-Android-sdk-compoment-information停好久-怎么解决？\" class=\"headerlink\" title=\"android studio每次启动都要在fetching Android sdk compoment information停好久 怎么解决？\"></a>android studio每次启动都要在fetching Android sdk compoment information停好久 怎么解决？</h3><p>1）进入刚安装的Android Studio目录下的bin目录。找到idea.properties文件，用文本编辑器打开。</p>\n<p>2）在idea.properties文件末尾添加一行： disable.android.first.run=true ，然后保存文件。</p>\n<p>3）关闭Android Studio后重新启动，便可进入界面。</p>\n<p>可以解决。</p>\n","excerpt":"","more":"<h3 id=\"android-studio每次启动都要在fetching-Android-sdk-compoment-information停好久-怎么解决？\"><a href=\"#android-studio每次启动都要在fetching-Android-sdk-compoment-information停好久-怎么解决？\" class=\"headerlink\" title=\"android studio每次启动都要在fetching Android sdk compoment information停好久 怎么解决？\"></a>android studio每次启动都要在fetching Android sdk compoment information停好久 怎么解决？</h3><p>1）进入刚安装的Android Studio目录下的bin目录。找到idea.properties文件，用文本编辑器打开。</p>\n<p>2）在idea.properties文件末尾添加一行： disable.android.first.run=true ，然后保存文件。</p>\n<p>3）关闭Android Studio后重新启动，便可进入界面。</p>\n<p>可以解决。</p>\n"},{"title":"创建Git仓库（git@oschina&sourceTree）","_content":"\n创建Git仓库（git@oschina&sourceTree）\n\n1.创建远程仓库\n\n进入https://git.oschina.net/点击＋号，创建新项目\n\n2.部署公钥（可以暂时不用公钥的）\n\n在项目界面，管理－》部署公钥－》添加公钥，按照git@oschina上面的步骤，一步步生成公钥并添加到项目中。\n\n3.将远程仓库与本地仓库关联起来（也是最关键的一步）\n\n（1）复制远程仓库的git地址。\n\n（2）打开sourceTree，依次点击：新仓库－》从URL克隆－》将远程仓库的地址粘贴到“源URL”，目标路径选择自己要存放的位置（路径A）（一定得是一个空的文件夹，否则会报错）－》克隆\n\n4.在路径A下创建工程，或者将原来就存在的工程放在路径A下面。\n\n5.打开sourceTree，查看是否检测到文件变动。\n\n\n\n","source":"_posts/创建Git仓库osChina.md","raw":"---\ntitle: 创建Git仓库（git@oschina&sourceTree）\ntags: \n- git\n- git@osChina\n- sourceTree\ncategories: git\n---\n\n创建Git仓库（git@oschina&sourceTree）\n\n1.创建远程仓库\n\n进入https://git.oschina.net/点击＋号，创建新项目\n\n2.部署公钥（可以暂时不用公钥的）\n\n在项目界面，管理－》部署公钥－》添加公钥，按照git@oschina上面的步骤，一步步生成公钥并添加到项目中。\n\n3.将远程仓库与本地仓库关联起来（也是最关键的一步）\n\n（1）复制远程仓库的git地址。\n\n（2）打开sourceTree，依次点击：新仓库－》从URL克隆－》将远程仓库的地址粘贴到“源URL”，目标路径选择自己要存放的位置（路径A）（一定得是一个空的文件夹，否则会报错）－》克隆\n\n4.在路径A下创建工程，或者将原来就存在的工程放在路径A下面。\n\n5.打开sourceTree，查看是否检测到文件变动。\n\n\n\n","slug":"创建Git仓库osChina","published":1,"date":"2016-06-30T06:34:50.000Z","updated":"2016-06-30T06:34:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kpg002y8u4iqokpowl8","content":"<p>创建Git仓库（git@oschina&amp;sourceTree）</p>\n<p>1.创建远程仓库</p>\n<p>进入<a href=\"https://git.oschina.net/点击＋号，创建新项目\" target=\"_blank\" rel=\"external\">https://git.oschina.net/点击＋号，创建新项目</a></p>\n<p>2.部署公钥（可以暂时不用公钥的）</p>\n<p>在项目界面，管理－》部署公钥－》添加公钥，按照git@oschina上面的步骤，一步步生成公钥并添加到项目中。</p>\n<p>3.将远程仓库与本地仓库关联起来（也是最关键的一步）</p>\n<p>（1）复制远程仓库的git地址。</p>\n<p>（2）打开sourceTree，依次点击：新仓库－》从URL克隆－》将远程仓库的地址粘贴到“源URL”，目标路径选择自己要存放的位置（路径A）（一定得是一个空的文件夹，否则会报错）－》克隆</p>\n<p>4.在路径A下创建工程，或者将原来就存在的工程放在路径A下面。</p>\n<p>5.打开sourceTree，查看是否检测到文件变动。</p>\n","excerpt":"","more":"<p>创建Git仓库（git@oschina&amp;sourceTree）</p>\n<p>1.创建远程仓库</p>\n<p>进入<a href=\"https://git.oschina.net/点击＋号，创建新项目\">https://git.oschina.net/点击＋号，创建新项目</a></p>\n<p>2.部署公钥（可以暂时不用公钥的）</p>\n<p>在项目界面，管理－》部署公钥－》添加公钥，按照git@oschina上面的步骤，一步步生成公钥并添加到项目中。</p>\n<p>3.将远程仓库与本地仓库关联起来（也是最关键的一步）</p>\n<p>（1）复制远程仓库的git地址。</p>\n<p>（2）打开sourceTree，依次点击：新仓库－》从URL克隆－》将远程仓库的地址粘贴到“源URL”，目标路径选择自己要存放的位置（路径A）（一定得是一个空的文件夹，否则会报错）－》克隆</p>\n<p>4.在路径A下创建工程，或者将原来就存在的工程放在路径A下面。</p>\n<p>5.打开sourceTree，查看是否检测到文件变动。</p>\n"},{"title":"Swift使用CIFilter生成二维码图片（QRCode）","_content":"\nSwift - 使用CIFilter生成二维码图片（QRCode）\n\nCIFilter提供了各种各样的滤镜，其中CIQRCodeGenerator可以用来生成二维码。下面通过一个样例演示如何将字符串（链接也是字符串）生成二维码图片，同时支持在二维码中间放置个性化图标。\n\n\n```\nimport UIKit\n \nclass ViewController: UIViewController {\n \n    override func viewDidLoad() {\n        super.viewDidLoad()\n         \n        //不带图片的二维码图片\n        let imageViewIcon1 = UIImageView(frame: CGRectMake(20, 20, 150, 150))\n        imageViewIcon1.image = createQRForString(\"http://www.hangge.com\",\n            qrImageName: \"\")\n        self.view.addSubview(imageViewIcon1)\n         \n        //带图片的二维码图片\n        let imageViewIcon2 = UIImageView(frame: CGRectMake(200, 20, 150, 150))\n        imageViewIcon2.image = createQRForString(\"http://www.hangge.com\",\n            qrImageName: \"logo\")\n        self.view.addSubview(imageViewIcon2)\n    }\n     \n    //创建二维码图片\n    func createQRForString(qrString: String?, qrImageName: String?) -> UIImage?{\n        if let sureQRString = qrString {\n            let stringData = sureQRString.dataUsingEncoding(NSUTF8StringEncoding,\n                allowLossyConversion: false)\n            // 创建一个二维码的滤镜\n            let qrFilter = CIFilter(name: \"CIQRCodeGenerator\")!\n            qrFilter.setValue(stringData, forKey: \"inputMessage\")\n            qrFilter.setValue(\"H\", forKey: \"inputCorrectionLevel\")\n            let qrCIImage = qrFilter.outputImage\n            // 创建一个颜色滤镜,黑白色\n            let colorFilter = CIFilter(name: \"CIFalseColor\")!\n            colorFilter.setDefaults()\n            colorFilter.setValue(qrCIImage, forKey: \"inputImage\")\n            colorFilter.setValue(CIColor(red: 0, green: 0, blue: 0), forKey: \"inputColor0\")\n            colorFilter.setValue(CIColor(red: 1, green: 1, blue: 1), forKey: \"inputColor1\")\n            // 返回二维码image\n            let codeImage = UIImage(CIImage: colorFilter.outputImage!\n                .imageByApplyingTransform(CGAffineTransformMakeScale(5, 5)))\n            // 通常,二维码都是定制的,中间都会放想要表达意思的图片\n            if let iconImage = UIImage(named: qrImageName!) {\n                let rect = CGRectMake(0, 0, codeImage.size.width, codeImage.size.height)\n                UIGraphicsBeginImageContext(rect.size)\n                 \n                codeImage.drawInRect(rect)\n                let avatarSize = CGSizeMake(rect.size.width * 0.25, rect.size.height * 0.25)\n                let x = (rect.width - avatarSize.width) * 0.5\n                let y = (rect.height - avatarSize.height) * 0.5\n                iconImage.drawInRect(CGRectMake(x, y, avatarSize.width, avatarSize.height))\n                let resultImage = UIGraphicsGetImageFromCurrentImageContext()\n                 \n                UIGraphicsEndImageContext()\n                return resultImage\n            }\n            return codeImage\n        }\n        return nil\n    }\n \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n}\n```","source":"_posts/使用CIFilter生成二维码.md","raw":"---\ntitle: Swift使用CIFilter生成二维码图片（QRCode）\ntags: \n- swift\n- QRCode\n- AVFoundation\ncategories: swift\n---\n\nSwift - 使用CIFilter生成二维码图片（QRCode）\n\nCIFilter提供了各种各样的滤镜，其中CIQRCodeGenerator可以用来生成二维码。下面通过一个样例演示如何将字符串（链接也是字符串）生成二维码图片，同时支持在二维码中间放置个性化图标。\n\n\n```\nimport UIKit\n \nclass ViewController: UIViewController {\n \n    override func viewDidLoad() {\n        super.viewDidLoad()\n         \n        //不带图片的二维码图片\n        let imageViewIcon1 = UIImageView(frame: CGRectMake(20, 20, 150, 150))\n        imageViewIcon1.image = createQRForString(\"http://www.hangge.com\",\n            qrImageName: \"\")\n        self.view.addSubview(imageViewIcon1)\n         \n        //带图片的二维码图片\n        let imageViewIcon2 = UIImageView(frame: CGRectMake(200, 20, 150, 150))\n        imageViewIcon2.image = createQRForString(\"http://www.hangge.com\",\n            qrImageName: \"logo\")\n        self.view.addSubview(imageViewIcon2)\n    }\n     \n    //创建二维码图片\n    func createQRForString(qrString: String?, qrImageName: String?) -> UIImage?{\n        if let sureQRString = qrString {\n            let stringData = sureQRString.dataUsingEncoding(NSUTF8StringEncoding,\n                allowLossyConversion: false)\n            // 创建一个二维码的滤镜\n            let qrFilter = CIFilter(name: \"CIQRCodeGenerator\")!\n            qrFilter.setValue(stringData, forKey: \"inputMessage\")\n            qrFilter.setValue(\"H\", forKey: \"inputCorrectionLevel\")\n            let qrCIImage = qrFilter.outputImage\n            // 创建一个颜色滤镜,黑白色\n            let colorFilter = CIFilter(name: \"CIFalseColor\")!\n            colorFilter.setDefaults()\n            colorFilter.setValue(qrCIImage, forKey: \"inputImage\")\n            colorFilter.setValue(CIColor(red: 0, green: 0, blue: 0), forKey: \"inputColor0\")\n            colorFilter.setValue(CIColor(red: 1, green: 1, blue: 1), forKey: \"inputColor1\")\n            // 返回二维码image\n            let codeImage = UIImage(CIImage: colorFilter.outputImage!\n                .imageByApplyingTransform(CGAffineTransformMakeScale(5, 5)))\n            // 通常,二维码都是定制的,中间都会放想要表达意思的图片\n            if let iconImage = UIImage(named: qrImageName!) {\n                let rect = CGRectMake(0, 0, codeImage.size.width, codeImage.size.height)\n                UIGraphicsBeginImageContext(rect.size)\n                 \n                codeImage.drawInRect(rect)\n                let avatarSize = CGSizeMake(rect.size.width * 0.25, rect.size.height * 0.25)\n                let x = (rect.width - avatarSize.width) * 0.5\n                let y = (rect.height - avatarSize.height) * 0.5\n                iconImage.drawInRect(CGRectMake(x, y, avatarSize.width, avatarSize.height))\n                let resultImage = UIGraphicsGetImageFromCurrentImageContext()\n                 \n                UIGraphicsEndImageContext()\n                return resultImage\n            }\n            return codeImage\n        }\n        return nil\n    }\n \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n}\n```","slug":"使用CIFilter生成二维码","published":1,"date":"2016-06-28T15:33:58.000Z","updated":"2016-06-28T15:47:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kpj00308u4iwq4m5ltv","content":"<p>Swift - 使用CIFilter生成二维码图片（QRCode）</p>\n<p>CIFilter提供了各种各样的滤镜，其中CIQRCodeGenerator可以用来生成二维码。下面通过一个样例演示如何将字符串（链接也是字符串）生成二维码图片，同时支持在二维码中间放置个性化图标。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import UIKit</span><br><span class=\"line\"> </span><br><span class=\"line\">class ViewController: UIViewController &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    override func viewDidLoad() &#123;</span><br><span class=\"line\">        super.viewDidLoad()</span><br><span class=\"line\">         </span><br><span class=\"line\">        //不带图片的二维码图片</span><br><span class=\"line\">        let imageViewIcon1 = UIImageView(frame: CGRectMake(20, 20, 150, 150))</span><br><span class=\"line\">        imageViewIcon1.image = createQRForString(&quot;http://www.hangge.com&quot;,</span><br><span class=\"line\">            qrImageName: &quot;&quot;)</span><br><span class=\"line\">        self.view.addSubview(imageViewIcon1)</span><br><span class=\"line\">         </span><br><span class=\"line\">        //带图片的二维码图片</span><br><span class=\"line\">        let imageViewIcon2 = UIImageView(frame: CGRectMake(200, 20, 150, 150))</span><br><span class=\"line\">        imageViewIcon2.image = createQRForString(&quot;http://www.hangge.com&quot;,</span><br><span class=\"line\">            qrImageName: &quot;logo&quot;)</span><br><span class=\"line\">        self.view.addSubview(imageViewIcon2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    //创建二维码图片</span><br><span class=\"line\">    func createQRForString(qrString: String?, qrImageName: String?) -&gt; UIImage?&#123;</span><br><span class=\"line\">        if let sureQRString = qrString &#123;</span><br><span class=\"line\">            let stringData = sureQRString.dataUsingEncoding(NSUTF8StringEncoding,</span><br><span class=\"line\">                allowLossyConversion: false)</span><br><span class=\"line\">            // 创建一个二维码的滤镜</span><br><span class=\"line\">            let qrFilter = CIFilter(name: &quot;CIQRCodeGenerator&quot;)!</span><br><span class=\"line\">            qrFilter.setValue(stringData, forKey: &quot;inputMessage&quot;)</span><br><span class=\"line\">            qrFilter.setValue(&quot;H&quot;, forKey: &quot;inputCorrectionLevel&quot;)</span><br><span class=\"line\">            let qrCIImage = qrFilter.outputImage</span><br><span class=\"line\">            // 创建一个颜色滤镜,黑白色</span><br><span class=\"line\">            let colorFilter = CIFilter(name: &quot;CIFalseColor&quot;)!</span><br><span class=\"line\">            colorFilter.setDefaults()</span><br><span class=\"line\">            colorFilter.setValue(qrCIImage, forKey: &quot;inputImage&quot;)</span><br><span class=\"line\">            colorFilter.setValue(CIColor(red: 0, green: 0, blue: 0), forKey: &quot;inputColor0&quot;)</span><br><span class=\"line\">            colorFilter.setValue(CIColor(red: 1, green: 1, blue: 1), forKey: &quot;inputColor1&quot;)</span><br><span class=\"line\">            // 返回二维码image</span><br><span class=\"line\">            let codeImage = UIImage(CIImage: colorFilter.outputImage!</span><br><span class=\"line\">                .imageByApplyingTransform(CGAffineTransformMakeScale(5, 5)))</span><br><span class=\"line\">            // 通常,二维码都是定制的,中间都会放想要表达意思的图片</span><br><span class=\"line\">            if let iconImage = UIImage(named: qrImageName!) &#123;</span><br><span class=\"line\">                let rect = CGRectMake(0, 0, codeImage.size.width, codeImage.size.height)</span><br><span class=\"line\">                UIGraphicsBeginImageContext(rect.size)</span><br><span class=\"line\">                 </span><br><span class=\"line\">                codeImage.drawInRect(rect)</span><br><span class=\"line\">                let avatarSize = CGSizeMake(rect.size.width * 0.25, rect.size.height * 0.25)</span><br><span class=\"line\">                let x = (rect.width - avatarSize.width) * 0.5</span><br><span class=\"line\">                let y = (rect.height - avatarSize.height) * 0.5</span><br><span class=\"line\">                iconImage.drawInRect(CGRectMake(x, y, avatarSize.width, avatarSize.height))</span><br><span class=\"line\">                let resultImage = UIGraphicsGetImageFromCurrentImageContext()</span><br><span class=\"line\">                 </span><br><span class=\"line\">                UIGraphicsEndImageContext()</span><br><span class=\"line\">                return resultImage</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return codeImage</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    override func didReceiveMemoryWarning() &#123;</span><br><span class=\"line\">        super.didReceiveMemoryWarning()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>Swift - 使用CIFilter生成二维码图片（QRCode）</p>\n<p>CIFilter提供了各种各样的滤镜，其中CIQRCodeGenerator可以用来生成二维码。下面通过一个样例演示如何将字符串（链接也是字符串）生成二维码图片，同时支持在二维码中间放置个性化图标。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import UIKit</span><br><span class=\"line\"> </span><br><span class=\"line\">class ViewController: UIViewController &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    override func viewDidLoad() &#123;</span><br><span class=\"line\">        super.viewDidLoad()</span><br><span class=\"line\">         </span><br><span class=\"line\">        //不带图片的二维码图片</span><br><span class=\"line\">        let imageViewIcon1 = UIImageView(frame: CGRectMake(20, 20, 150, 150))</span><br><span class=\"line\">        imageViewIcon1.image = createQRForString(&quot;http://www.hangge.com&quot;,</span><br><span class=\"line\">            qrImageName: &quot;&quot;)</span><br><span class=\"line\">        self.view.addSubview(imageViewIcon1)</span><br><span class=\"line\">         </span><br><span class=\"line\">        //带图片的二维码图片</span><br><span class=\"line\">        let imageViewIcon2 = UIImageView(frame: CGRectMake(200, 20, 150, 150))</span><br><span class=\"line\">        imageViewIcon2.image = createQRForString(&quot;http://www.hangge.com&quot;,</span><br><span class=\"line\">            qrImageName: &quot;logo&quot;)</span><br><span class=\"line\">        self.view.addSubview(imageViewIcon2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    //创建二维码图片</span><br><span class=\"line\">    func createQRForString(qrString: String?, qrImageName: String?) -&gt; UIImage?&#123;</span><br><span class=\"line\">        if let sureQRString = qrString &#123;</span><br><span class=\"line\">            let stringData = sureQRString.dataUsingEncoding(NSUTF8StringEncoding,</span><br><span class=\"line\">                allowLossyConversion: false)</span><br><span class=\"line\">            // 创建一个二维码的滤镜</span><br><span class=\"line\">            let qrFilter = CIFilter(name: &quot;CIQRCodeGenerator&quot;)!</span><br><span class=\"line\">            qrFilter.setValue(stringData, forKey: &quot;inputMessage&quot;)</span><br><span class=\"line\">            qrFilter.setValue(&quot;H&quot;, forKey: &quot;inputCorrectionLevel&quot;)</span><br><span class=\"line\">            let qrCIImage = qrFilter.outputImage</span><br><span class=\"line\">            // 创建一个颜色滤镜,黑白色</span><br><span class=\"line\">            let colorFilter = CIFilter(name: &quot;CIFalseColor&quot;)!</span><br><span class=\"line\">            colorFilter.setDefaults()</span><br><span class=\"line\">            colorFilter.setValue(qrCIImage, forKey: &quot;inputImage&quot;)</span><br><span class=\"line\">            colorFilter.setValue(CIColor(red: 0, green: 0, blue: 0), forKey: &quot;inputColor0&quot;)</span><br><span class=\"line\">            colorFilter.setValue(CIColor(red: 1, green: 1, blue: 1), forKey: &quot;inputColor1&quot;)</span><br><span class=\"line\">            // 返回二维码image</span><br><span class=\"line\">            let codeImage = UIImage(CIImage: colorFilter.outputImage!</span><br><span class=\"line\">                .imageByApplyingTransform(CGAffineTransformMakeScale(5, 5)))</span><br><span class=\"line\">            // 通常,二维码都是定制的,中间都会放想要表达意思的图片</span><br><span class=\"line\">            if let iconImage = UIImage(named: qrImageName!) &#123;</span><br><span class=\"line\">                let rect = CGRectMake(0, 0, codeImage.size.width, codeImage.size.height)</span><br><span class=\"line\">                UIGraphicsBeginImageContext(rect.size)</span><br><span class=\"line\">                 </span><br><span class=\"line\">                codeImage.drawInRect(rect)</span><br><span class=\"line\">                let avatarSize = CGSizeMake(rect.size.width * 0.25, rect.size.height * 0.25)</span><br><span class=\"line\">                let x = (rect.width - avatarSize.width) * 0.5</span><br><span class=\"line\">                let y = (rect.height - avatarSize.height) * 0.5</span><br><span class=\"line\">                iconImage.drawInRect(CGRectMake(x, y, avatarSize.width, avatarSize.height))</span><br><span class=\"line\">                let resultImage = UIGraphicsGetImageFromCurrentImageContext()</span><br><span class=\"line\">                 </span><br><span class=\"line\">                UIGraphicsEndImageContext()</span><br><span class=\"line\">                return resultImage</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return codeImage</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    override func didReceiveMemoryWarning() &#123;</span><br><span class=\"line\">        super.didReceiveMemoryWarning()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"swift-SnapKit自动布局使用3","_content":"\n1，约束优先级\n\n我们使用SnapKit的时候，还可以定义约束的优先级。\n\n这样当约束出现冲突的时候,优先级高的约束覆盖优先级低的约束。\n\n具体优先级可以放在约束链的结束处。\n\n可以设置如下几种优先级\n\n```\npriorityLow()：设置低优先级，优先级为250\npriorityMedium()：设置中优先级，优先级为500（这个也就是默认的优先级）\npriorityHigh()：设置高优先级，优先级为750\npriority()：可以设置任意的优先级，接受的参数是0-1000的数字。比如：priority(600)\n```\n\n举例\n\n```\n  //初始宽、高为100（优先级低）\n            make.width.height.equalTo(100 * self.scacle).priorityLow();\n            //最大尺寸不能超过屏幕\n            make.width.height.lessThanOrEqualTo(self.view.snp_width)\n            make.width.height.lessThanOrEqualTo(self.view.snp_height)\n\n```\n\n\n2，带有动画效果\n\n配合 UIView.animateWithDuration，我们可以在约束改变的时候有动画效果。 \n\n```\n //动画\n UIView.animateWithDuration(0.3) {\n       self.view.layoutIfNeeded()\n }\n```\n\n","source":"_posts/swift-SnapKit自动布局使用3.md","raw":"---\ntitle: swift-SnapKit自动布局使用3\ntags: \n- swift \n- SnapKit\ncategories: swift\n---\n\n1，约束优先级\n\n我们使用SnapKit的时候，还可以定义约束的优先级。\n\n这样当约束出现冲突的时候,优先级高的约束覆盖优先级低的约束。\n\n具体优先级可以放在约束链的结束处。\n\n可以设置如下几种优先级\n\n```\npriorityLow()：设置低优先级，优先级为250\npriorityMedium()：设置中优先级，优先级为500（这个也就是默认的优先级）\npriorityHigh()：设置高优先级，优先级为750\npriority()：可以设置任意的优先级，接受的参数是0-1000的数字。比如：priority(600)\n```\n\n举例\n\n```\n  //初始宽、高为100（优先级低）\n            make.width.height.equalTo(100 * self.scacle).priorityLow();\n            //最大尺寸不能超过屏幕\n            make.width.height.lessThanOrEqualTo(self.view.snp_width)\n            make.width.height.lessThanOrEqualTo(self.view.snp_height)\n\n```\n\n\n2，带有动画效果\n\n配合 UIView.animateWithDuration，我们可以在约束改变的时候有动画效果。 \n\n```\n //动画\n UIView.animateWithDuration(0.3) {\n       self.view.layoutIfNeeded()\n }\n```\n\n","slug":"swift-SnapKit自动布局使用3","published":1,"date":"2016-06-25T02:13:33.000Z","updated":"2016-06-25T02:33:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2f7kpq00338u4ij72g0rck","content":"<p>1，约束优先级</p>\n<p>我们使用SnapKit的时候，还可以定义约束的优先级。</p>\n<p>这样当约束出现冲突的时候,优先级高的约束覆盖优先级低的约束。</p>\n<p>具体优先级可以放在约束链的结束处。</p>\n<p>可以设置如下几种优先级</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">priorityLow()：设置低优先级，优先级为250</span><br><span class=\"line\">priorityMedium()：设置中优先级，优先级为500（这个也就是默认的优先级）</span><br><span class=\"line\">priorityHigh()：设置高优先级，优先级为750</span><br><span class=\"line\">priority()：可以设置任意的优先级，接受的参数是0-1000的数字。比如：priority(600)</span><br></pre></td></tr></table></figure>\n<p>举例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始宽、高为100（优先级低）</span><br><span class=\"line\">          make.width.height.equalTo(100 * self.scacle).priorityLow();</span><br><span class=\"line\">          //最大尺寸不能超过屏幕</span><br><span class=\"line\">          make.width.height.lessThanOrEqualTo(self.view.snp_width)</span><br><span class=\"line\">          make.width.height.lessThanOrEqualTo(self.view.snp_height)</span><br></pre></td></tr></table></figure>\n<p>2，带有动画效果</p>\n<p>配合 UIView.animateWithDuration，我们可以在约束改变的时候有动画效果。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //动画</span><br><span class=\"line\"> UIView.animateWithDuration(0.3) &#123;</span><br><span class=\"line\">       self.view.layoutIfNeeded()</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>1，约束优先级</p>\n<p>我们使用SnapKit的时候，还可以定义约束的优先级。</p>\n<p>这样当约束出现冲突的时候,优先级高的约束覆盖优先级低的约束。</p>\n<p>具体优先级可以放在约束链的结束处。</p>\n<p>可以设置如下几种优先级</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">priorityLow()：设置低优先级，优先级为250</span><br><span class=\"line\">priorityMedium()：设置中优先级，优先级为500（这个也就是默认的优先级）</span><br><span class=\"line\">priorityHigh()：设置高优先级，优先级为750</span><br><span class=\"line\">priority()：可以设置任意的优先级，接受的参数是0-1000的数字。比如：priority(600)</span><br></pre></td></tr></table></figure>\n<p>举例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始宽、高为100（优先级低）</span><br><span class=\"line\">          make.width.height.equalTo(100 * self.scacle).priorityLow();</span><br><span class=\"line\">          //最大尺寸不能超过屏幕</span><br><span class=\"line\">          make.width.height.lessThanOrEqualTo(self.view.snp_width)</span><br><span class=\"line\">          make.width.height.lessThanOrEqualTo(self.view.snp_height)</span><br></pre></td></tr></table></figure>\n<p>2，带有动画效果</p>\n<p>配合 UIView.animateWithDuration，我们可以在约束改变的时候有动画效果。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //动画</span><br><span class=\"line\"> UIView.animateWithDuration(0.3) &#123;</span><br><span class=\"line\">       self.view.layoutIfNeeded()</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciq2f7kgq00008u4ibzziri05","category_id":"ciq2f7kh700048u4itedrgxcr","_id":"ciq2f7khl000b8u4i4w75d2qy"},{"post_id":"ciq2f7khe00088u4iqbwzfvng","category_id":"ciq2f7kh700048u4itedrgxcr","_id":"ciq2f7ki1000f8u4imq1ol8dt"},{"post_id":"ciq2f7kh000028u4i1rn9hf2x","category_id":"ciq2f7kh700048u4itedrgxcr","_id":"ciq2f7ki4000i8u4ijlosj7x7"},{"post_id":"ciq2f7kh800058u4idfctihwj","category_id":"ciq2f7kh700048u4itedrgxcr","_id":"ciq2f7kic000p8u4ilun4tial"},{"post_id":"ciq2f7kha00068u4i2yzxioar","category_id":"ciq2f7ki7000l8u4i3t2l2b7e","_id":"ciq2f7kil000w8u4igu0r5xqp"},{"post_id":"ciq2f7khh000a8u4i0a2lago4","category_id":"ciq2f7ki7000l8u4i3t2l2b7e","_id":"ciq2f7kix00118u4i4l7egwoo"},{"post_id":"ciq2f7kij000v8u4i2lfcuwb8","category_id":"ciq2f7ki7000l8u4i3t2l2b7e","_id":"ciq2f7kj000158u4izb7o6i1p"},{"post_id":"ciq2f7kim000z8u4ij7rq3drq","category_id":"ciq2f7ki7000l8u4i3t2l2b7e","_id":"ciq2f7kj500188u4iy8uuik86"},{"post_id":"ciq2f7khl000c8u4iwbncqydu","category_id":"ciq2f7ki7000l8u4i3t2l2b7e","_id":"ciq2f7kja001d8u4imuvkyqnh"},{"post_id":"ciq2f7kiq00108u4i1ahcjqpd","category_id":"ciq2f7ki7000l8u4i3t2l2b7e","_id":"ciq2f7kjc001g8u4innxb4qee"},{"post_id":"ciq2f7kiz00148u4ic7drn17f","category_id":"ciq2f7ki7000l8u4i3t2l2b7e","_id":"ciq2f7kje001k8u4i4299ippk"},{"post_id":"ciq2f7ki2000h8u4imvtv2p5g","category_id":"ciq2f7kiy00128u4ituwvbz6k","_id":"ciq2f7kjf001m8u4iu1w0a99u"},{"post_id":"ciq2f7kj7001c8u4i2tq6ezg2","category_id":"ciq2f7ki7000l8u4i3t2l2b7e","_id":"ciq2f7kjh001q8u4ic5jr0k5o"},{"post_id":"ciq2f7ki5000k8u4i6tjlut25","category_id":"ciq2f7ki7000l8u4i3t2l2b7e","_id":"ciq2f7kjh001s8u4iio8fag9d"},{"post_id":"ciq2f7kid000q8u4ikkhtxxyn","category_id":"ciq2f7kjc001i8u4irkzslp87","_id":"ciq2f7kjk001v8u4iges8x3px"},{"post_id":"ciq2f7kig000u8u4i7piwrjbe","category_id":"ciq2f7kjf001p8u4ij6vd9sb5","_id":"ciq2f7kjm001x8u4i7o50jfr1"},{"post_id":"ciq2f7kj200178u4ir1vyuvr9","category_id":"ciq2f7kjc001i8u4irkzslp87","_id":"ciq2f7kjo00208u4ihmzfpmz5"},{"post_id":"ciq2f7kja001f8u4irkjwhqwu","category_id":"ciq2f7kjn001z8u4is3a41s04","_id":"ciq2f7kjq00228u4inojdrvz1"},{"post_id":"ciq2f7kpj00308u4iwq4m5ltv","category_id":"ciq2f7ki7000l8u4i3t2l2b7e","_id":"ciq2f7kpu00368u4ich5qzdiw"},{"post_id":"ciq2f7kpq00338u4ij72g0rck","category_id":"ciq2f7ki7000l8u4i3t2l2b7e","_id":"ciq2f7kpv00398u4i7rcf29z1"},{"post_id":"ciq2f7kpg002y8u4iqokpowl8","category_id":"ciq2f7kpq00328u4i9d7tc93a","_id":"ciq2f7kpv003b8u4icsqbo64h"}],"PostTag":[{"post_id":"ciq2f7kgq00008u4ibzziri05","tag_id":"ciq2f7kh400038u4ixvb3yhxh","_id":"ciq2f7ki1000g8u4i8biy2h17"},{"post_id":"ciq2f7kgq00008u4ibzziri05","tag_id":"ciq2f7khd00078u4iv56r48cu","_id":"ciq2f7ki5000j8u4i6kc822x3"},{"post_id":"ciq2f7kh000028u4i1rn9hf2x","tag_id":"ciq2f7kh400038u4ixvb3yhxh","_id":"ciq2f7ki9000n8u4i24gxszfh"},{"post_id":"ciq2f7kh800058u4idfctihwj","tag_id":"ciq2f7kh400038u4ixvb3yhxh","_id":"ciq2f7kif000t8u4ibcd486l5"},{"post_id":"ciq2f7kha00068u4i2yzxioar","tag_id":"ciq2f7kif000r8u4i4ff5yw3y","_id":"ciq2f7kj200168u4i9mg6t0zg"},{"post_id":"ciq2f7kha00068u4i2yzxioar","tag_id":"ciq2f7kil000y8u4ibf0eybq3","_id":"ciq2f7kj600198u4ifhkp1bcl"},{"post_id":"ciq2f7khe00088u4iqbwzfvng","tag_id":"ciq2f7kh400038u4ixvb3yhxh","_id":"ciq2f7kja001e8u4i2406jav3"},{"post_id":"ciq2f7khe00088u4iqbwzfvng","tag_id":"ciq2f7khd00078u4iv56r48cu","_id":"ciq2f7kjc001h8u4ikvpwqsm0"},{"post_id":"ciq2f7kj7001c8u4i2tq6ezg2","tag_id":"ciq2f7kif000r8u4i4ff5yw3y","_id":"ciq2f7kje001l8u4iojm3vhj3"},{"post_id":"ciq2f7khh000a8u4i0a2lago4","tag_id":"ciq2f7kif000r8u4i4ff5yw3y","_id":"ciq2f7kjf001n8u4igxa24jkn"},{"post_id":"ciq2f7khl000c8u4iwbncqydu","tag_id":"ciq2f7kif000r8u4i4ff5yw3y","_id":"ciq2f7kjh001r8u4ifp4kzr9w"},{"post_id":"ciq2f7ki2000h8u4imvtv2p5g","tag_id":"ciq2f7kjf001o8u4im33uci2y","_id":"ciq2f7kjl001w8u4i5w9qcips"},{"post_id":"ciq2f7ki5000k8u4i6tjlut25","tag_id":"ciq2f7kif000r8u4i4ff5yw3y","_id":"ciq2f7kjr00248u4i1ffikah3"},{"post_id":"ciq2f7ki5000k8u4i6tjlut25","tag_id":"ciq2f7kjm001y8u4irfj7m4hj","_id":"ciq2f7kjr00258u4i8svfc6ax"},{"post_id":"ciq2f7ki5000k8u4i6tjlut25","tag_id":"ciq2f7kjp00218u4ichyhwqqi","_id":"ciq2f7kju00278u4ifbtnv2gr"},{"post_id":"ciq2f7kid000q8u4ikkhtxxyn","tag_id":"ciq2f7kjm001y8u4irfj7m4hj","_id":"ciq2f7kjv00298u4i5ljevc4k"},{"post_id":"ciq2f7kid000q8u4ikkhtxxyn","tag_id":"ciq2f7kjr00268u4iqjvl3jj6","_id":"ciq2f7kjv002a8u4il00anbio"},{"post_id":"ciq2f7kig000u8u4i7piwrjbe","tag_id":"ciq2f7kju00288u4i4j9mlexu","_id":"ciq2f7kjw002c8u4ik0be09z4"},{"post_id":"ciq2f7kij000v8u4i2lfcuwb8","tag_id":"ciq2f7kif000r8u4i4ff5yw3y","_id":"ciq2f7kjx002f8u4iulwdjzl6"},{"post_id":"ciq2f7kij000v8u4i2lfcuwb8","tag_id":"ciq2f7kjw002b8u4idt0no1gy","_id":"ciq2f7kjx002g8u4i5j7me931"},{"post_id":"ciq2f7kij000v8u4i2lfcuwb8","tag_id":"ciq2f7kjw002d8u4it7isqrgp","_id":"ciq2f7kjy002i8u4ii763rgwq"},{"post_id":"ciq2f7kim000z8u4ij7rq3drq","tag_id":"ciq2f7kif000r8u4i4ff5yw3y","_id":"ciq2f7kjz002k8u4iciafer9x"},{"post_id":"ciq2f7kim000z8u4ij7rq3drq","tag_id":"ciq2f7kjw002b8u4idt0no1gy","_id":"ciq2f7kjz002l8u4i33ht7spp"},{"post_id":"ciq2f7kim000z8u4ij7rq3drq","tag_id":"ciq2f7kjw002d8u4it7isqrgp","_id":"ciq2f7kk1002n8u4ikseox6x5"},{"post_id":"ciq2f7kiq00108u4i1ahcjqpd","tag_id":"ciq2f7kif000r8u4i4ff5yw3y","_id":"ciq2f7kk1002o8u4irksmwf35"},{"post_id":"ciq2f7kiq00108u4i1ahcjqpd","tag_id":"ciq2f7kjy002j8u4iv2qj2j86","_id":"ciq2f7kk1002q8u4imtqd2ssz"},{"post_id":"ciq2f7kiz00148u4ic7drn17f","tag_id":"ciq2f7kif000r8u4i4ff5yw3y","_id":"ciq2f7kk2002r8u4ifuxnmap5"},{"post_id":"ciq2f7kiz00148u4ic7drn17f","tag_id":"ciq2f7kjy002j8u4iv2qj2j86","_id":"ciq2f7kk2002t8u4iynv18fr0"},{"post_id":"ciq2f7kj200178u4ir1vyuvr9","tag_id":"ciq2f7kjm001y8u4irfj7m4hj","_id":"ciq2f7kk2002u8u4i1nsz0jo4"},{"post_id":"ciq2f7kja001f8u4irkjwhqwu","tag_id":"ciq2f7kk2002s8u4i2tgiijuh","_id":"ciq2f7kk2002w8u4i073uyw8l"},{"post_id":"ciq2f7kja001f8u4irkjwhqwu","tag_id":"ciq2f7kk2002v8u4ih7g5qisf","_id":"ciq2f7kk3002x8u4iqraxprgu"},{"post_id":"ciq2f7kpj00308u4iwq4m5ltv","tag_id":"ciq2f7kif000r8u4i4ff5yw3y","_id":"ciq2f7kpt00348u4icun72h2y"},{"post_id":"ciq2f7kpj00308u4iwq4m5ltv","tag_id":"ciq2f7kjw002b8u4idt0no1gy","_id":"ciq2f7kpu00358u4i7xsoztc8"},{"post_id":"ciq2f7kpj00308u4iwq4m5ltv","tag_id":"ciq2f7kjw002d8u4it7isqrgp","_id":"ciq2f7kpv00388u4i0f696kl3"},{"post_id":"ciq2f7kpq00338u4ij72g0rck","tag_id":"ciq2f7kif000r8u4i4ff5yw3y","_id":"ciq2f7kpv003a8u4iextw2kbk"},{"post_id":"ciq2f7kpq00338u4ij72g0rck","tag_id":"ciq2f7kjy002j8u4iv2qj2j86","_id":"ciq2f7kpw003d8u4irjl7wxr5"},{"post_id":"ciq2f7kpg002y8u4iqokpowl8","tag_id":"ciq2f7kpp00318u4i30fe8891","_id":"ciq2f7kpx003e8u4ifswcsd28"},{"post_id":"ciq2f7kpg002y8u4iqokpowl8","tag_id":"ciq2f7kpv00378u4iadvjm276","_id":"ciq2f7kpx003f8u4iwp8uvbuc"},{"post_id":"ciq2f7kpg002y8u4iqokpowl8","tag_id":"ciq2f7kpv003c8u4i77mx6k70","_id":"ciq2f7kpx003g8u4inw6gyidx"}],"Tag":[{"name":"hexo","_id":"ciq2f7kh400038u4ixvb3yhxh"},{"name":"next","_id":"ciq2f7khd00078u4iv56r48cu"},{"name":"swift","_id":"ciq2f7kif000r8u4i4ff5yw3y"},{"name":"delegate","_id":"ciq2f7kil000y8u4ibf0eybq3"},{"name":"github","_id":"ciq2f7kjf001o8u4im33uci2y"},{"name":"ios","_id":"ciq2f7kjm001y8u4irfj7m4hj"},{"name":"UINavigationController","_id":"ciq2f7kjp00218u4ichyhwqqi"},{"name":"animation","_id":"ciq2f7kjr00268u4iqjvl3jj6"},{"name":"mac","_id":"ciq2f7kju00288u4i4j9mlexu"},{"name":"QRCode","_id":"ciq2f7kjw002b8u4idt0no1gy"},{"name":"AVFoundation","_id":"ciq2f7kjw002d8u4it7isqrgp"},{"name":"SnapKit","_id":"ciq2f7kjy002j8u4iv2qj2j86"},{"name":"android","_id":"ciq2f7kk2002s8u4i2tgiijuh"},{"name":"android studio","_id":"ciq2f7kk2002v8u4ih7g5qisf"},{"name":"git","_id":"ciq2f7kpp00318u4i30fe8891"},{"name":"git@osChina","_id":"ciq2f7kpv00378u4iadvjm276"},{"name":"sourceTree","_id":"ciq2f7kpv003c8u4i77mx6k70"}]}}